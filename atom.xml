<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Double-c</title>
  
  <subtitle>而废不能半途</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://double-c.github.io/"/>
  <updated>2018-08-24T01:43:11.606Z</updated>
  <id>https://double-c.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《精进:如何成为一个很厉害的人》</title>
    <link href="https://double-c.github.io/2018/08/24/refine/"/>
    <id>https://double-c.github.io/2018/08/24/refine/</id>
    <published>2018-08-24T01:37:59.000Z</published>
    <updated>2018-08-24T01:43:11.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哦啦啦"><a href="#哦啦啦" class="headerlink" title="哦啦啦"></a>哦啦啦</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;哦啦啦&quot;&gt;&lt;a href=&quot;#哦啦啦&quot; class=&quot;headerlink&quot; title=&quot;哦啦啦&quot;&gt;&lt;/a&gt;哦啦啦&lt;/h2&gt;
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://double-c.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="自律" scheme="https://double-c.github.io/tags/%E8%87%AA%E5%BE%8B/"/>
    
      <category term="行动" scheme="https://double-c.github.io/tags/%E8%A1%8C%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>初次接触 Yii</title>
    <link href="https://double-c.github.io/2018/08/22/yii2-learn-note/"/>
    <id>https://double-c.github.io/2018/08/22/yii2-learn-note/</id>
    <published>2018-08-22T01:13:38.000Z</published>
    <updated>2018-09-07T12:37:24.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Yii2-0"><a href="#Yii2-0" class="headerlink" title="Yii2.0"></a>Yii2.0</h2><blockquote><p>记录下首次接触这个框架学习的点点滴滴</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>关于 <code>.env</code></li><li><code>init()</code> 代替 <code>__construct</code></li><li>控制器<ul><li><a href="#actions">actions()</a></li><li><a href="#behaviors">behaviors()</a></li></ul></li><li>路由<ul><li><a href="#定义路由">定义路由</a></li><li><a href="#生成路由">生成路由</a></li></ul></li><li>模型<ul><li><a href="#查询器">查询器</a></li><li><a href="#查看生成的sql语句">查看生成的sql语句</a></li></ul></li><li>视图<ul><li><a href="#小部件">小部件</a></li><li><a href="#分页">分页</a></li></ul></li><li>响应<ul><li><a href="#状态码">状态码</a></li><li><a href="#响应头">响应头</a></li><li><a href="#响应主体">响应主体</a></li><li><a href="#跳转">跳转</a></li></ul></li><li>异常<ul><li><a href="#自定义错误处理动作">自定义错误处理动作</a></li><li><a href="#获取异常相关信息">获取异常相关信息</a></li></ul></li><li>日志<ul><li><a href="#日志消息">日志消息</a></li><li><a href="#日志目标">日志目标</a></li><li><a href="#自定义日志格式">自定义日志格式</a></li><li><a href="#注释抛出异常会自动记录日志">注释抛出异常会自动记录日志</a></li></ul></li><li>缓存<ul><li><a href="#Redis">Redis</a></li></ul></li></ul><h4 id="关于-env"><a href="#关于-env" class="headerlink" title="关于 .env"></a>关于 <code>.env</code></h4><p>Yii默认是使用 <code>main-local.php</code> 来代表本地环境，会覆盖掉<code>main.php</code> 的配置。 </p><p>参考 <code>Tinkphp5</code> 源码，自定义函数 <code>env()</code> 让框架支持读取 <code>.env</code> 文件配置。</p><blockquote><p> 使用方法：</p><p>在项目入口文件前引用 <code>env.php</code> 文件即可。</p></blockquote><p><strong>env.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">defined(<span class="string">'ENV_PREFIX'</span>) <span class="keyword">or</span> define(<span class="string">'ENV_PREFIX'</span>, <span class="string">'PHP_'</span>); <span class="comment">// 环境变量的配置前缀</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载环境变量配置文件，根据各个项目入口文件的不同，这里需要自己定义</span></span><br><span class="line">$envFilePath = <span class="keyword">__DIR__</span> . <span class="string">'/../.env'</span>;</span><br><span class="line"><span class="comment">// 当项目中存在 .env 文件时加载</span></span><br><span class="line"><span class="keyword">if</span> (is_file($envFilePath)) &#123;</span><br><span class="line">    $env = parse_ini_file(<span class="keyword">__DIR__</span> . <span class="string">'/../.env'</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 全部转换为大写且以_分割做的命名</span></span><br><span class="line">    <span class="keyword">foreach</span> ($env <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">        $name = ENV_PREFIX . strtoupper($key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_array($val)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($val <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $item = $name . <span class="string">'_'</span> . strtoupper($k);</span><br><span class="line">                putenv(<span class="string">"$item=$v"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            putenv(<span class="string">"$name=$val"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'env'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">env</span><span class="params">($name, $default = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 支持以 . 符号分隔数组</span></span><br><span class="line">        $result = getenv(ENV_PREFIX . strtoupper(str_replace(<span class="string">'.'</span>, <span class="string">'_'</span>, $name)));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> !== $result) &#123;</span><br><span class="line">            <span class="comment">// 如果是布尔值相关的字符串转为布尔值</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'false'</span> === $result) &#123;</span><br><span class="line">                $result = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="string">'true'</span> === $result) &#123;</span><br><span class="line">                $result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $default;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="init-代替-construct"><a href="#init-代替-construct" class="headerlink" title="init() 代替 __construct"></a><code>init()</code> 代替 <code>__construct</code></h4><p><code>Yii</code> 里大部分类的构造方法都需要传参并调用父类构造方法。</p><p>为了方便实现构造方法，<code>Yii</code> 每个父类都会定义一个 <code>init()</code> 空方法，并在构造方法使用。</p><p>所以当你需要使用构造方法的时候请选择 <code>init()</code>。 </p><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><p>控制器中允许路由访问的方法都需要加上 <code>action</code> + 方法名才可以访问。例： <code>actionIndex()</code>。</p><h5 id="actions"><a href="#actions" class="headerlink" title="actions()"></a>actions()</h5><p>比如访问 <code>http://host/site/test</code> 的时候，会先在控制器的 <code>action()</code> 方法中找到对应请求的 <code>test</code> 方法</p><p>如果没有那么就会在控制器中找 <code>actionTest()</code> 方法</p><p>把公共的方法放在 <code>actions()</code> 中，这样要对调用一些公共的静态页面时就可以不用写控制器方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'error'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\web\ErrorAction'</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'captcha'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\captcha\CaptchaAction'</span>,</span><br><span class="line">            <span class="string">'fixedVerifyCode'</span> =&gt; YII_ENV_TEST ? <span class="string">'testme'</span> : <span class="keyword">null</span>,    <span class="comment">// 该值的是传入类的变量名</span></span><br><span class="line">        ],</span><br><span class="line">       <span class="comment">//返回验证</span></span><br><span class="line">        <span class="string">'tests'</span>=&gt;[</span><br><span class="line">             <span class="string">'class'</span>=&gt;<span class="string">'backend\models\TestAction'</span>,</span><br><span class="line">         ]</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors()"></a>behaviors()</h5><p>在控制器方法执行之前，使用指定的 <code>过滤器</code> 处理数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'access'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; AccessControl::className(), <span class="comment">// 使用核心过滤器Access 对执行动作进行验证</span></span><br><span class="line">            <span class="string">'only'</span> =&gt; [<span class="string">'logout'</span>], <span class="comment">// 对logout动作进行验证</span></span><br><span class="line">            <span class="string">'rules'</span> =&gt; [ <span class="comment">// 规则</span></span><br><span class="line">                [</span><br><span class="line">                    <span class="string">'actions'</span> =&gt; [<span class="string">'logout'</span>],</span><br><span class="line">                    <span class="string">'allow'</span> =&gt; <span class="keyword">true</span>, <span class="comment">// 只允许认证用户进行访问</span></span><br><span class="line">                    <span class="string">'roles'</span> =&gt; [<span class="string">'@'</span>],</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'verbs'</span> =&gt; [ <span class="comment">// 设置curd动作 所运行的请求方式</span></span><br><span class="line">            <span class="string">'class'</span> =&gt; VerbFilter::className(),</span><br><span class="line">            <span class="string">'actions'</span> =&gt; [</span><br><span class="line">                <span class="string">'logout'</span> =&gt; [<span class="string">'post'</span>], <span class="comment">// post 方法</span></span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="验证器"><a href="#验证器" class="headerlink" title="验证器"></a>验证器</h4><p>定义验证器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">forms</span>\<span class="title">common</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">forms</span>\<span class="title">BaseForm</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneVerifyCodeForm</span> <span class="keyword">extends</span> <span class="title">BaseForm</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $phone;  <span class="comment">// 定义需要验证的字段跟数据库字段名保持一致</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $captcha;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $method = <span class="string">'get'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attributeLabels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'phone'</span> =&gt; <span class="string">'手机号'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证规则</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [[<span class="string">'phone'</span>], <span class="string">'required'</span>]</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$form = <span class="keyword">new</span> PhoneVerifyCodeForm();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$form-&gt;load([<span class="string">'PhoneVerifyCodeForm'</span> =&gt; \Yii::$app-&gt;request-&gt;get();]);</span><br></pre></td></tr></table></figure><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><h5 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h5><p>对应模块的 <code>config</code> 目录下的 <code>main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">    </span><br><span class="line"><span class="string">'urlManager'</span> =&gt; [</span><br><span class="line">            <span class="string">'enablePrettyUrl'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">            <span class="string">'showScriptName'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">'rules'</span> =&gt; [</span><br><span class="line">                <span class="string">'login'</span> =&gt; <span class="string">'site/show-login-form'</span>,  <span class="comment">// http://host/login</span></span><br><span class="line">                <span class="string">'news/detail/&lt;id:\d+&gt;'</span> =&gt; <span class="string">'news/detail'</span>,    <span class="comment">// http://host/news/detail/1</span></span><br><span class="line">            ]</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><h5 id="生成路由"><a href="#生成路由" class="headerlink" title="生成路由"></a>生成路由</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入路由和参数</span></span><br><span class="line">\yii\helpers\Url::toRoute([<span class="string">"news/detail"</span>, <span class="string">'id'</span> =&gt; $v[<span class="string">'id'</span>]])</span><br></pre></td></tr></table></figure><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><h5 id="查询器"><a href="#查询器" class="headerlink" title="查询器"></a>查询器</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模型静态方法find()返回对应模型的查询器</span></span><br><span class="line">$query = Model::find();</span><br><span class="line"><span class="comment">// where()</span></span><br><span class="line">$query-&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>]); <span class="comment">// 查询id=1</span></span><br><span class="line">$query-&gt;where([<span class="string">'in'</span>, <span class="string">'id'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 查新 id IN (1,2,3)</span></span><br><span class="line">               </span><br><span class="line">\Yii::$app-&gt;db-&gt;createCommand($sql)-&gt;queryAll();    <span class="comment">// 使用原生的sql语句查询               </span></span><br><span class="line">               </span><br><span class="line">$query-&gt;asArray() <span class="comment">// 查询结果以数组返回</span></span><br><span class="line"></span><br><span class="line">$query-&gt;orderBy(<span class="string">'sort desc, push_time desc'</span>);   <span class="comment">// 排序</span></span><br><span class="line">               </span><br><span class="line">$query-&gt;all();    <span class="comment">// 返回所有结果</span></span><br></pre></td></tr></table></figure><h5 id="查看生成的sql语句"><a href="#查看生成的sql语句" class="headerlink" title="查看生成的sql语句"></a>查看生成的sql语句</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>])-&gt;createCommand()-&gt;getRawSql(); <span class="comment">// 将all()方法替换即可</span></span><br></pre></td></tr></table></figure><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><h5 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h5><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-base-controller#render(" target="_blank" rel="noopener">render()</a>-detail): 渲染一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#named-views" target="_blank" rel="noopener">视图名</a> 并使用一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#layouts" target="_blank" rel="noopener">布局</a> 返回到渲染结果。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-base-controller#renderPartial(" target="_blank" rel="noopener">renderPartial()</a>-detail): 渲染一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#named-views" target="_blank" rel="noopener">视图名</a> 并且不使用布局。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-controller#renderAjax(" target="_blank" rel="noopener">renderAjax()</a>-detail): 渲染一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#named-views" target="_blank" rel="noopener">视图名</a> 并且不使用布局， 并注入所有注册的JS/CSS脚本和文件，通常使用在响应AJAX网页请求的情况下。</li></ul><h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><p>当控制器调用 <code>render()</code>  渲染视图时，默认会使用 <code>@app/views/layouts/main.php</code> 作为布局文件。</p><p>例如：下面代码使用 <code>post.php</code> 作为布局文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $layout = <span class="string">'post'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="小部件"><a href="#小部件" class="headerlink" title="小部件"></a>小部件</h5><p>可以重复利用的视图都可以将其用小部件来展示</p><p> 小部件类：<code>model/widget/DemoWidget</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">widgets</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">DemoService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Widget</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $service = <span class="keyword">new</span> DemoService();</span><br><span class="line">        <span class="comment">// 获取数据并注入到data属性</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = $service-&gt;getData(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 去渲染该路径的视图文件 model/widget/views/demo.php</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'demo'</span>, [</span><br><span class="line">            <span class="string">'data'</span> =&gt; <span class="keyword">$this</span>-&gt;data</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小部件视图文件： <code>model/widget/views/demo.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;xw_wp sw&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;con_r&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;ln&quot;&gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;ti&quot;&gt;新闻排行&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class=&quot;xw&quot;&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">        $newsNum = 1;</span><br><span class="line">        if (is_array($data)) &#123; foreach ($data as $v) &#123;</span><br><span class="line">        ?&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;&lt;?= \yii\helpers\Url::toRoute([&quot;news/detail&quot;, &apos;id&apos; =&gt; $v[&apos;id&apos;]])?&gt;&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;ic dls&quot;&gt;&lt;?=$newsNum ?&gt;&lt;/span&gt;</span><br><span class="line">                &lt;span class=&quot;ti dls&quot;&gt;&lt;?=\yii\helpers\Html::encode($v[&apos;title&apos;]) ?&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">        $newsNum++;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h5><p>控制器方法 <code>app/controller</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $count = <span class="keyword">$this</span>-&gt;newsService-&gt;getNewsCount();</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    $pagination = <span class="keyword">new</span> Pagination([</span><br><span class="line">        <span class="string">'totalCount'</span> =&gt; $count,     <span class="comment">// 数据总数</span></span><br><span class="line">        <span class="string">'defaultPageSize'</span> =&gt; <span class="number">2</span>,     <span class="comment">// 每页显示的数据条数</span></span><br><span class="line">    ]);</span><br><span class="line">    $list = <span class="keyword">$this</span>-&gt;newsService-&gt;getNewsList($pagination-&gt;limit, $pagination-&gt;offset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'list'</span>, compact(<span class="string">'list'</span>, <span class="string">'pagination'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图  <code>app/views</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">......</span><br><span class="line">// 显示分页</span><br><span class="line">echo \yii\widgets\LinkPager::widget([</span><br><span class="line">    &apos;pagination&apos; =&gt; $pagination,</span><br><span class="line">    &apos;nextPageLabel&apos; =&gt; &apos;下一页&apos;,   // 设置下一页的显示文本</span><br><span class="line">    &apos;prevPageLabel&apos; =&gt; &apos;上一页&apos;,   // 设置上一页的显示文本</span><br><span class="line">    &apos;options&apos; =&gt; [  // 该项的设置的属性都会添加到分页组件的 &lt;ul&gt; 标签上</span><br><span class="line">        &apos;class&apos; =&gt; &apos;my-class-name&apos;,</span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p>响应对象包含的信息有HTTP状态码，HTTP头和主体内容等。</p><p>从本质上说，网页应用开发最终的目标就是<strong>根据不同的请求去构建这些响应对象</strong>。</p><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><p>手动设置状态码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;statusCode = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p>如果需要指定请求失败，可抛出对应的 <code>HTTP</code> 异常</p><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-badrequesthttpexception" target="_blank" rel="noopener">yii\web\BadRequestHttpException</a><ul><li>状态码：400</li><li>错误请求</li><li>服务器不理解请求的语法</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-unauthorizedhttpexception" target="_blank" rel="noopener">yii\web\UnauthorizedHttpException</a><ul><li>状态码：401</li><li>未授权</li><li>请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-forbiddenhttpexception" target="_blank" rel="noopener">yii\web\ForbiddenHttpException</a><ul><li>状态码：403</li><li>禁止</li><li>服务器拒绝请求</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-notfoundhttpexception" target="_blank" rel="noopener">yii\web\NotFoundHttpException</a><ul><li>状态码：404</li><li>未找到</li><li>服务器找不到请求的网页</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-servererrorhttpexception" target="_blank" rel="noopener">yii\web\ServerErrorHttpException</a><ul><li>状态码 : 500</li><li>服务器内部错误</li><li>服务器遇到错误，无法完成请求</li></ul></li></ul><h5 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$headers = Yii::$app-&gt;response-&gt;headers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个 Pragma 头，已存在的Pragma 头不会被覆盖。</span></span><br><span class="line">$headers-&gt;add(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个Pragma 头. 任何已存在的Pragma 头都会被丢弃</span></span><br><span class="line">$headers-&gt;set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除Pragma 头并返回删除的Pragma 头的值到数组</span></span><br><span class="line">$values = $headers-&gt;remove(<span class="string">'Pragma'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>请求头大小写敏感。</p></blockquote><h5 id="响应主体"><a href="#响应主体" class="headerlink" title="响应主体"></a>响应主体</h5><p>返回数据前先设置格式，<code>format</code> 属性指定 <code>data</code> 中数据格式化后的样式，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$response = Yii::$app-&gt;response;</span><br><span class="line">$response-&gt;format = \yii\web\Response::FORMAT_JSON;</span><br><span class="line">$response-&gt;data = [<span class="string">'message'</span> =&gt; <span class="string">'hello world'</span>];</span><br></pre></td></tr></table></figure><p><code>Yii</code> 支持五种格式：</p><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_HTML-detail" target="_blank" rel="noopener">HTML</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-htmlresponseformatter" target="_blank" rel="noopener">yii\web\HtmlResponseFormatter</a> 来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_XML-detail" target="_blank" rel="noopener">XML</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-xmlresponseformatter" target="_blank" rel="noopener">yii\web\XmlResponseFormatter</a>来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_JSON-detail" target="_blank" rel="noopener">JSON</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-jsonresponseformatter" target="_blank" rel="noopener">yii\web\JsonResponseFormatter</a>来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_JSONP-detail" target="_blank" rel="noopener">JSONP</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-jsonresponseformatter" target="_blank" rel="noopener">yii\web\JsonResponseFormatter</a>来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_RAW-detail" target="_blank" rel="noopener">RAW</a>: use this format if you want to send the response directly without applying any formatting.</li></ul><h5 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h5><p>控制器中直接使用 <code>redirect()</code> 方法进行重定向</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionDemo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redirect(<span class="string">'http://example.com/new'</span>, <span class="number">301</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>redirect()</code> 方法默认为302，该状态码会告诉浏览器请求的资源临时放到了另一个URL地址上。</p><p>可传递 301 状态码告诉浏览器请求的资源已经永久重定向到新的URL地址。</p></blockquote><p>如果请求为 <code>Ajax</code> 请求的时候，发一个 <code>Localtion</code> 头不会使浏览器自动跳转。</p><p>可设置一个 <code>X-Redirect</code> 头，让客户端用 <code>js</code> 获取并实现跳转。</p><p>非控制器中使用如下代码完成跳转</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Yii::$app-&gt;response-&gt;redirect(<span class="string">'/'</span>, <span class="number">301</span>)-&gt;send();</span><br></pre></td></tr></table></figure><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p><code>Yii</code> 内置了一个 <code>ErrorHandler</code> 用来处理错误。</p><blockquote><p>ErrorHandler 默认启用，可以在应用入口脚本定义 <code>YII_ENABLE_ERROR_HANDLER</code> 来禁用</p></blockquote><h5 id="自定义错误处理动作"><a href="#自定义错误处理动作" class="headerlink" title="自定义错误处理动作"></a>自定义错误处理动作</h5><p>应用配置文件 <code>main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'errorHandler'</span> =&gt; [</span><br><span class="line">            <span class="string">'errorAction'</span> =&gt; <span class="string">'site/error'</span>,  <span class="comment">// 指定错误处理动作，使用控制器来处理错误</span></span><br><span class="line">        ],</span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>如果异常不是继承于 <code>UserException</code> ，且 <code>debug</code> 为 <code>true</code>时。</p><p>例： <code>ErrorException</code> 是不会走配置的方法而是直接使用默认的视图显示错误。</p><p>所以上线时必须关闭 <code>debug</code> 才能让所有异常错误走自定义的错误动作。</p><p>方便记录日志。  </p></blockquote><p>错误处理器 <code>yii\base\ErrorHandler</code>  中注释掉105行的 <code>$this-&gt;logException($exception)</code></p><p>错误处理器默认会把每次异常记录为 <code>error</code> 级别的日志。</p><h5 id="获取异常相关信息"><a href="#获取异常相关信息" class="headerlink" title="获取异常相关信息"></a>获取异常相关信息</h5><p>错误处理动作中获取异常相关信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;exception = \Yii::$app-&gt;errorHandler-&gt;exception;   <span class="comment">// 获取抛出的异常类</span></span><br><span class="line">$code = <span class="keyword">$this</span>-&gt;exception-&gt;statusCode    <span class="comment">// 获取异常状态码是属性statusCode,而不是getCode()</span></span><br><span class="line">$message = <span class="keyword">$this</span>-&gt;exception-&gt;getMessage();      <span class="comment">// 获取异常信息</span></span><br><span class="line">$trace = <span class="keyword">$this</span>-&gt;exception-&gt;getTrace();      <span class="comment">// 获取异常堆栈信息</span></span><br></pre></td></tr></table></figure><p>可通过判断异常类是否继承于 <code>UserException</code> 决定是否记录日志</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!$exception <span class="keyword">instanceof</span> UserException) &#123;</span><br><span class="line">    <span class="comment">// write error log</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果异常继承于 <code>UserException</code> 会被认为是用户产生的错误，开发人员不需要去修正。</p><p>如果是 <code>UserException</code> 只需要返回友好的提示信息给用户即可。</p></blockquote><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p><code>Yii</code> 提供了一个日志框架，记录<strong>各种类型</strong>的消息，过滤它们，并将它们收集到不同目标，例：文件，数据库。</p><blockquote><p><code>log</code> 组件必须在 <code>bootstrapping</code>  期间就被加载，以便它能够及时调度日志信息到目标里。</p></blockquote><h5 id="日志消息"><a href="#日志消息" class="headerlink" title="日志消息"></a>日志消息</h5><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#trace(" target="_blank" rel="noopener">Yii::trace()</a>-detail)：记录一条消息去跟踪一段代码是怎样运行的。这主要在开发的时候使用。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#info(" target="_blank" rel="noopener">Yii::info()</a>-detail)：记录一条消息来传达一些有用的信息。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#warning(" target="_blank" rel="noopener">Yii::warning()</a>-detail)：记录一个警告消息用来指示一些已经发生的意外。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#error(" target="_blank" rel="noopener">Yii::error()</a>-detail)：记录一个致命的错误，这个错误应该尽快被检查。</li></ul><p>这些方法可填两个参数</p><p> <code>message</code> 代表要被记录的日志信息</p><p> <code>category</code> 代表要被记录的日志类别</p><blockquote><p>日志消息可以是字符串，也可以是复杂的数据，诸如数组或者对象。</p><p>可用魔术常量 <strong> METHOD </strong> 等当作日志类别区分日志 </p></blockquote><h5 id="日志目标"><a href="#日志目标" class="headerlink" title="日志目标"></a>日志目标</h5><p>一个日志目标是一个 <code>yii\log\Target</code> 类或者它的子类的实例。</p><p>它通过严重级别和类别过滤日志信息，然后将它们导入一些媒介中。</p><p><code>config\main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'bootstrap'</span> =&gt; [<span class="string">'log'</span>],</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'log'</span> =&gt; [</span><br><span class="line">            <span class="comment">// 开启两个文件的日志目标</span></span><br><span class="line">            <span class="string">'targets'</span> =&gt; [  </span><br><span class="line">                [</span><br><span class="line">                    <span class="comment">// 该目标记录一些自定义的的错误日志信息，例如一些数据查询之类的日志</span></span><br><span class="line">                    <span class="comment">// logVars 定义只记录请求的get post 和 cookie</span></span><br><span class="line">                    <span class="comment">// logFile 定义日志的路径 model/runtime/logs/app.log</span></span><br><span class="line">                    <span class="comment">// 该日志目标只记录 app 分类下的日志</span></span><br><span class="line">                    <span class="string">'class'</span> =&gt; <span class="string">'yii\log\FileTarget'</span>,</span><br><span class="line">                    <span class="string">'categories'</span> =&gt; [<span class="string">'app'</span>,],</span><br><span class="line">                    <span class="string">'logFile'</span> =&gt; <span class="string">'@runtime/logs/app.log'</span>,</span><br><span class="line">                    <span class="string">'logVars'</span> =&gt; [<span class="string">'_GET'</span>,<span class="string">'_POST'</span>,<span class="string">'_COOKIE'</span>]</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    <span class="comment">// 该日志目标记录下应用所有未知的bug</span></span><br><span class="line">                    <span class="string">'class'</span> =&gt; <span class="string">'yii\log\FileTarget'</span>,</span><br><span class="line">                    <span class="string">'levels'</span> =&gt; [<span class="string">'error'</span>, <span class="string">'warning'</span>],</span><br><span class="line">                    <span class="string">'logFile'</span> =&gt; <span class="string">'@runtime/logs/bug.log'</span>,</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h5 id="自定义日志格式"><a href="#自定义日志格式" class="headerlink" title="自定义日志格式"></a>自定义日志格式</h5><p>重写 <code>yii\log\FileTarget</code> 中的 <code>getContextMessage()</code> 和 <code>getMessagePrefix()</code>。</p><p><code>app\exceptions\FileLogHandler.php</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">exceptions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">log</span>\<span class="title">FileTarget</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLogHandler</span> <span class="keyword">extends</span> <span class="title">FileTarget</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 该方法定义日志格式，定义为json格式 请求参数为一行 请求报文相关为另一行json</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getContextMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $json = [];</span><br><span class="line">        $server = [];</span><br><span class="line">        $result = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;logVars <span class="keyword">as</span> $name) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>($GLOBALS[$name])) &#123;</span><br><span class="line">                $key = strtolower(substr($name, <span class="number">1</span>));</span><br><span class="line">                <span class="comment">// $_SERVER 只记录关键字段</span></span><br><span class="line">                <span class="keyword">if</span> ($key == <span class="string">'server'</span>) &#123;</span><br><span class="line">                    $server[<span class="string">'SERVER_PROTOCOL'</span>] = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'SERVER_PROTOCOL'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'SERVER_PROTOCOL'</span>];</span><br><span class="line">                    $server[<span class="string">'REDIRECT_STATUS'</span>] = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'REDIRECT_STATUS'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'REDIRECT_STATUS'</span>];</span><br><span class="line">                    $server[<span class="string">'REQUEST_METHOD'</span>]  = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'REQUEST_METHOD'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'REQUEST_METHOD'</span>];</span><br><span class="line">                    $server[<span class="string">'REQUEST_URI'</span>]     = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'REQUEST_URI'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'REQUEST_URI'</span>];</span><br><span class="line">                    $server[<span class="string">'HTTP_ACCEPT'</span>]     = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'HTTP_ACCEPT'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'HTTP_ACCEPT'</span>];</span><br><span class="line">                    $server[<span class="string">'HTTP_USER_AGENT'</span>] = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'HTTP_USER_AGENT'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $json[$key] = $GLOBALS[$name];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($json)) &#123;</span><br><span class="line">            $result .= json_encode($json, JSON_UNESCAPED_UNICODE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($server)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">                $result .= PHP_EOL;</span><br><span class="line">            &#125;</span><br><span class="line">            $result .= json_encode($server, JSON_UNESCAPED_UNICODE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除日志前缀的sessionId,只记录用户id和访问ip</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessagePrefix</span><span class="params">($message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;prefix !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func(<span class="keyword">$this</span>-&gt;prefix, $message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Yii::$app === <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $request = Yii::$app-&gt;getRequest();</span><br><span class="line">        $ip = $request <span class="keyword">instanceof</span> Request ? $request-&gt;getUserIP() : <span class="string">'-'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* <span class="doctag">@var</span> $user \yii\web\User */</span></span><br><span class="line">        $user = Yii::$app-&gt;has(<span class="string">'user'</span>, <span class="keyword">true</span>) ? Yii::$app-&gt;get(<span class="string">'user'</span>) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ($user &amp;&amp; ($identity = $user-&gt;getIdentity(<span class="keyword">false</span>))) &#123;</span><br><span class="line">            $userID = $identity-&gt;getId();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $userID = <span class="string">'-'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[$ip][$userID]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 <code>config\main.php</code>  中的 <code>class</code> 需要设置为自定义的日志类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line"><span class="string">'components'</span> =&gt; [</span><br><span class="line">    <span class="string">'log'</span> =&gt; [</span><br><span class="line">        <span class="string">'targets'</span> =&gt; [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'class'</span> =&gt; <span class="string">'app\exceptions\FileLogHandler'</span>,</span><br><span class="line">                <span class="string">'levels'</span> =&gt; [<span class="string">'error'</span>, <span class="string">'warning'</span>],</span><br><span class="line">                <span class="string">'logFile'</span> =&gt; <span class="string">'@runtime/logs/bug.log'</span>,</span><br><span class="line">            ],  </span><br><span class="line">        ],</span><br><span class="line">    ],    </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="注释抛出异常会自动记录日志"><a href="#注释抛出异常会自动记录日志" class="headerlink" title="注释抛出异常会自动记录日志"></a>注释抛出异常会自动记录日志</h5><p><code>yii\base\ErrorHandler</code> 中的 <code>handleException()</code></p><p>注释掉 <code>$this-&gt;logException($exception)</code>  </p><p>否则每次抛出异常的时候 <code>Yii</code> 都会自动记录一个 error 级别的日志</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">........</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleException</span><span class="params">($exception)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($exception <span class="keyword">instanceof</span> ExitException) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;exception = $exception;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;unregister();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PHP_SAPI !== <span class="string">'cli'</span>) &#123;</span><br><span class="line">            http_response_code(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            $this-&gt;logException($exception);      // 自定义异常的日志处理，避免日志过于混乱</span></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><p><code>composer</code> 安装</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> --prefer-dist yiisoft/yii2-redis</span><br></pre></td></tr></table></figure><p>添加配置文件 <code>main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">    <span class="string">'redis'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\redis\Connection'</span>,</span><br><span class="line">            <span class="string">'hostname'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">            <span class="string">'port'</span> =&gt; <span class="number">6379</span>,</span><br><span class="line">            <span class="string">'database'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$redis = Yii::$app-&gt;redis;</span><br><span class="line">$redis-&gt;set(<span class="string">'test'</span>, <span class="number">123</span>);</span><br><span class="line">$redis-&gt;expire(<span class="string">'test'</span>, <span class="number">60</span>);     <span class="comment">// 设置缓存过期的秒数</span></span><br><span class="line">$redis-&gt;get(<span class="string">'test'</span>);            <span class="comment">// 123</span></span><br><span class="line">$redis-&gt;del(<span class="string">'test'</span>);            <span class="comment">// 删除该键</span></span><br></pre></td></tr></table></figure><h4 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p><code>main.php</code> 配置文件下在 <code>components</code> 下添加 <code>user</code> 组件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="string">'components'</span> =&gt; [</span><br><span class="line">    <span class="string">'user'</span> =&gt; [</span><br><span class="line">        <span class="string">'identityClass'</span> =&gt; <span class="string">'common\models\User'</span>,</span><br><span class="line">        <span class="string">'enableAutoLogin'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'identityCookie'</span> =&gt; [<span class="string">'name'</span> =&gt; <span class="string">'_identity-frontend'</span>, <span class="string">'httpOnly'</span> =&gt; <span class="keyword">true</span>],  </span><br><span class="line">    ]       </span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。</p></blockquote><h5 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h5><p><code>common\models\User</code> 对应的用户表模型</p><blockquote><p> 使用 <code>cookie</code> 登录的话表中必须有字段 <code>auth_key</code> 。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">common</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">IdentityInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span> <span class="keyword">implements</span> <span class="title">IdentityInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#123;%users&#125;&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给到的ID查询身份。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|integer $id 被查询的ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IdentityInterface|null 通过ID匹配到的身份对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">findIdentity</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::findOne($id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 token 查询身份。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $token 被查询的 token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IdentityInterface|null 通过 token 得到的身份对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">findIdentityByAccessToken</span><span class="params">($token, $type = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::findOne([<span class="string">'access_token'</span> =&gt; $token]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int|string 当前用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string 当前用户的（cookie）认证密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;auth_key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $authKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean if auth key is valid for current user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateAuthKey</span><span class="params">($authKey)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getAuthKey() === $authKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 每次注册用户的时候为用户生成一个对应的key </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeSave</span><span class="params">($insert)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">parent</span>::beforeSave($insert)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isNewRecord) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;auth_key = \Yii::$app-&gt;security-&gt;generateRandomString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入验证完毕的登陆模型即可登陆，第二个参数设置登陆cookie有效期(秒)</span></span><br><span class="line">\Yii::$app-&gt;user-&gt;login($user, <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line"><span class="comment">// 获取用户id，未登录返回空</span></span><br><span class="line">\Yii::$app-&gt;user-&gt;getId();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Yii2-0&quot;&gt;&lt;a href=&quot;#Yii2-0&quot; class=&quot;headerlink&quot; title=&quot;Yii2.0&quot;&gt;&lt;/a&gt;Yii2.0&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;记录下首次接触这个框架学习的点点滴滴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
      <category term="yii2.0" scheme="https://double-c.github.io/tags/yii2-0/"/>
    
  </entry>
  
  <entry>
    <title>PHP 标准规范</title>
    <link href="https://double-c.github.io/2018/08/16/php-psr/"/>
    <id>https://double-c.github.io/2018/08/16/php-psr/</id>
    <published>2018-08-16T04:08:01.000Z</published>
    <updated>2018-09-16T04:19:53.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><p>参考：<a href="https://psr.phphub.org/" target="_blank" rel="noopener">https://psr.phphub.org/</a></p><p>说明：PSR 是由PHP FIG组织制定的PHP规范，是PHP开发的实践标准</p><p><strong>PHP代码文件必须是不带BOM的UTF-8</strong></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#命名规范">命名规范</a></li><li><a href="#命名空间和类">命名空间和类</a> </li><li><a href="#基本编码准则">基本编码准则</a> </li><li><a href="#方法">方法</a> </li><li><a href="#函数调用">函数调用</a></li><li><a href="#if、elseif和else">if、elseif和else</a></li><li><a href="#switch和case">switch和case</a></li><li><a href="#while和do　while">while和do　while</a></li><li><a href="#for">for</a></li><li><a href="#foreach">foreach</a></li><li><a href="#try　catch">try　catch</a></li><li><a href="#闭包">闭包</a></li><li><a href="#参数和变量可分成多行">参数和变量可分成多行</a> </li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><table><thead><tr><th>类型</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>类</td><td>StudlyCaps</td><td>类的命名 <strong>必须</strong> 遵循大写开头的驼峰命名</td></tr><tr><td>函数</td><td>camelCase</td><td>方法名称 <strong>必须</strong> 符合的小写开头驼峰命名</td></tr><tr><td>类方法</td><td>camelCase</td><td>方法名称 <strong>必须</strong> 符合的小写开头驼峰命名</td></tr><tr><td>变量</td><td>underScore</td><td>变量名可以遵循小写开头驼峰命名</td></tr><tr><td>类的属性</td><td>underScore</td><td>类的属性可以遵循小写开头驼峰命名</td></tr><tr><td>常量</td><td>DATE_APPROVED</td><td>常量中所有字母都 <strong>必须</strong> 大写，词间以下划线分隔</td></tr><tr><td>所有关键字</td><td>static</td><td>全部 <strong>必须</strong> 小写</td></tr><tr><td>个别常量</td><td>true, null,false</td><td>全部 <strong>必须</strong> 小写</td></tr></tbody></table><blockquote><p>命名尽量有意义，实在不行可以使用翻译软件<br>尽量避免没有意义的命名。</p></blockquote><h3 id="命名空间和类"><a href="#命名空间和类" class="headerlink" title="命名空间和类"></a>命名空间和类</h3><ol><li>完整的类名 必须 要有一个顶级命名空间，被称为 “vendor namespace”；</li><li>完整的类名 可以 有一个或多个子命名空间；</li><li>完整的类名 必须 有一个最终的类名；</li><li>完整的类名 可以 由任意大小写字母组成；</li><li>所有类名都 必须 是大小写敏感的。</li></ol><pre><code>类和方法开始花括号“{”必须写在函数声明后自成一行，结束花括号“}”也必须写在函数主体后自成一行类的属性和方法 必须 添加访问修饰符（private、protected 以及 public）abstract以及final必须声明在访问修饰符之前，而static必须声明在访问修饰符后关键词 extends 和 implements 必须 写在类名称的同一行。控制结构的关键字后必须要有一个空格符，而调用方法或函数时则一定不可有。控制结构的开始左括号后和结束右括号前，都一定不可有空格符。namespace 声明后 必须 插入一个空白行。所有 use 必须 在 namespace 后声明。每条 use 声明语句 必须 只有一个 use 关键词。use 声明语句块后 必须 要有一个空白行。</code></pre><p>例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FooInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span> <span class="keyword">implements</span> <span class="title">FooInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $foo = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleFunction</span><span class="params">($a, $b = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($a === $b) &#123;</span><br><span class="line">            bar();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($a &gt; $b) &#123;</span><br><span class="line">            $foo-&gt;bar($arg1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BazClass::bar($arg2, $arg3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="基本编码准则"><a href="#基本编码准则" class="headerlink" title="基本编码准则"></a>基本编码准则</h3><p>非空行后一定不可有多余的空格符。</p><p>每行 一定不可 存在多于一条语句。</p><p>空行可以使得阅读代码更加方便以及有助于代码的分块，一般使用一个空行</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法名称后 一定不可 有空格符</p><p>参数列表中，每个逗号后面 必须 要有一个空格，而逗号前面 一定不可 有空格。</p><p>有默认值的参数，必须 放到参数列表的末尾。</p><p>结构体主体 必须 要有一次缩进。</p><p>一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($arg1, &amp;$arg2, $arg3 = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>方法及函数调用时，方法名或函数名与参数左括号之间 一定不可 有空格</p><p>参数右括号前也 一定不可 有空格</p><p>每个参数前 一定不可 有空格，但其后 必须 有一个空格。</p><p>一个标准的方法调用可参照以下范例，留意其括号、逗号以及空格的位置。<br>例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">bar();</span><br><span class="line">$foo-&gt;bar($arg1);</span><br><span class="line">Foo::bar($arg2, $arg3);</span><br></pre></td></tr></table></figure></p><h3 id="if、elseif和else"><a href="#if、elseif和else" class="headerlink" title="if、elseif和else"></a>if、elseif和else</h3><p>应该使用关键词elseif代替所有else if，以使得所有的控制关键字都像是单独的一个词。</p><p>标准的if结构如下代码所示，请留意「括号」、「空格」以及「花括号」的位置， 注意 else 和 elseif 都与前面的结束花括号在同一行。</p><p>例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($expr1) &#123;</span><br><span class="line">    <span class="comment">// if body</span></span><br><span class="line">&#125; <span class="keyword">elseif</span> ($expr2) &#123;</span><br><span class="line">    <span class="comment">// elseif body</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// else body;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="switch和case"><a href="#switch和case" class="headerlink" title="switch和case"></a>switch和case</h3><p>case语句必须相对switch进行一次缩进</p><p>break语句以及case内的其它语句都必须相对case进行一次缩进。</p><p>如果存在非空的case直穿语句，主体里必须有类似 //no break 的注释。</p><p>标准的switch结构如下代码所示，留意括号、空格以及花括号的位置。</p><p>例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">switch</span> ($expr) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'First case, with a break'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Second case, which falls through'</span>;</span><br><span class="line">        <span class="comment">// no break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Third case, return instead of break'</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Default case'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="while和do-while"><a href="#while和do-while" class="headerlink" title="while和do　while"></a>while和do　while</h3><p>一个规范的while语句应该如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">while</span> ($expr) &#123;</span><br><span class="line">    <span class="comment">// structure body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>标准的do while语句如下所示，同样的，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// structure body;</span></span><br><span class="line">&#125; <span class="keyword">while</span> ($expr);</span><br></pre></td></tr></table></figure></p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>标准的for语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++) &#123;</span><br><span class="line">    <span class="comment">// for body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>标准的 foreach 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> ($iterable <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="comment">// foreach body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try　catch"></a>try　catch</h3><p>标准的 try catch 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// try body</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FirstExceptionType $e) &#123;</span><br><span class="line">    <span class="comment">// catch body</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (OtherExceptionType $e) &#123;</span><br><span class="line">    <span class="comment">// catch body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包声明时，关键词function后以及关键词use的前后都必须要有一个空格。</p><p>开始花括号必须写在声明的同一行，结束花括号必须紧跟主体结束的下一行。</p><p>参数列表和变量列表的左括号后以及右括号前，一定不可有空格。</p><p>参数和变量列表中，逗号前一定不可有空格，而逗号后必须要有空格</p><p>闭包中有默认值的参数必须放到列表的后面。</p><p>标准的闭包声明语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$closureWithArgs = <span class="function"><span class="keyword">function</span> <span class="params">($arg1, $arg2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$closureWithArgsAndVars = <span class="function"><span class="keyword">function</span> <span class="params">($arg1, $arg2)</span> <span class="title">use</span> <span class="params">($var1, $var2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="参数和变量可分成多行"><a href="#参数和变量可分成多行" class="headerlink" title="参数和变量可分成多行"></a>参数和变量可分成多行</h3><p>参数列表以及变量列表 可以 分成多行，这样，包括第一个在内的每个参数或变量都 必须 单独成行，而列表的右括号与闭包的开始花括号 必须 放在同一行。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$longArgs_noVars = <span class="function"><span class="keyword">function</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerArgument</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$noArgs_longVars = <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longVar1,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerVar2,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerVar3</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编码规范&quot;&gt;&lt;a href=&quot;#编码规范&quot; class=&quot;headerlink&quot; title=&quot;编码规范&quot;&gt;&lt;/a&gt;编码规范&lt;/h1&gt;&lt;p&gt;参考：&lt;a href=&quot;https://psr.phphub.org/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
</feed>
