<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Double-c</title>
  
  <subtitle>而废不能半途</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://double-c.github.io/"/>
  <updated>2019-06-20T03:57:41.216Z</updated>
  <id>https://double-c.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>my-vps-install</title>
    <link href="https://double-c.github.io/2019/06/20/my-vps-install/"/>
    <id>https://double-c.github.io/2019/06/20/my-vps-install/</id>
    <published>2019-06-20T03:54:44.000Z</published>
    <updated>2019-06-20T03:57:41.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为中国崛起而编码"><a href="#为中国崛起而编码" class="headerlink" title="为中国崛起而编码"></a>为中国崛起而编码</h2><p>安全上网。</p><p>ubuntu 16.04 配置科学工具。</p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装pip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>pip install - locale.Error: unsupported locale setting</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LC_ALL=C</span><br></pre></td></tr></table></figure><p>Command “python setup.py egg_info” fail with error code 1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade setuptools</span><br><span class="line"></span><br><span class="line">pip3 install ez_setup</span><br></pre></td></tr></table></figure><p>安装 shadowsocks</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip</span><br></pre></td></tr></table></figure><p>安装完成后查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver --version</span><br></pre></td></tr></table></figure><p>创建配置文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/shadowsocks</span><br></pre></td></tr></table></figure><p>创建配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure><p><code>config.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"mypassword"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BBR算法"><a href="#BBR算法" class="headerlink" title="BBR算法"></a>BBR算法</h3><p>BBR是Google最新开发的TCP拥塞控制算法，目前有着较好的带宽提升效果，甚至不比老牌的锐速差。</p><p>BBR在Linux kernel 4.9引入，必须在 Linux 内核版本大于4.9才能开启。</p><p>查看 Linux 内核版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>查看可用的 Linux 内核版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache showpkg linux-image</span><br></pre></td></tr></table></figure><p>找到一个你想要升级的Linux内核版本，如“linux-image-4.10.0-22-generic”：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linux-image-4.10.0-22-generic</span><br></pre></td></tr></table></figure><p>等待安装完成后重启服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>检查bbr是否开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>如果结果中没有 <code>tcp_bbr</code> ，则先运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">modprobe tcp_bbr</span><br><span class="line">echo "tcp_bbr" &gt;&gt; /etc/modules-load.d/modules.conf</span><br><span class="line">echo "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>检查是否开启成功，若均有bbr，则开启bbr成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><h3 id="优化吞吐量"><a href="#优化吞吐量" class="headerlink" title="优化吞吐量"></a>优化吞吐量</h3><p>新建配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysctl.d/local.conf</span><br></pre></td></tr></table></figure><p>复制粘贴：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> max open files</span></span><br><span class="line">fs.file-max = 51200</span><br><span class="line"><span class="meta">#</span><span class="bash"> max <span class="built_in">read</span> buffer</span></span><br><span class="line">net.core.rmem_max = 67108864</span><br><span class="line"><span class="meta">#</span><span class="bash"> max write buffer</span></span><br><span class="line">net.core.wmem_max = 67108864</span><br><span class="line"><span class="meta">#</span><span class="bash"> default <span class="built_in">read</span> buffer</span></span><br><span class="line">net.core.rmem_default = 65536</span><br><span class="line"><span class="meta">#</span><span class="bash"> default write buffer</span></span><br><span class="line">net.core.wmem_default = 65536</span><br><span class="line"><span class="meta">#</span><span class="bash"> max processor input queue</span></span><br><span class="line">net.core.netdev_max_backlog = 4096</span><br><span class="line"><span class="meta">#</span><span class="bash"> max backlog</span></span><br><span class="line">net.core.somaxconn = 4096</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> resist SYN flood attacks</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> reuse timewait sockets when safe</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> turn off fast timewait sockets recycling</span></span><br><span class="line">net.ipv4.tcp_tw_recycle = 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> short FIN timeout</span></span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"><span class="meta">#</span><span class="bash"> short keepalive time</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 1200</span><br><span class="line"><span class="meta">#</span><span class="bash"> outbound port range</span></span><br><span class="line">net.ipv4.ip_local_port_range = 10000 65000</span><br><span class="line"><span class="meta">#</span><span class="bash"> max SYN backlog</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 4096</span><br><span class="line"><span class="meta">#</span><span class="bash"> max timewait sockets held by system simultaneously</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line"><span class="meta">#</span><span class="bash"> turn on TCP Fast Open on both client and server side</span></span><br><span class="line">net.ipv4.tcp_fastopen = 3</span><br><span class="line"><span class="meta">#</span><span class="bash"> TCP receive buffer</span></span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</span><br><span class="line"><span class="meta">#</span><span class="bash"> TCP write buffer</span></span><br><span class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</span><br><span class="line"><span class="meta">#</span><span class="bash"> turn on path MTU discovery</span></span><br><span class="line">net.ipv4.tcp_mtu_probing = 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><p>编辑之前的 <code>shadowsocks-server.service</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/shadowsocks-server.service</span><br></pre></td></tr></table></figure><p>在 <code>ExecStart</code> 前插入一行，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStartPre=/bin/sh -c 'ulimit -n 51200'</span><br></pre></td></tr></table></figure><p>修改后 <code>shadowsocks-server.service</code> 的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStartPre=/bin/sh -c 'ulimit -n 51200'</span><br><span class="line">ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>重载 <code>shadowsocks-server.service</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>重启Shadowsocks：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart shadowsocks-server</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为中国崛起而编码&quot;&gt;&lt;a href=&quot;#为中国崛起而编码&quot; class=&quot;headerlink&quot; title=&quot;为中国崛起而编码&quot;&gt;&lt;/a&gt;为中国崛起而编码&lt;/h2&gt;&lt;p&gt;安全上网。&lt;/p&gt;
&lt;p&gt;ubuntu 16.04 配置科学工具。&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>太用力的人跑不远</title>
    <link href="https://double-c.github.io/2019/05/13/hard-to-run/"/>
    <id>https://double-c.github.io/2019/05/13/hard-to-run/</id>
    <published>2019-05-13T03:13:20.000Z</published>
    <updated>2019-05-13T03:41:41.250Z</updated>
    
    <content type="html"><![CDATA[<p>努力不应该是某种需要被时常觉知的东西</p><p>意志力是短期内会用完的精神能力</p><p>真正坚持到最后的人靠的不是激情</p><p>而是 <strong>恰到好处的喜欢和投入</strong>  </p><p><br></p><p>用力会不自觉的提高你的预期</p><p>不要像个孩子一样向这个世界索取回报</p><p>自我用力的感觉、委屈并不能成为你的筹码  </p><p><br></p><p>太用力更容易产生期望落差</p><p>更不愿接受自己找错了方向的事实</p><p>『 <strong>努力没有回报</strong> 』 本身就是让人非常绝望的事情</p><p>轻装上阵的人，回旋的余地更大  </p><p><br></p><p>人越用力，就会越想要得到及时的良好刺激</p><p>越用力的人对于正刺激的需求就越高</p><p>越不能忍受暂时的负反馈 </p><p> <br></p><p>真正的坚持归于平静</p><p>靠的是温和的发力</p><p>而不是时时刻刻的刺激  </p><p><br></p><p>太用力的人增加了执行的功耗</p><p>纠结，选择和恐惧是太用力的副产品</p><p>只管去做，就是在意识与行动之前尽可能地减少冲突带来的心力损耗  </p><p><br></p><p>执行阶段最大的敌人</p><p>是纠结，是埋怨，是后悔，是内心的冲突</p><p>太用力，就是心理额外动作太多  </p><p><br></p><p>我一直告诫自己不要用力过猛</p><p>以保持自己对困难的钝感</p><p>对不顺的接受程度  </p><p><br></p><p>短期的过度用力极容易造成身体和心理上的挫伤</p><p>哪怕你在做的事情非常重要</p><p>也要保证基本的休息和放松</p><p>不要纵容自己消耗健康来填补对努力的需求  </p><p><br></p><p>到最后你会发现</p><p>尽管你从不认为自己真的拼命过</p><p>但是正因为你走得足够远</p><p>每个人都会认为你多么努力  </p><p><br></p><p>用力的人心里瞎折腾</p><p>真正坚持下来的人往往会觉得</p><p>『 <strong>这就很好</strong> 』  </p><p><br></p><p>『 <strong>用力</strong> 』是个很有意思的话题</p><p>因为它很唯心</p><p>有点玄学的神秘主义色彩的味道  </p><p><br></p><p>和我们直觉相违背的是</p><p>如果你时常觉得自己在一件事上很努力</p><p>很可能显示你对所做之事的出神和用力感</p><p>很可能表明你并不喜欢所做之事</p><p>或者所做之事给你带来了很多不舒服的感觉</p><p>大脑在呼喊救命想要寻求更多的正刺激</p><p>意味着如果你此时不能合理地把所做之事的功耗降下来</p><p>长期下来你是坚持不下去的  </p><p><br></p><p>那些真正学习好的人</p><p>往往不觉得自己有多努力</p><p>或者说真正坚持下来的人</p><p>靠的是习惯</p><p>是一种 <strong>不被知觉</strong> 的温和的努力</p><p>而不是时时刻刻都需要靠意识的激励  </p><p><br></p><p>正反馈并不是长期有效的方式</p><p>因为容易产生依赖</p><p>一旦刺激源消失、特定的环境消息</p><p>被实验者就会退回到原来的地步</p><p>也就是说自我激励在暂时越过不舒适区的过程是有效的</p><p>但不是长期的策略</p><p>就好比吗啡</p><p>可以帮你度过手术台的暂时难关</p><p>却无法让你一辈子都沉浸在无痛中  </p><p><br></p><p>鸡汤的危害在于过于强调激励的重要性</p><p>却没有指出激励的不可持续性  </p><p><br></p><p>成功的人</p><p>也许是幸运</p><p>也许是天赋异禀</p><p>使他们在越过不舒服区的时间大大缩减</p><p>形成更加长期的无意识的高水准的行为  </p><p><br></p><p>坚持的终极目标是无意识行为</p><p>是与生活的无缝融合</p><p>自我激励等正刺激</p><p>需要被合理谨慎的使用  </p><p><br></p><p>比激励更重要的是过程的优化</p><p>任何傻瓜都知道要努力</p><p>只有少数人知道懂得优化减少用力的程度了  </p><p><br></p><p>到最后你发现</p><p>你真的坚持下来了</p><p>没有一个是你需要很挣扎才能坚持下来的</p><p>需要很多挣扎的都死在了半路上了</p><p>因为把马拉松当成了百米冲刺  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;努力不应该是某种需要被时常觉知的东西&lt;/p&gt;
&lt;p&gt;意志力是短期内会用完的精神能力&lt;/p&gt;
&lt;p&gt;真正坚持到最后的人靠的不是激情&lt;/p&gt;
&lt;p&gt;而是 &lt;strong&gt;恰到好处的喜欢和投入&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;用力会不自觉的提高你的预期
      
    
    </summary>
    
      <category term="更好的自己" scheme="https://double-c.github.io/categories/%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    
    
      <category term="自律" scheme="https://double-c.github.io/tags/%E8%87%AA%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于代理两三事</title>
    <link href="https://double-c.github.io/2019/04/23/http-proxy/"/>
    <id>https://double-c.github.io/2019/04/23/http-proxy/</id>
    <published>2019-04-23T02:54:45.000Z</published>
    <updated>2019-04-23T03:00:13.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于代理两三事"><a href="#关于代理两三事" class="headerlink" title="关于代理两三事"></a>关于代理两三事</h2><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在某些『 特定 』的场景下，我们外网的访问会受到限制。</p><p>如果有一些特殊的访问需求的话，就需要一个『 <strong>代理</strong> 』作为中转的服务器。</p><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><ol><li>平时能正常爬虫的网站，突然无法爬取，可能是 ip 被封，此网站可能会对 ip 进行解析。</li><li>一些未被 GFW 屏蔽的网站由于国内的网络连接时不稳定，需要使用国外代理稳定快速连接</li></ol><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>在服务器中开启代理服务器，让程序使用服务器网络进行数据爬取。</p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#Socks代理">Socks代理</a></li><li><a href="#Http代理">Http代理</a></li><li><a href="#GFW">GFW</a></li><li><a href="#Tinyproxy">Tinyproxy</a></li><li><a href="#privoxy">privoxy</a></li></ul><h4 id="Socks代理"><a href="#Socks代理" class="headerlink" title="Socks代理"></a>Socks代理</h4><p>它通过 Tcp 连接把目标主机和客户端连接在一起，并转发所有流量。</p><p>Socks 代理在任何情况下都不会中断 server 与 client 之间的数据</p><p>这是由这种协议的特性，非明文，但是在 Socks 代理服务器还是能还原 TCP 和 UDP流量</p><p>大多数浏览器是支持 Socks5 代理，浏览器上网的时候需要与目标主机建立 TCP 连接</p><p>这个时候浏览器会告诉 Socks5 代理，它想与目标主机进行通讯</p><p>然后 Socks 代理就会转发浏览器的数据，并向主机发出请求，然后再把返回的数据转发回来</p><h5 id="shadowsocks-题外话"><a href="#shadowsocks-题外话" class="headerlink" title="shadowsocks 题外话"></a>shadowsocks 题外话</h5><p>shadowsocks 有 server 端和 client 端，这两个都用来转发数据的，由于所处位置不同，功能也不同</p><p>client 即是本地运行的程序，监听 1080 端口，并把数据转发到远在他乡的 Socks 服务器</p><p>由于这种转发是『 <strong>加密</strong> 』的，是在会话层，所以 GFW 过滤的难度很大</p><p>server 那边收到数据后，会原原本本的把数据再向目标请求，收到反馈后再返回给 client 1080 端口</p><p>这样一条 tcp 连接就这样建立起来了</p><h4 id="Http-代理"><a href="#Http-代理" class="headerlink" title="Http 代理"></a>Http 代理</h4><p>Http 代理跟上面的原理相似，用处也基本相同。</p><p>它与 Socks 代理不同的是， Http 代理可以中断连接 ( 即在中间截断数据流 )</p><p>因为 Http 代理是以 Http 请求为基础的，而这些请求大多以明文形式存在</p><p>所以 Http 代理可以在 Client 和下游服务器中间窃听，修改数据</p><p>同时 Http 代理也能缓存请求的资源，提升访问速度</p><h4 id="GFW"><a href="#GFW" class="headerlink" title="GFW"></a>GFW</h4><p>很久很久以前，我们访问网站都是简单而直接的</p><p>用户通过互联网请求服务提供方，用户提供方直接将信息反馈给用户</p><p>后来，『 GFW 』就出现了，他像一个收过路费的强盗夹在了用户和服务之间 ( Http 请求可以在中间截断数据流 )</p><p>每当用户需要获取信息，都经过了 GFW ， GFW 将它不喜欢的内容统统都过滤掉</p><p>当用户触发到 GFW 的过滤规则的时候，就会收到 <code>Connection Reset</code>  这样的响应</p><h4 id="Tinyproxy"><a href="#Tinyproxy" class="headerlink" title="Tinyproxy"></a>Tinyproxy</h4><p>Tinyproxy 是一款轻量级的 http(s) 代理工具。</p><p><strong>这只是一个透明代理，本身不具备任何传输安全性。</strong></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>以 Centos 为例</p><p><code>yum -y install tinyproxy</code></p><p>修改配置文件</p><p><code>/etc/tinyproxy/tinyproxy.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="meta">#</span><span class="bash"> 8888 是默认端口</span></span><br><span class="line">Port 8888</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置允许连接的ip和网段，如果注释掉，则允许所有连接</span></span><br><span class="line">Allow 127.0.0.1</span><br></pre></td></tr></table></figure><p>防火墙开放 (默认端口：8888 或自定义的端口 )</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 8888 -j ACCEPT</span><br><span class="line">firewall-cmd --zone=public --add-port=8888/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service tinyproxy restart</span><br></pre></td></tr></table></figure><p>测试连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x &lt;ip&gt;:&lt;port&gt; www.baidu.com</span><br></pre></td></tr></table></figure><p>其中 ip 和 port 是代理服务器的 ip 和端口，如果出现百度源码则证明配置成功</p><blockquote><p>国情使然</p><p>tinyproxy</p></blockquote><h4 id="privoxy"><a href="#privoxy" class="headerlink" title="privoxy"></a>privoxy</h4><p>该款用处：将 Http 代理桥接为 Socks5 代理</p><blockquote><p> 由于我的 VPS 装的是 centos 6，在安装 privoxy 时遇到了坑，在此记录下安装方法</p><p> 就不对 privoxy 做过多介绍了，也是一款 Http 代理</p></blockquote><p>Centos 6 安装 privoxy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">rpm -Uvh epel-release-6-8.noarch.rpm</span><br><span class="line">yum install privoxy</span><br><span class="line">service privoxy start</span><br></pre></td></tr></table></figure><blockquote><p>执行：rpm -Uvh epel-release-6-8.noarch.rpm</p><p>提示：package epel-release-6-8.noarch is already installed</p><p>执行: yum remove epel-release 卸载重新安装即可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于代理两三事&quot;&gt;&lt;a href=&quot;#关于代理两三事&quot; class=&quot;headerlink&quot; title=&quot;关于代理两三事&quot;&gt;&lt;/a&gt;关于代理两三事&lt;/h2&gt;&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="http" scheme="https://double-c.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式范例</title>
    <link href="https://double-c.github.io/2019/03/26/php-design/"/>
    <id>https://double-c.github.io/2019/03/26/php-design/</id>
    <published>2019-03-26T09:03:38.000Z</published>
    <updated>2019-05-13T06:43:35.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="php设计模式范例"><a href="#php设计模式范例" class="headerlink" title="php设计模式范例"></a>php设计模式范例</h2><ul><li><p>转载于：<a href="http://larabase.com/collection/5/post/143" target="_blank" rel="noopener">戳这</a></p></li><li><p>非原创，侵权即删。转自 <code>LaraBase</code>。</p></li></ul><blockquote><p>我认为人们对于设计模式抱有的问题在于大家都了解它们却不知道该如何在实际中使用它们。</p></blockquote><p>设计模式的关键在于设计，意味着你已经开始想创造一个东西，比如：写一个新框架。</p><p>设计模式体现的是抽象和设计能力，写出一种巧妙，可以伸缩，可以维护的代码架构。</p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><strong>创建型设计模式</strong><ul><li><a href="#单例模式">单例模式</a>：保证一个类只有一个实例化对象</li><li><a href="#简单工厂模式">简单工厂模式</a>：不用 <code>new</code> 关键字来获得实例，而是把业务类放进一个工厂类里，由工厂类生产出对应的实例</li><li><a href="#工厂方法模式">工厂方法模式</a>：允许多个工厂存在，相当于给多个工厂分组</li><li><a href="#抽象工厂模式">抽象工厂模式</a>：抽象工厂一般使用接口，特点是层层约束的，用来统一标准</li><li><a href="#对象池模式">对象池模式</a>：与单例模式的区别就是，相当于一个对象池管理多个单例</li><li><a href="#原型模式">原型模式</a>：实质就是对对象的复制</li></ul></li><li><strong>结构型设计模式</strong><ul><li><a href="#适配器模式">适配器模式</a>：将第三方类适配成自己需要的类</li><li><a href="#桥接模式">桥接模式</a>：将规定好的接口抽象方法以一定规则组装使用</li><li><a href="#组合模式">组合模式</a>:在批量处理多个实现类时，感觉在使用一个类一样</li><li><a href="#装饰器模式">装饰器模式</a>:当你 <code>extend</code> 用过后又遇到需要再次 <code>extend</code> 的情况时</li><li><a href="#依赖注入">依赖注入</a>：把一个类『 不可能更换的部分 』和 『 可更换的部分 』分离开来</li><li><a href="#门面模式">门面模式</a>:  由一个门面 (入口) 把所有子系统隐藏起来，只需要操作门面就可以</li><li><a href="#链式操作">链式操作</a>： 里面的方法每次都返回 <code>return $this</code></li><li><a href="#代理模式">代理模式</a>：代理和被代理的类必须实现同一接口，可以在代理对象中添加逻辑而不影响到被代理类</li><li><a href="#注册器模式">注册器模式</a>: 很多类的实例，起个别名，然后按照 key - value 的形式放在注册类里，以便之后统一调用</li></ul></li><li><strong>行为性模式</strong><ul><li><a href="#观察者模式">观察者模式</a>: 当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新</li><li><a href="#责任链模式">责任链模式</a>：当你有一个请求，你不知道用哪个方法 ( handler ) 来处理这个请求时，可以用责任链轮询</li><li><a href="#模板方法">模板方法</a>:父类提供一系列模板方法，有的实现了逻辑，有的只是一个接口，子类对接口进行不同实现</li><li><a href="#策略模式">策略模式</a>: 对行为进行依赖反转，对多层 if else 的实现改为依赖于接口而不是具体的实现</li><li><a href="#访问者模式">访问者模式</a>： 用一个类来新增方法</li><li><a href="#遍历模式">遍历模式</a>：实现 laravel 中的集合，用 foreach 来遍历对象</li><li><a href="#空对象模式">空对象模式</a>：避免报错</li><li><a href="#状态模式">状态模式</a></li><li><a href="#命令模式">命令模式</a> </li></ul></li></ul><h3 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h3><p>在软件工程中，创建型设计模式承担着对象创建的职责，尝试创建适合程序上下文的对象。</p><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p><strong>作用：</strong>保证一个类只有一个实例化对象，提供一个<strong>全局访问点</strong>。</p><p>最简单的设计模式，很容易理解。</p><p>最常见的场景就是一个数据库的连接。</p><p>我们每次请求只需要连接一次，也就是说如果我们用类来写的话，只需要一个实例就够了（多了浪费）。</p><p><strong>实现：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySql</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $connect;<span class="comment">// 保存连接实例</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法访问设置为private,防止类被实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">self</span>::$connect = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">''</span>);<span class="comment">// 执行数据库连接</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个用来实例化对象的方法</span></span><br><span class="line">    <span class="comment">// 如果不存在一个这个类的实例属性，就创建一个</span></span><br><span class="line">    <span class="comment">// 否则就取这个实例属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="keyword">self</span>::$connect <span class="keyword">instanceof</span> <span class="keyword">self</span>)) &#123;</span><br><span class="line">            <span class="keyword">self</span>::$connect = <span class="keyword">new</span> <span class="keyword">self</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$connect;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 防止对象被复制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">         trigger_error(<span class="string">'Clone is not allowed !'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 防止反序列化后创建对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">         trigger_error(<span class="string">'Unserialized is not allowed !'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只能这样取得实例，不能new 和 clone</span></span><br><span class="line">    $mysql = Mysql::getInstance();</span><br></pre></td></tr></table></figure><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>本来我们要获取一个类的实例，需要用到 <code>new</code> 关键字。</p><p>但是如果 <code>new</code> 直接写到业务代码里，一个类在很多地方都实例化过，以后要是这个类出了什么问题。比如：修改个名字（实际中，你更多的可能是修改构造函数方法），那么就尴尬了，需要改很多地方。</p><p>工厂模式，顾名思义，就是不用 <code>new</code> 来获得实例，而是把业务类放进一个工厂类里，由工厂类『 生产 』出对应的实例。 </p><p><code>SimpleFactory.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPatterns</span>\<span class="title">Creational</span>\<span class="title">SimpleFactory</span>;    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createBicycle</span><span class="params">()</span>: <span class="title">Bicycle</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bicycle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Bicycle.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPatterns</span>\<span class="title">Creational</span>\<span class="title">SimpleFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">driveTo</span><span class="params">(string $destination)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $destnation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$factory = <span class="keyword">new</span> SimpleFactory();</span><br><span class="line">$bicycle = $factory-&gt;createBicycle();</span><br><span class="line">$bicycle-&gt;driveTo(<span class="string">'Paris'</span>);</span><br></pre></td></tr></table></figure><p>我们需要什么实例，就到工厂的实例方法里去拿。</p><p>我们看到，业务代码里没有出现 <code>new</code> 以及那个具体的业务类，这样业务类我们可以随便更改，以后更新的时候只要在工厂类里修改一次，就可以一对多的在各处生效了。</p><blockquote><p>这个方法的名字 $factory-&gt;createBicycle()</p><p>这个名字要起得好，如果你要改这个名字，还是得到多个地方改的。</p></blockquote><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><ul><li><p>概念： <strong>工厂方法模式</strong> 和 <strong>简单工厂模式</strong> 非常接近，唯一不同的是允许有多工厂的存在，相当于给工厂分组。</p></li><li><p>规则</p><ul><li>每个工厂都必须继承一个抽象类或接口类，使之成为多态</li><li>每个产品也必须继承一个抽象类或接口类，也使之成为多态</li><li>每个工厂必须有一个工厂方法返回产品的实例</li></ul></li></ul><p><strong>实例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 工厂和产品接口 */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 工厂和产品实现 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SedanFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCar</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sedan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sedan</span> <span class="keyword">implements</span> <span class="title">Car</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getType</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Sedan'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 客户端 */</span></span><br><span class="line">$factory = <span class="keyword">new</span> SedanFactory();</span><br><span class="line">$car = $factory-&gt;makeCar();</span><br><span class="line"><span class="keyword">print</span> $car-&gt;getType();</span><br></pre></td></tr></table></figure><p>照着这个思路，你还可以搞一个 SuvFactory()，然后生产 Suv汽车。</p><p>你可能会问，这样做的意义？如何运用？</p><p>建议暂时记住定义，搞清楚不同模式的区别（比如说得出简单工厂和工厂方法的区别就可以了），到遇到具体场景你想起来再查找就明白了。</p><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><ul><li>区别：<strong>抽象工厂模式</strong> 与 <strong>工厂方法模式</strong> 在某种程度上是一样的，区别在于子工厂必须全部继承或实现同一个抽象类或者接口。</li><li>规则<ul><li>每个工厂必须继承同一个抽象类或实现同一个接口</li><li>每个工厂必须包含多个工厂方法</li><li>每个工厂的方法必须一致，每个方法返回的实例，必须是继承或实现了同一个抽象或接口的多态类</li></ul></li></ul><p><strong>实现：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Button</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Border</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacButton</span> <span class="keyword">extends</span> <span class="title">Button</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WinButton</span> <span class="keyword">extends</span> <span class="title">Button</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacBorder</span> <span class="keyword">extends</span> <span class="title">Border</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WinBorder</span> <span class="keyword">extends</span> <span class="title">Border</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateButton</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateBorder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateButton</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MacButton(); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateBorder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MacBorder(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WinFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateButton</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WinButton(); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateBorder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WinBorder(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象工厂一般使用接口，特点是层层约束的，缺点是增加产品比较困难。</p><p>比如再增加个 <code>CreateLine()</code> , 接口和实现都得改。</p><p>优点是增加固定类型产品不同品牌比较方便，比如我要再加一个 Linux 品牌，那么再建议一个 LinuxFactory 就可以了。</p><p>你想做统一标准的时候，比如写了一个框架，数据库操作定义了一套接口，你自己写了一个 <code>MySQL</code> 的实现，那么其它人参与开发，比如另一个人写了一个 <code>Oracle</code> 的实现，那么这种标准的价值就体现出来了，它会让你的代码非常一致，不会被别人写乱。</p><blockquote><p>此模式其实比较难理解，还是建议先记住区别，等遇到真实场景就知道怎么运用了。</p></blockquote><h4 id="对象池模式"><a href="#对象池模式" class="headerlink" title="对象池模式"></a>对象池模式</h4><p><strong>场景：</strong></p><p>正常情况下，一个对象随着请求产生，也会随着请求结束被销毁。</p><p>有一些对象，需要依赖外部资源，比如说 <code>MySQL</code> 数据库的连接， <code>socket</code> 的连接， <code>memcahed</code> 的连接，以及一些大对象，比如说图片，字体对象等， 每次创建的时候耗时比较长，极大的影响系统性能，而且上述这些案例有些影响全局的。</p><p>那我们有没有一种自动管理实例创建，如果有实例就不再重复创建呢？</p><p>听上去很耳熟，这不是单例模式吗？是的，单例模式可以解决这个问题。</p><p>这里要介绍的是单例模式的一种升级：<strong>对象池模式</strong> 。</p><p><strong>实现：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectPool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $instances = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$key])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;instances[$key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           $item = <span class="keyword">$this</span>-&gt;make($key);</span><br><span class="line">           <span class="keyword">$this</span>-&gt;instances[$key]=$item;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">return</span> $item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($object, $key)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;instances[$key] = $object;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($key ==<span class="string">'mysql'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Mysql();</span><br><span class="line">        &#125; <span class="keyword">elseif</span>($key ==<span class="string">'socket'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Socket();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果对象池里有 MySQL 的对象实例，就拿出来，如果没有就新建一个，这样无论如何 MySQL实例只会被创建一次，并且会被保存在内存中，以便复用。</p><blockquote><p>与单例模式的区别就是，相当于一个对象池管理多个单例。</p></blockquote><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p><strong>实质就是对 对象 的复制</strong>。</p><p>对一些大型对象，每次去 <code>new</code> ，初始化开销很大，这个时候我们先 <code>new</code> 一个模板对象，然后其它实例都去 clone 这个模板，这样可以节约不少性能。</p><p>这个所谓的模板，就是原型。</p><p>当然，原型模式比单纯的 Clone 要稍微升级一下。</p><p> <strong>普通 Clone</strong></p><p>new 和 clone 都是用来创建对象的方法。</p><p>在php中，<strong>对象的赋值操作实际上是引用操作</strong> （实际上，绝大部分的编程语言也是如此）</p><p>比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myclass</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $data;</span><br><span class="line">&#125;</span><br><span class="line">$obj1 = <span class="keyword">new</span> myclass();</span><br><span class="line">$obj1-&gt;data = <span class="string">"aaa"</span>;</span><br><span class="line">$obj2 = $obj1;</span><br><span class="line">$obj2-&gt;data =<span class="string">"bbb"</span>;     <span class="comment">//$obj1-&gt;data的值也会变成"bbb"</span></span><br><span class="line"></span><br><span class="line">var_dump($obj1-&gt;data);<span class="comment">// bbb</span></span><br><span class="line">var_dump($obj2-&gt;data);<span class="comment">// bbb</span></span><br></pre></td></tr></table></figure><p>但是如果你不是直接引用，而是 clone ，那么相当于做了一个独立的副本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$obj2 = <span class="keyword">clone</span> $obj1;</span><br><span class="line">$obj2-&gt;data =<span class="string">"bbb"</span>;     <span class="comment">//$obj1-&gt;data的值还是"aaa"，不会关联</span></span><br></pre></td></tr></table></figure><p>这样就会得到一个和被复制对象完全没有纠葛的新对象，但两个对象长得一模一样。</p><p><strong>深复制</strong></p><p>深复制非常简单，在被复制对象中加一个魔术方法就可以了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myclass</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $data;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> $item;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;item = <span class="keyword">clone</span> <span class="keyword">$this</span>-&gt;item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个技巧就是被复制对象一旦被复制的时候，就放弃自己的属性，把属性给要求的对象，然后自己存一个属性的副本。</p><p>这样我们复制这个对象的时候，后续对象就不会因为引用的关系而改变源对象了。</p><p>现在正是来讲原型模式，示例如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Prototype</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copy</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">implements</span> <span class="title">Prototype</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  $_name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;_name = $name; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copy</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">clone</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// client</span></span><br><span class="line">$demo = <span class="keyword">new</span> Demo();</span><br><span class="line">$object1 = <span class="keyword">new</span> ConcretePrototype($demo);</span><br><span class="line">$object2 = $object1-&gt;copy();</span><br></pre></td></tr></table></figure><p>从上面的例子不难看出，所谓原型模式就是不直接用 <code>clone</code> 这种关键字写法，而是创建一个原型类。</p><p>把需要被复制的对象丢进原型类里面，然后这个类具有复制自己能力（方法），并且可以继承原型的一些公共属性和方法。</p><p>如果你用过 <code>Carbon</code> 这个处理时间的包，它里面的 <code>copy()</code> 方法就是采用了这个模式。</p><p>但是<strong>上述案例不能解决浅复制的问题。</strong></p><p>原型模式的来龙去脉就是这么回事，怎么合理使用可以遇到问题的时候回来查看这个例子。</p><h3 id="结构性设计模式"><a href="#结构性设计模式" class="headerlink" title="结构性设计模式"></a>结构性设计模式</h3><p>在软件工程中，结构型设计模式集是用来抽象真实程序之中的对象实体之间的关系，并使这种关系可被描述，概括和具体化。</p><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>适配器有点像电源适配器，把110V的电源转换成220V。</p><p>有些第三方类并没有按照规定的接口来实现，而是有自己不同的方法。</p><p>这个时候我们就需要有一个适配器类，来处理一下这个异类。</p><p><strong>实例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Database</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">implements</span> <span class="title">Database</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//mysql 的逻辑</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//mysql 的逻辑</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//mysql 的逻辑</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pdo</span> <span class="keyword">implements</span> <span class="title">Database</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Pdo 的逻辑</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Pdo 的逻辑</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Pdo 的逻辑</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">$database = <span class="keyword">new</span> Mysql(); <span class="comment">//切换数据库只要改这一行就行了，因为后面的都是标准接口方法，不管哪个数据库都一样。</span></span><br><span class="line">$database-&gt;connect();</span><br><span class="line">$database-&gt;query();</span><br><span class="line">$database-&gt;close();</span><br></pre></td></tr></table></figure><p><strong>异类：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三方数据库类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Oracle</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">oracleConnect</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Oracle 的逻辑</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">oracleQuery</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Oracle 的逻辑</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">oracleClose</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Oracle 的逻辑</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>适配器类：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Database</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> $adaptee;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($adaptee)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">$this</span>-&gt;adaptee = $adaptee;   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//这里把异类的方法转换成了 接口标准方法，下同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;adaptee-&gt;oracleConnect();</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;adaptee-&gt;oracleQuery();</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;adaptee-&gt;oracleClose();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$adaptee = <span class="keyword">new</span> Oracle();  </span><br><span class="line">$database = <span class="keyword">new</span> Adapter($adaptee);<span class="comment">//只要改这个类就行了，后面的都可以不用改；</span></span><br><span class="line">$database-&gt;connect();</span><br><span class="line">$database-&gt;query();</span><br><span class="line">$database-&gt;close();</span><br></pre></td></tr></table></figure><p>这就是适配器模式，很简单，也很实用。</p><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><p>我们知道一个类可以实现多个接口，一个接口对应多个实现。</p><p>在不同的实现类中，它实现接口方法的逻辑是不一样的。</p><p>有时候我们需要对这些抽象方法进行一些组合，修改，<strong>但是又能适用于所有实现类</strong>。</p><p>这时候我们需要做一个桥，连接不同的实现类并统一标准。</p><p><strong>一个接口多个实现：</strong></p><p><code>FormatterInterface.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FormatterInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">(string $text)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PlainTextFormatter.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlainTextFormatter</span> <span class="keyword">implements</span> <span class="title">FormatterInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">(string $text)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HtmlFormatter.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HtmlFormatter</span> <span class="keyword">implements</span> <span class="title">FormatterInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">(string $text)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sprintf(<span class="string">'&lt;p&gt;%s&lt;/p&gt;'</span>, $text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>桥接：</strong></p><p><code>Service.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $implementation;</span><br><span class="line">     <span class="comment">//初始化一个FormatterInterface的实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(FormatterInterface $printer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;implementation = $printer;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 可以跟换实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setImplementation</span><span class="params">(FormatterInterface $printer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;implementation = $printer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//桥接抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HelloWordService</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldService</span> <span class="keyword">extends</span> <span class="title">Service</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//桥接抽象方法的实现</span></span><br><span class="line">    <span class="comment">//这个方法是关键，因为它不在受限于原有的接口方法，而是可以自由组合修改，并且你可以编写多个类似的方法，这样就和原接口解耦了。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;implementation-&gt;format(<span class="string">'Hello World'</span>).<span class="string">'-这是修改的后缀'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$service = <span class="keyword">new</span> HelloWorldService(<span class="keyword">new</span> PlainTextFormatter());</span><br><span class="line"><span class="keyword">echo</span> $service-&gt;get(); <span class="comment">//Hello World-这是修改的后缀</span></span><br><span class="line"><span class="comment">//在这里切换实现很轻松</span></span><br><span class="line">$service-&gt;setImplementation(<span class="keyword">new</span> HtmlFormatter());</span><br><span class="line"><span class="keyword">echo</span> $service-&gt;get(); <span class="comment">//&lt;p&gt;Hello World&lt;/p&gt;-这是修改的后缀</span></span><br></pre></td></tr></table></figure><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p><strong>大概什么意思：</strong></p><p>一个接口对于多个实现，并且这些实现中都拥有相同的方法（名）。</p><p>有时候你只需要运行一个方法，就让不同实现类的某个方法或某个逻辑执行一遍。</p><p>在批量处理多个实现类时，感觉在使用一个类一样。</p><p><strong>实现：</strong></p><p> 顶层渲染接口   <code>RenderableInterface.php</code>    </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RenderableInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span>: <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表单构造器 <code>Form.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//必须继承顶层渲染接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span> <span class="keyword">implements</span> <span class="title">RenderableInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $elements;</span><br><span class="line">    <span class="comment">//这里很关键，相当于是批量处理接口实现类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $formCode = <span class="string">'&lt;form&gt;'</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;elements <span class="keyword">as</span> $element) &#123;</span><br><span class="line">            $formCode .= $element-&gt;render();</span><br><span class="line">        &#125;</span><br><span class="line">        $formCode .= <span class="string">'&lt;/form&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> $formCode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这个方法用来注册 接口实现类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addElement</span><span class="params">(RenderableInterface $element)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;elements[] = $element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现类之一 <code>TextElement.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextElement</span> <span class="keyword">implements</span> <span class="title">RenderableInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $text;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $text)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;text = $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现类之二 <code>InputElement.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputElement</span> <span class="keyword">implements</span> <span class="title">RenderableInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;input type="text" /&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>看如何使用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先建立一个表单</span></span><br><span class="line">$form = <span class="keyword">new</span> Form();</span><br><span class="line"><span class="comment">//在表单中增加一个Email元素</span></span><br><span class="line">$form-&gt;addElement(<span class="keyword">new</span> TextElement(<span class="string">'Email:'</span>));</span><br><span class="line">$form-&gt;addElement(<span class="keyword">new</span> InputElement());</span><br><span class="line"><span class="comment">//在表单中增加一个密码元素</span></span><br><span class="line">$form-&gt;addElement(<span class="keyword">new</span> TextElement(<span class="string">'Password:'</span>));</span><br><span class="line">$form-&gt;addElement(<span class="keyword">new</span> InputElement());</span><br><span class="line"><span class="comment">//把表单渲染出来</span></span><br><span class="line">$form-&gt;render();</span><br></pre></td></tr></table></figure><p>这个例子形象的介绍了组合模式，表单的元素可以动态增加，但是只要渲染一次，就可以把整个表单渲染出来。</p><blockquote><p>表单构造器是经典的组合模式的应用，如果你也想实现一个也可以参考该设计模式。</p></blockquote><h4 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h4><p><strong>概述：</strong></p><p>一个类中有一个方法，我需要经常修改它，而且会反反复复，改完了再改回去。</p><p>一般要么我们直接改原来的类中的方法，要么继承一下覆盖这个方法。</p><p>装饰器模式就是可以不用继承，只需要增加一个类进去就可以改掉那个方法。</p><p><strong>场景：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">plainCoffee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCoffee</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addCoffee();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addCoffee</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 加点咖啡</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个煮咖啡的程序，现在我还想加点糖，一般做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sweetCoffee</span> <span class="keyword">extends</span> <span class="title">plainCoffee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCoffee</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addCoffee();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addSugar();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addSugar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 加点糖</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，下面如果我还想加点奶，加点奶油，加点巧克力，加点海盐？</p><p>会 <code>extend</code> 到崩溃。</p><p>要想使用装饰器，需要对最早那个类进行改造</p><p>我们想改造 <code>makeCoffee()</code> 这个方法，无非是在它前面或后面加点逻辑，于是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">plainCoffee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">before</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">after</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCoffee</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;before();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addCoffee();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;after();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addCoffee</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们怎么在 <code>before</code> 和 <code>after</code> 中加入逻辑呢：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">plainCoffee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $decorators;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addDecorator</span><span class="params">($decorator)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;decorators[] = $decorator;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">before</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;decorators <span class="keyword">as</span> $decorator)</span><br><span class="line">        &#123;</span><br><span class="line">            $decorator-&gt;before()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">after</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;decorators <span class="keyword">as</span> $decorator)</span><br><span class="line">        &#123;</span><br><span class="line">            $decorator-&gt;after()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCoffee</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;before();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addCoffee();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;after();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addCoffee</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造好了，我们来看看怎么写装饰器：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetCoffeeDecorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">before</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">after</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addSugar();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addSugar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$coffee = <span class="keyword">new</span> plainCoffee();</span><br><span class="line">$coffee-&gt;addDecorator(<span class="keyword">new</span> SweetCoffeeDecorator());</span><br><span class="line">$coffee-&gt;makeCoffee();</span><br></pre></td></tr></table></figure><p>当你需要在加糖的咖啡再加奶的话，就新建一个类似的装饰器：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$coffee = <span class="keyword">new</span> plainCoffee();</span><br><span class="line">$coffee-&gt;addDecorator(<span class="keyword">new</span> SweetCoffeeDecorator());</span><br><span class="line">$coffee-&gt;addDecorator(<span class="keyword">new</span> MilkCoffeeDecorator());</span><br><span class="line">$coffee-&gt;makeCoffee();</span><br></pre></td></tr></table></figure><p>不难发现，在这里可以自由增加或注释掉修饰器，比较灵活。</p><blockquote><p><strong>当你 extend 用过后又遇到需要再次 extend 的情况时</strong>，不妨考虑一下装饰器模式。</p></blockquote><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p>这是一个著名的设计原则，其实它比其它设计模式都简单。</p><p>依赖注入的实质就是把一个类『 不可能更换的部分 』和 『 可更换的部分 』分离开来</p><p>通过注入的方式来使用，从而达到解耦的目的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySql</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $host;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $prot;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $username;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $databasename;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;host = <span class="string">'127.0.0.1'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;prot = <span class="string">'3306'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">'root'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;databasename = <span class="string">'db'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mysqli_connect(<span class="keyword">$this</span>-&gt;host,<span class="keyword">$this</span>-&gt;username ,<span class="keyword">$this</span>-&gt;password,<span class="keyword">$this</span>-&gt;db_name,<span class="keyword">$this</span>-&gt;port); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，数据库的配置是可以更换的部分，因此我们需要把它拎出来。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlConfiguration</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $host;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $prot;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $username;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $databasename;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $host, int $port, string $username, string $password, string $databasename)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;host = $host;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;prot = $port;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;databasename = $databasename;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHost</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;host;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPort</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;port;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUsername</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPassword</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDatabaseName</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;databasename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不可更换的部分为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySql</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $configuration;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(MysqlConfiguration $config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;configuration = $config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mysqli_connect(<span class="keyword">$this</span>-&gt;configuration-&gt;getHost(), <span class="keyword">$this</span>-&gt;configuration-&gt;getUsername(), <span class="keyword">$this</span>-&gt;configuration-&gt;getPassword, <span class="keyword">$this</span>-&gt;configuration-&gt;getDatabaseName(), <span class="keyword">$this</span>-&gt;configuration-&gt;getPort()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了配置文件和连接逻辑的分离。</p><p><strong>使用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$config = <span class="keyword">new</span> MysqlConfiguration(<span class="string">'127.0.0.1'</span>, <span class="string">'root'</span>, <span class="string">'db'</span>, <span class="string">'3306'</span>);</span><br><span class="line">$db = <span class="keyword">new</span> Mysql($config);</span><br><span class="line">$connect = $db-&gt;connect();</span><br></pre></td></tr></table></figure><p>config 是注入 Mysql 的，这就是所谓的依赖注入。</p><h4 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h4><p>首先来了解一下 Facade 这个单词的意思，建筑的正面，门面，由于以前法国，意大利的建筑只注重修葺临街的一面，十分精美，而背后却十分简陋，所以这个词的引申是 <strong>表象，假象。</strong></p><p>在设计模式中，其实 Facade 这个概念十分简单。</p><p>它主要讲的是设计一个接口来统领所有子系统的功能。</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">freeze</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jump</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">excute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HardDrive</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">($bootSector, $sectorSize)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($bootAddress, $hdData)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CPU，硬盘，内存这三个类是电脑中的子系统，我们需要写一个总系统来组织它们之间的关系，其实这就是 Facade：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputerFacade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $cpu;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> $ram;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> $hd;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;cpu = <span class="keyword">new</span> Cpu();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;ram = <span class="keyword">new</span> Memory();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;hd = <span class="keyword">new</span> HardDrive();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;cpu-&gt;freeze();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;ram-&gt;load(BOOT_ADDRESS, <span class="keyword">$this</span>-&gt;hd-&gt;read(BOOT_SECTOR, SECTOR_SIZE));</span><br><span class="line">    <span class="keyword">$this</span>-&gt;cpu-&gt;jump(BOOT_ADDRESS);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;cpu-&gt;execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$computer = <span class="keyword">new</span> ComputerFacade();</span><br><span class="line">$computer-&gt;start();</span><br></pre></td></tr></table></figure><p>门面模式其实就是这么回事，由一个门面 (入口) 把所有子系统隐藏起来，只需要操作门面就可以。</p><p><strong>Laravel 中的 Facade</strong></p><p>要使用某个类中的方法，必须先实例化它。</p><p>Laravel 中的 Facade 作用是避免使用 new 关键字实例化类，而是通过一个假静态方法最快的使用某一个类中的某个方法。</p><p>比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Cache</span>;</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/cache'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cache::get(<span class="string">'key'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你到 <code>Illuminate\Support\Facades\Cache</code> 这个类里去看，会发现根本不存在一个 get 静态方法。</p><p>但是这个 <code>Illuminate\Support\Facades\Cache</code> 的父类中，有一个魔术方法 <code>__callStatic()</code> ，当调用不存在的静态方法时，会激活这一个魔术方法，在这个魔术方法里，会通过 Ioc 容器找到真正的 Cache 类，并调用真实存在的 get 方法。</p><p>所以这里的 Facade，就是个假的静态，从语言的意思上，其实更符合 Facade 的语义。</p><h4 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h4><p>在 laravel 中，ORM的一系列 sql 操作就是链式操作，特点是每次都返回一个 QueryBuilder。</p><p>实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> $name;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> $surName;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> $salary;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSurname</span><span class="params">($surname)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;surName = $surname;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSalary</span><span class="params">($salary)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;salary = $salary;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">     $employeeInfo = <span class="string">'Name: '</span> . <span class="keyword">$this</span>-&gt;name . PHP_EOL;</span><br><span class="line">     $employeeInfo .= <span class="string">'Surname: '</span> . <span class="keyword">$this</span>-&gt;surName . PHP_EOL;</span><br><span class="line">     $employeeInfo .= <span class="string">'Salary: '</span> . <span class="keyword">$this</span>-&gt;salary . PHP_EOL;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">return</span> $employeeInfo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链式操作的效果</span></span><br><span class="line">$employee = (<span class="keyword">new</span> Employee())</span><br><span class="line">                -&gt;setName(<span class="string">'Tom'</span>)</span><br><span class="line">                -&gt;setSurname(<span class="string">'Smith'</span>)</span><br><span class="line">                -&gt;setSalary(<span class="string">'100'</span>);</span><br><span class="line"><span class="keyword">echo</span> $employee;</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="comment"># Name: Tom</span></span><br><span class="line"><span class="comment"># Surname: Smith</span></span><br><span class="line"><span class="comment"># Salary: 100</span></span><br></pre></td></tr></table></figure><p>这里面能够连续链式操作的关键就在于每个方法都返回 <code>return $this</code></p><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p><strong>概念：</strong></p><p>这个模式比较简单，就是你想访问一个类的时候，不直接访问，而是找这个类的一个代理。</p><p>代理就是中介，有中介就意味着有解耦。</p><p>在代理模式下，代理对象和被代理的对象，有个重要特点：<strong>必须继承同一个接口</strong>。</p><p>之前说过的适配器模式和代理模式非常非常像。</p><p>只不过在适配器模式下，适配器和它要适配的类没有继承同一个接口。</p><p>适配器就是要把这个第三方类变成符合接口规范。</p><p>适配器也是个中介，所以它们很像。</p><p><strong>实现：</strong></p><p>接口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWidth</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RawImage</span> <span class="keyword">implements</span> <span class="title">Image</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWidth</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"100x100"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中介对象 (代理)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageProxy</span> <span class="keyword">implements</span> <span class="title">Image</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $img</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;img = <span class="keyword">new</span> RawImage();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWidth</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;img-&gt;getWidth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$proxy = <span class="keyword">new</span> ImageProxy();</span><br><span class="line">$proxy-&gt;getWidth();</span><br></pre></td></tr></table></figure><p><strong>作用：</strong></p><p>显而易见，解耦。</p><p>因为代理对象和和被代理对象都实现同一接口，所以对于原真实对象，你无论怎么改都行。</p><p>同样，在代理对象中，除了如实反映真实对象的方法逻辑，你还可以添加点别的逻辑，怎么添加都行，不会影响到真实对象，添加后可以在所有使用过代理对象的业务逻辑中瞬时更新。</p><h4 id="注册器模式"><a href="#注册器模式" class="headerlink" title="注册器模式"></a>注册器模式</h4><p><strong>概述：</strong></p><p>注册器模式是一种基础常见的设计模式，它的主要意思是把多个类的实例注册到一个注册器类中去，然后需要哪个类，由这个注册器统一调取。</p><p><strong>实现：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">static</span> $objects;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($alias,$object)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!<span class="keyword">isset</span>($objects[$alias]))&#123;</span><br><span class="line">         <span class="keyword">self</span>::$objects[$alias]=$object;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($alias)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>::$objects[$alias];</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">_unset</span><span class="params">($alias)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">  <span class="keyword">unset</span>(<span class="keyword">self</span>::$objects[$alias]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Register::set(<span class="string">'rand'</span>,stdClass::class);</span><br><span class="line">Register::get(<span class="string">'rand'</span>);</span><br></pre></td></tr></table></figure><p>就是把很多类的实例，起个别名，然后按照 key - value 的形式放在注册类里，以便之后统一调用。</p><p>你可能会想到 Laravel 的 Service Container，容器本质上也是种注册器，但 Laravel 中的实现要比这个例子复杂得多。</p><h3 id="行为性模式"><a href="#行为性模式" class="headerlink" title="行为性模式"></a>行为性模式</h3><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p><strong>概念：</strong></p><p>观察者是一种非常常用的模式，具体在 <strong>事件的设计上</strong> 体现得最明显。</p><p>定义对象间一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p>在 laravel 的事件设计中，我们知道有一个 listener 和一个 handler，当一个 listener 侦听到一个事件发生时，可能有多个 handler 会与之处对应自动处理各自的业务逻辑。</p><p><strong>合理的设计：</strong></p><p>声明一个抽象的事件发生者基类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EventGenerator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $observers = <span class="keyword">array</span>();</span><br><span class="line">    <span class="comment">//添加观察者方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addobserver</span><span class="params">(Observer $observer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers[] = $observer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对每个添加的观察者进行事件通知</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="comment">//对每个观察者逐个去更新</span></span><br><span class="line">       <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> $observer)</span><br><span class="line">       &#123;</span><br><span class="line">         $observer-&gt;update();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个观察者接口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">observer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($eventInfo = null)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明具体事件类，继承了主事件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span> <span class="keyword">extends</span> <span class="title">EventGenerator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">trigger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Event&lt;br/&gt;"</span>;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;notify();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明多个观察者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer1</span> <span class="keyword">implements</span> <span class="title">observer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($event_info = null)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"逻辑1&lt;br/&gt;"</span>; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer2</span> <span class="keyword">implements</span> <span class="title">observer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($event_info = null)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"逻辑2&lt;br/&gt;"</span>; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$event = <span class="keyword">new</span> Event;</span><br><span class="line">$event-&gt;addObserver(<span class="keyword">new</span> Observer1);</span><br><span class="line">$event-&gt;addObserver(<span class="keyword">new</span> Observer2);</span><br><span class="line">$event-&gt;trigger();</span><br></pre></td></tr></table></figure><p>仔细观察代码其实很简单的，Event 基类里的 foreach ，可以实现一个事件对应多个观察者；</p><p>在这里我们就搞明白了，<strong>所谓的观察者就是事件的 handler</strong>。</p><p>它和事件怎么挂钩呢，其实就是需要注册一下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$event-&gt;addObserver(<span class="keyword">new</span> Observer1);</span><br><span class="line">$event-&gt;addObserver(<span class="keyword">new</span> Observer2);</span><br></pre></td></tr></table></figure><p>而这个步骤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$event = <span class="keyword">new</span> Event();</span><br><span class="line">$event-&gt;trigger();</span><br></pre></td></tr></table></figure><p>在 laravel 里被封装成了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event(<span class="keyword">new</span> Event());</span><br></pre></td></tr></table></figure><p><strong>后记：</strong></p><p>从设计原则来理解观察者模式</p><p>实例：拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。</p><ul><li>依赖倒置<ul><li>低层结构要依赖于高层结构</li><li>在这里<strong>调用通知其他竞价者的地方</strong>就是高层结构</li><li>而具体的方法就是低层结构</li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($message) &#123;</span><br><span class="line">    sendMessageToUser();<span class="comment">// 发送标价给竞价者</span></span><br><span class="line">    writeLog();<span class="comment">// 记录竞价信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是个错误例子。</p><p>让高层结构依赖于低层结构，程序便出现了耦合。</p><p>因为在触发了通知的时候，通知这个操作需要知道所有方法 (发送信合和记录竞价信息) 。</p><ul><li><p>不符合单一职责</p><ul><li>当有通知时必须知道触发了哪些任务时，便使职责不再单一</li></ul></li><li><p>开放封闭原则</p><ul><li>开放，对扩展开放</li><li>封闭，对修改封闭</li><li>这里扩展指的就是通知触发的具体的操作</li><li>修改就是当通知触发后需要增加多一种方法时，<strong>不该修改系统已有的程序</strong></li></ul></li></ul><h4 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h4><p><strong>概念：</strong></p><p>责任链是一种比较高级的行为设计模式，就是当你有一个请求，你不知道用哪个方法 ( handler ) 来处理这个请求时，你可以把一个请求丢进一个责任链里 ( 里面有很多方法 ) ，这个 <strong>责任链会通过轮询的方式</strong> 自动找到对应的方法。</p><p><strong>实践：</strong></p><p>比如我要翻译一个单词，我写这个代码的时候，根本不知道用户会输入什么语言，所以我干脆就不管了，无论用户输入什么语言，我把它输入的内容丢进一个责任链，这个责任链里有德语翻译器、英语翻译器、法语翻译器和汉语翻译器等等，丢进去它就自动查找了，找到对应的语言就会自动翻译出来了。</p><blockquote><p>laravel的管道模式、中间件的实现，其实就是责任链模式的变种。</p></blockquote><p><strong>实现：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TranslationResponsibility</span> </span></span><br><span class="line"><span class="class"></span>&#123; <span class="comment">// 抽象责任角色</span></span><br><span class="line">    <span class="keyword">protected</span> $next; <span class="comment">// 下一个责任角色</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">protected</span> $translator;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setNext</span><span class="params">(Responsibility $l)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;next = $l;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">canTranslate</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$translator == check($input)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//写验证输入语言总类的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">translate</span><span class="params">($input)</span></span>; <span class="comment">// 翻译方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnglishTranslator</span> <span class="keyword">extends</span> <span class="title">TranslationResponsibility</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;translator = <span class="string">'English'</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">translate</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前翻译器翻译不了，并且责任链上还有下一个翻译器可用，则让下一个翻译器试试</span></span><br><span class="line">        <span class="keyword">if</span> (!is_null(<span class="keyword">$this</span>-&gt;next) &amp;&amp; !<span class="keyword">$this</span>-&gt;canTranslate($input)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;next-&gt;translate();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//翻译成英语逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrenchTranslator</span> <span class="keyword">extends</span> <span class="title">TranslationResponsibility</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;translator = <span class="string">'French'</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">translate</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前翻译器翻译不了，并且责任链上还有下一个翻译器可用，则让下一个翻译器试试</span></span><br><span class="line">        <span class="keyword">if</span> (!is_null(<span class="keyword">$this</span>-&gt;next) &amp;&amp; !<span class="keyword">$this</span>-&gt;canTranslate($input)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;next-&gt;translate();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//翻译成法语逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组建注册链</span></span><br><span class="line">$res_a = <span class="keyword">new</span> EnglishTranslator();</span><br><span class="line">$res_b = <span class="keyword">new</span> FrenchTranslator();</span><br><span class="line">$res_a-&gt;setNext($res_b);</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">$res_a-&gt;translate(<span class="string">'Bonjour'</span>);</span><br></pre></td></tr></table></figure><p>结果就是是，英语翻译器翻译不了，传递到法语翻译器翻译。</p><p>注意，这里为了简化说明，只展示了2个翻译器互为责任链的情况，如果你需要多个翻译器，还需要改造一下代码，让它能够轮询。</p><h4 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h4><p>最常见的设计模式：</p><p>其实质就是父类提供一系列模板方法，有的实现了逻辑，有的只是一个接口。</p><p>而子类继承大部分共有方法，同时对接口方法进行不同的实现，从而完成对父类模板的个性化改造，起到一对多的解耦目的。</p><p>可以说PHP的抽象类就是为了实现这个设计模式而推出的功能。</p><p><strong>在PHP中，抽象类本身就是模板方法模式。</strong></p><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p><strong>概念：</strong></p><p>策略模式是一个非常常用，且非常有用的设计模式。</p><p>简单的说，<strong>它是当你使用大量 if else 逻辑时的救星。</strong></p><p>if else 就是一种判断上下文环境所作出的策略，如果你把 if else 写死，那么在复杂逻辑的时候你会发现代码超级长，而且最蛋疼的是，当你以后要新增策略的时候，再写一个 else if ???</p><p>万一这个逻辑还要修改20个地方呢？</p><p>策略模式就是用来解决这个问题的。</p><p><strong>场景：</strong></p><p>商城的首页，男的进来看男性商品，女的进来看女性商品，不男不女…… 以此类推，各种条件下用不同策略展示不同商品。</p><p><strong>实现：</strong></p><p>ShowStrategy.php 展示策略接口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ShowStrategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showCategory</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>maleShowStrategy.php 男性用户展示策略</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">maleShowStrategy</span> <span class="keyword">implements</span> <span class="title">showStrategy</span> </span></span><br><span class="line"><span class="class"></span>&#123; <span class="comment">// 具体策略A </span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showCategory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'展示男性商品目录'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>femaleShowStrategy.php 女性用户展示策略</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">femaleShowStrategy</span> <span class="keyword">implements</span> <span class="title">showStrategy</span> </span></span><br><span class="line"><span class="class"></span>&#123; <span class="comment">// 具体策略B</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showCategory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'展示女性商品目录'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Page.php 展示页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $_strategy;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Strategy $strategy)</span> </span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_strategy = $strategy;</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showPage</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_strategy-&gt;showCategory();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'male'</span>]))&#123;</span><br><span class="line">    $strategy = <span class="keyword">new</span> maleShowStrategy();</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="keyword">isset</span>($_GET[<span class="string">'female'</span>]))&#123;</span><br><span class="line">    $strategy = <span class="keyword">new</span> femaleShowStrategy();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意看这里上下，Page类不再依赖一种具体的策略，而是只需要绑定一个抽象的接口，这就是传说中的控制反转（IOC）。</span></span><br><span class="line">$question = <span class="keyword">new</span> Page($strategy);</span><br><span class="line">$question-&gt;showPage();</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>仔细看上面例子，不复杂，我们两个好处：</p><ol><li>它把 if else 抽离出来了，不需要在每个类里写 if else </li><li>它成功的实现了控制反转，Page 类没有具体的依赖策略，这样我们可以随时添加和删除不同策略。</li></ol><blockquote><p>关于依赖反转可以参考：<a href="https://double-c.github.io/2019/01/28/php-design-six-rule/#%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99">设计模式的六大原则</a>。</p><p>策略模式和工厂模式的区别在于：</p><p>工厂模式是为了得到不同的实例，重在创建。</p><p>策略模式重在行为，执行行为。</p></blockquote><h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4><p>简单来说，就是本来你的类里有一个方法，后来因为种种原因，你需要增加新的方法，于是你不断修改这个类。</p><p>访问者模式，可以让你不用一直新增方法，不用改原来的类，而是通过新增一个注入原有类来实现新增方法的目的。</p><p><strong>原有类：</strong></p><p>Unit.php 基类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unit</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//注意这个方法，非常关键，你现在可能没看懂，接着往下看，然后再回来看。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span><span class="params">(Visitor $visitor)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      $method = <span class="string">'visit'</span>. get_class(<span class="keyword">$this</span>);</span><br><span class="line">      <span class="keyword">if</span> (method_exists($visitor, $method)) &#123;</span><br><span class="line">        $visitor-&gt;$method(<span class="keyword">$this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.php 具体类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Unit</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//获取名字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不修改 User 类，达到新增一个方法的目的:</strong></p><p>如果不要修改 User 类，达到新增一个方法的目的，我们需要新增一个访问者类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getPhoneVistor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取电话</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="comment">// 正常获取名字</span></span><br><span class="line">$user-&gt;getName();</span><br><span class="line"><span class="comment">// 通过访问者获取电话</span></span><br><span class="line">$user-&gt;accept(<span class="keyword">new</span> getPhoneVistor());</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>这其实是一个比较抽象的设计模式，如果你在百度搜教程，可能会被带偏，这里把它最小化精简了，并指出实质：<strong>用一个类来新增方法。</strong></p><h4 id="遍历模式"><a href="#遍历模式" class="headerlink" title="遍历模式"></a>遍历模式</h4><p><strong>你真的了解 foreach 吗？</strong></p><p>如果你是 laravel 的用户，那么你应该经常使用这个所谓的遍历模式，但不一定完全理解。</p><p>当你在使用 laravel 的 collection 的时候，你有没有想过为什么可以用一个 foreach 来遍历一个对象？foreach 不是用来遍历数组的吗？</p><p><strong>是的，foreach 可以用来遍历类的属性</strong></p><p>除了遍历数组，我们再来学习一下 foreach 的其他用法，比如，foreach 可以遍历一个类中所有可见属性：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $var1 = <span class="string">'value 1'</span>;</span><br><span class="line">    <span class="keyword">public</span> $var2 = <span class="string">'value 2'</span>;</span><br><span class="line">    <span class="keyword">public</span> $var3 = <span class="string">'value 3'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $protected = <span class="string">'protected var'</span>;</span><br><span class="line">    <span class="keyword">private</span>   $private   = <span class="string">'private var'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">iterateAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">foreach</span>(<span class="keyword">$this</span> <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">           <span class="keyword">print</span> <span class="string">"$key =&gt; $value\n"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$class = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="keyword">foreach</span>($class <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"$key =&gt; $value\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">$class-&gt;iterateAll();</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历可见属性</span></span><br><span class="line">var1 =&gt; value <span class="number">1</span></span><br><span class="line">var2 =&gt; value <span class="number">2</span></span><br><span class="line">var3 =&gt; value <span class="number">3</span></span><br><span class="line"><span class="comment">//遍历所有属性</span></span><br><span class="line">var1 =&gt; value <span class="number">1</span></span><br><span class="line">var2 =&gt; value <span class="number">2</span></span><br><span class="line">var3 =&gt; value <span class="number">3</span></span><br><span class="line"><span class="keyword">protected</span> =&gt; <span class="keyword">protected</span> <span class="keyword">var</span></span><br><span class="line"><span class="keyword">private</span> =&gt; <span class="keyword">private</span> <span class="keyword">var</span></span><br></pre></td></tr></table></figure><p><strong>集合</strong></p><p>foreach 还可以用来遍历集合。</p><p>所谓集合，就是一个类包含多个类，并且这个集合可以像数组一样被遍历，可以进行各种集合运算操作。</p><p>典型例子，laravel 的 collection 对象。</p><p>要实现遍历操作，在设计模式上我们需要采用遍历模式；foreach 是一个封装好的方法，遍历模式就是把这个封装打开给你用。</p><p>在 PHP 中，我们需要实现 Standard PHP Library (SPL)标准库中一个遍历 ( Iterator ) 接口，它的形式如下：</p><p>Book.php     // 单元对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> $author;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> $title;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $title, string $author)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;author = $author;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;title = $title;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthor</span><span class="params">()</span>:<span class="title">string</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;author;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">()</span>:<span class="title">string</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Collection.php 集合对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span> <span class="keyword">implements</span> \<span class="title">Countable</span>, \<span class="title">Iterator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $books = [];</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> $currentIndex = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addBook</span><span class="params">(Book $book)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;books[] = $book;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count(<span class="keyword">$this</span>-&gt;books);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">current</span><span class="params">()</span>: <span class="title">Book</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;books[<span class="keyword">$this</span>-&gt;currentIndex];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">key</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;currentIndex;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;currentIndex++;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rewind</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;currentIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">valid</span><span class="params">()</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;books[<span class="keyword">$this</span>-&gt;currentIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们实现了2个标准接口，<code>\Countable</code>， <code>\Iterator</code> 。<br>如果你去遍历这个Collection对象，那么count()，current()，key()，next()，rewind()，valid()这些方法都会被调用，如果要深入研究，可以在这些方法里打印一下返回值。</p><p>这样处理后，可以对Collection对象进行遍历：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$bookList = <span class="keyword">new</span> Collection();</span><br><span class="line">        $bookList-&gt;addBook(<span class="keyword">new</span> Book(<span class="string">'Learning PHP Design Patterns'</span>, <span class="string">'William Sanders'</span>));</span><br><span class="line">        $bookList-&gt;addBook(<span class="keyword">new</span> Book(<span class="string">'Professional Php Design Patterns'</span>, <span class="string">'Aaron Saray'</span>));</span><br><span class="line">        $bookList-&gt;addBook(<span class="keyword">new</span> Book(<span class="string">'Clean Code'</span>, <span class="string">'Robert C. Martin'</span>));</span><br><span class="line"><span class="keyword">foreach</span> ($bookList <span class="keyword">as</span> $book) &#123;</span><br><span class="line">  <span class="keyword">echo</span> $book-&gt;getAuthor().<span class="string">'-'</span>.$book-&gt;getTitle().<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><p>这个所谓模式和之前学习的模式不一样，有点抽象，先记住是什么意思，回头有时间的话，可以深入研究一下 Laravel Collection 的实现原理。</p><h4 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h4><p>这简直不能算一种设计模式。</p><p><strong>看完这个例子秒懂：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeSound</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeSound</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Woof.."</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeSound</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Meowww.."</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个就是空对象，里面的方法啥也不做，它的存在就是为了避免报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NullAnimal</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeSound</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">// silence...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$animalType = <span class="string">'elephant'</span>;</span><br><span class="line"><span class="keyword">switch</span>($animalType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'dog'</span>:</span><br><span class="line">        $animal = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'cat'</span>:</span><br><span class="line">        $animal = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        $animal = <span class="keyword">new</span> NullAnimal();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">$animal-&gt;makeSound(); <span class="comment">// ..the null animal makes no sound</span></span><br></pre></td></tr></table></figure><p>我们看，如果没有一个空对象作为『Place Holder』放在default这里，那么这个程序就要报错了，为了避免报错，我们可能需要写if 不等于猫狗等等，但是这样很麻烦，万一有100个动物呢，搞一个『空对象』放在这里就好了。</p><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><p>状态模式就是对策略模式前面的 if else 这块逻辑进行升级，不再用 if else 判断，而是根据自身的状态判断。</p><p><strong>实现：</strong></p><p>shop.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shop</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $handler;</span><br><span class="line">    <span class="comment">//这里$state设置一个状态值</span></span><br><span class="line">    <span class="keyword">public</span> $state;</span><br><span class="line">    <span class="comment">//设置默认状态，和默认处理器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="string">'male'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler = <span class="keyword">new</span> maleHandler();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHandler</span><span class="params">(Handler $handler)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler = $handler;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler-&gt;handle(<span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handler.php 业务接口处理类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Handler</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(Shop $shop)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>maleHandler.php 男性业务处理类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">maleHandler</span> <span class="keyword">implements</span> <span class="title">Handler</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(Shop $shop)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($shop-&gt;state ==<span class="string">"male"</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'展示男性商品目录'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $shop-&gt;setHandler(<span class="keyword">new</span> femaleHandler());</span><br><span class="line">            $shop-&gt;show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>femaleHandler.php 女性业务处理类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">femaleHandler</span> <span class="keyword">implements</span> <span class="title">Handler</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">(Shop $shop)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($shop-&gt;state ==<span class="string">"female"</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'展示女性商品目录'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $shop-&gt;setHandler(<span class="keyword">new</span> maleHandler());</span><br><span class="line">            $shop-&gt;show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$shop = <span class="keyword">new</span> Shop;</span><br><span class="line">$shop-&gt;state =<span class="string">"male"</span>;</span><br><span class="line">$shop-&gt;show();</span><br><span class="line"><span class="comment">//展示男性商品目录</span></span><br><span class="line">$shop-&gt;state =<span class="string">"female"</span>;</span><br><span class="line">$shop-&gt;show();</span><br><span class="line"><span class="comment">//展示女性商品目录</span></span><br></pre></td></tr></table></figure><p>我们看到这是一种更厉害的封装，在客户端这一块，if else不见了，甚至连策略类的注入也不见了。<br>看上去很清爽。<br>但其实，在后台的实现，比之前复杂了不少，你需要在每一个handler类里面进行条件判断。</p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p><strong>目的是什么：</strong></p><p>我们想实现的是，只需要输入一个字符串式的指令，就可以执行相应的逻辑，而不用 if else 什么来判断。</p><p>PHP CLI 命令的设计就会用到这个模式。</p><p><strong>实现：</strong></p><p>我们来设计一个电视机开关的指令 ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">excecute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开电视指令</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">turnOnTVCommand</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $controller;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Controller $controller)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;controller = $controller;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">excecute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;controller-&gt;turnOnTV();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关电视指令</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">turnOffTVCommand</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $controller;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Controller $controller)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;controller = $controller;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">excecute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;controller-&gt;turnOffTV();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指令库控制器（储存所有具体执行逻辑）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">turnOnTV</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'打开电视'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">turnOffTV</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'关闭电视'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想换一个指令，那么就修改$command_string就行了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;php设计模式范例&quot;&gt;&lt;a href=&quot;#php设计模式范例&quot; class=&quot;headerlink&quot; title=&quot;php设计模式范例&quot;&gt;&lt;/a&gt;php设计模式范例&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;转载于：&lt;a href=&quot;http://larabase.com/
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>设计模式的六大原则</title>
    <link href="https://double-c.github.io/2019/01/28/php-design-six-rule/"/>
    <id>https://double-c.github.io/2019/01/28/php-design-six-rule/</id>
    <published>2019-01-28T03:49:28.000Z</published>
    <updated>2019-02-11T01:17:17.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#单一职责原则">单一职责原则</a></li><li><a href="#里氏替换原则">里氏替换原则</a></li><li><a href="#依赖倒置原则">依赖倒置原则</a></li><li><a href="#接口隔离原则">接口隔离原则</a></li><li><a href="#迪米特法则">迪米特法则</a></li><li><a href="#开闭原则">开闭原则</a></li></ul><h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><p><strong>引言：</strong></p><p>​        说到单一职责原则很多都会不屑一顾，因为它 <strong>太简单</strong> 了，稍微有经验的程序员即使没有读过设计模式，没有听说过单一职责原则，在设计软件时也会自觉遵守这一重要原则。因为这是常识。</p><p>​        在软件编程中，谁也不希望因为修改了一个功能导致其它功能发生故障。虽然单一原则如此简单，并被认定为常识，但是即便是经验丰富的程序员写出的程序，也会有违背这一原则的代码存在。</p><p>​        为什么会出现这种现象？</p><p>​    因为有职责扩散。所谓职责扩散，就是因为某种原因，职责P被分化为粒度更细的职责P1和职责P2。</p><p>​    比如：类T只负责职责P，这样设计是符合单一职责原则的。后来由于某种原因，也许是需求变更了，也许是程序的设计者境界提高了，需要将职责P细分为粒度更细的P1和P2，这时如果要使程序遵循单一职责原则，需要将类T也分解为T1和T2，分别负责P1和P2两个职责。但在程序已经写好的情况下，这样做简直太浪费时间了。所以简单的修改类T，用它来负责两个职责是一个比较不错的选择。虽然这样做有悖于单一职责原则。</p><blockquote><p>这样做的风险在于 <strong>职责扩展的不稳定性</strong> ，因为我们不会想到这个职责P，在未来可能会扩散为P1，P2，P3，P4 …… Pn 。</p><p>所以记住，在职责扩散到我们无法控制的程度之前，立刻对代码进行重构。</p></blockquote><p><strong>定义：</strong></p><p>一个类只负责一项职责，不要存在多于一个导致类变更的原因。</p><p><strong>实例：</strong></p><ul><li>需求：用一个类描述动物呼吸这个场景</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">breathe</span><span class="params">(string $animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$animal&#125;呼吸空气"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$animal = <span class="keyword">new</span> Animal();</span><br><span class="line">$animal-&gt;breathe(<span class="string">'牛'</span>);</span><br><span class="line">$animal-&gt;breathe(<span class="string">'羊'</span>);</span><br><span class="line">$animal-&gt;breathe(<span class="string">'猪'</span>);</span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">牛呼吸空气</span><br><span class="line"></span><br><span class="line">羊呼吸空气</span><br><span class="line"></span><br><span class="line">猪呼吸空气</span><br></pre></td></tr></table></figure><p>程序上线之后，发现问题了，并不是所有动物都是呼吸空气的，例如：鱼是呼吸水的。</p><p>针对需求变更，有三种解决方法</p><ol><li><p>遵循单一职责原则，需要将类  <code>Animal</code>  细分为陆生动物类 <code>Terrestrial</code> 和水生动物类 <code>Aquatic</code></p></li><li><p>方法层面的单一职责原则，在类 <code>Animal</code> 中新增一个方法 <code>breatheTwo</code> 用于水生动物的呼吸。</p></li><li><p>代码层面的，直接修改 <code>breathe</code> 方法，判断变量 <code>$animal</code> 是什么种类的动物，执行对应的逻辑。</p></li></ol><ul><li>方法一：遵循单一职责原则（推荐做法）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Terrestrial</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">breathe</span><span class="params">(string $animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$animal&#125;呼吸空气"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aquatic</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">breathe</span><span class="params">(string $animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$animal&#125;呼吸水"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$terrestrial = <span class="keyword">new</span> Terrestrial();</span><br><span class="line">$terrestrial-&gt;breathe(<span class="string">'牛'</span>);</span><br><span class="line">$terrestrial-&gt;breathe(<span class="string">'羊'</span>);</span><br><span class="line">$terrestrial-&gt;breathe(<span class="string">'猪'</span>);</span><br><span class="line"></span><br><span class="line">$aquatic = <span class="keyword">new</span> Aquatic();</span><br><span class="line">$aquatic-&gt;breathe(<span class="string">'鱼'</span>);</span><br></pre></td></tr></table></figure><p>方法一 修改花销最大，不仅要修改类，还需要修改客户端。</p><ul><li>方法二：方法层面的单一职责原则</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">breathe</span><span class="params">(string $animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$animal&#125;呼吸空气"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">breatheTwo</span><span class="params">(string $animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$animal&#125;呼吸水"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$animal = <span class="keyword">new</span> Animal();</span><br><span class="line"></span><br><span class="line">$animal-&gt;breathe(<span class="string">'牛'</span>);</span><br><span class="line">$animal-&gt;breathe(<span class="string">'羊'</span>);</span><br><span class="line">$animal-&gt;breathe(<span class="string">'猪'</span>);</span><br><span class="line">$animal-&gt;breatheTwo(<span class="string">'鱼'</span>);</span><br></pre></td></tr></table></figure><p>方法二这种修改方式没有改动原来的方法<br>而是在类中直接新增了一个方法<br>这样虽然也违背了单一职责原则<br>但是在方法级别上却是符合单一职责原则的</p><ul><li>方法三：代码级别的修改</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">breathe</span><span class="params">(string $animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($animal == <span class="string">'鱼'</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$animal&#125;呼吸水"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$animal&#125;呼吸空气"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$animal = <span class="keyword">new</span> Animal();</span><br><span class="line"></span><br><span class="line">$animal-&gt;breathe(<span class="string">'牛'</span>);</span><br><span class="line">$animal-&gt;breathe(<span class="string">'羊'</span>);</span><br><span class="line">$animal-&gt;breathe(<span class="string">'猪'</span>);</span><br><span class="line">$animal-&gt;breathe(<span class="string">'鱼'</span>);</span><br></pre></td></tr></table></figure><p>方法三修改起来最简单，隐患却是最大的。<br>有一天需要把鱼分为呼吸淡水的鱼和呼吸海水的鱼<br>则又需要修改Animal类的breathe方法<br>而对原有方法的修改会对调用“猪”“牛””羊”等相关功能带来风险<br>也许你某一天会发现程序运行就结果变为 “牛呼吸水了”</p><p><strong>遵循单一职责原则的优点有：</strong></p><ul><li>可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多</li><li>提高类的可读性，提高系统可维护性</li><li>变更引起的风险最低，当修改一个功能时，可以显著降低对其他功能的影响。</li></ul><blockquote><p>需要说明一点的是，单一职责原则不只是面向对象编程思想所持有的，只要模块化的程序设计，都适用单一职责原则。</p></blockquote><h4 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h4><p><strong>引言：</strong></p><p>​    继承作为面向对象三大特性之一，在给程序设计带来巨大的便利的同时，也带来了弊端。</p><p>​    比如使用继承会给程序带来入侵性，程序的可移植性降低，增加了对象的耦合性，如果一个类被其他类所继承，则当这个类需要修改时，必须考虑到所有的子类，而且父类修改后，所有涉及到子类的功能都有可能会产生故障。</p><p>​    继承包含这样一层含义：父类中凡是实现好的方法（相对于抽象方法而言），实际上是在设定一定系列的规范和契约，虽然它不强制要求所有子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个抽象体系造成破坏。而历史替换原则就是表达了这一层含义。</p><p><strong>定义：</strong></p><p>子类可以扩展父类的功能，但不能改变父类原有的功能。</p><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li><li>子类可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类的输入参数更宽松</li><li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格</li></ul><h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><p><strong>引言：</strong></p><p>​    依赖倒置原则基于这样一个事实：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建起来的架构比以细节搭建起来的架构要稳定的多。</p><p>​    抽象指的是接口或者抽象类；细节就是具体的实现类，使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现的细节的任务交给他们的实现类去完成。</p><p>​    依赖倒置原则的核心思想是 <strong>面向接口编程</strong> 。</p><p><strong>定义：</strong></p><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不依赖细节；细节应该依赖抽象。</p><p><strong>实例：</strong></p><ul><li>需求：母亲给孩子讲故事，只要给她一本书，她就可以照着书给孩子讲故事了。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"很久很久以前有一个阿拉伯的故事......"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">narrate</span><span class="params">(Book $book)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'妈妈开始讲故事：'</span> . $book-&gt;getContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mother = <span class="keyword">new</span> Mother();</span><br><span class="line">$book = <span class="keyword">new</span> Book();</span><br><span class="line">$mother-&gt;narrate($book);</span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">妈妈开始讲故事：很久很久以前有一个阿拉伯的故事......</span><br></pre></td></tr></table></figure><p>假如有一天，需求变成这样：不是给书而是给一份报纸，让这位母亲讲一下报纸上的故事，报纸代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Newspaper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"林书豪38+7领导尼克斯击败湖人"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这位母亲居然办不到，因为她居然不会读报纸上的故事，这太荒唐了，只是将书换成报纸，居然必须要修改 <code>Mother</code> 类才能读。</p><p>假如以后需求换成杂志呢？换成网页呢？还要不断修改 <code>Mother</code> 类，这显然不是好的设计。原因是 <code>Mother</code> 和 <code>Book</code> 之间的耦合性太高了，必须降低他们之间的耦合度才行。</p><ul><li>解决方法：我们引入一个抽象的接口 <code>IReader</code> 。读物，只要是带字的都属于读物，每种读物都有自己的名称。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">IReader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"很久很久以前有一个阿拉伯的故事......"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"故事"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Newspaper</span> <span class="keyword">implements</span> <span class="title">IReader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"林书豪38+7领导尼克斯击败湖人"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"报纸"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">narrate</span><span class="params">(IReader $iReader)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'妈妈开始讲'</span> . $iReader-&gt;getName() . <span class="string">'：'</span> . $iReader-&gt;getContent();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mother = <span class="keyword">new</span> Mother();</span><br><span class="line">$book = <span class="keyword">new</span> Book();</span><br><span class="line">$newspaper = <span class="keyword">new</span> Newspaper();</span><br><span class="line">$mother-&gt;narrate($book);<span class="comment">// 故事书</span></span><br><span class="line">$mother-&gt;narrate($newspaper);<span class="comment">// 报纸</span></span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">妈妈开始讲故事：很久很久以前有一个阿拉伯的故事......</span><br><span class="line">妈妈开始讲报纸：林书豪38+7领导尼克斯击败湖人</span><br></pre></td></tr></table></figure><p>这样修改后，以后无论怎么扩展客户端，都不需要修改 <code>Mother</code> 类。这只是一个简单的例子。</p><p>代表高层模块的 <code>Mother</code> 类负责完成主要的业务逻辑，一旦需要对它进行修改，引入的风险极大。所以遵循依赖倒置原则可以降低类之间的耦合性，提高系统的稳定性，降低修改程序造成的风险。</p><p>采用依赖倒置原则给多人并行开发带来了极大的便利，比如上例中，原本 <code>Mother</code> 类于 <code>Book</code> 类直接耦合时，<code>Mother</code> 类依赖于 <code>Book</code> 类。修改后的程序则可以同时开工，互不影响，因为 <code>Mother</code> 于 <code>Book</code> 类一点关系也没有。参与开发的人越多、项目越庞大，采用依赖倒置原则的意义就越重大。现在很流行的 TDD 开发模式就是依赖倒置原则最成功的应用。</p><p>传递依赖关系有三种方式，以上例子中使用的方法是接口传递，另外还有两种传递方式：构造方法传递和 <code>setter</code> 方法传递。</p><p>在实际编程中，我们一般需要做到如下3点：</p><ul><li>低层模块尽量要有抽象类或者接口，或者两者都有</li><li>变量的声明类型尽量是抽象类或接口</li><li>使用继承时遵循 <strong>里氏替换原则</strong></li></ul><p><strong>依赖倒置原则的核心就是要我们面向接口编程，理解了面向接口编程，也就理解了依赖倒置。</strong></p><h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><p><strong>引言：</strong></p><p>​    很多人会觉得接口隔离原则和之前的单一职责原则很相似，其实不然。其一，单一职责原则注重的是职责；而接口隔离注重对接口依赖的隔离。其二，单一职责主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离主要约束接口，主要针对抽象，针对程序整体框架的构建。</p><p><strong>定义：</strong></p><p>​    建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽可能少。</p><p>​    我们要每个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p><h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><p><strong>引言：</strong></p><p>​    自从我们接触编程开始，就知道了软件编程总的原则：低耦合，高内聚。无论是面向过程编程还是面向对象编程，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。</p><p>​    迪米特法则的初衷是降低类之间的耦合，由于每个类都减少了不必要的依赖，因此的确可以降低耦合关系。但凡事有有度，虽然可以避免与非直接的类通信，但是要通信，必然会通过一个『 中介 』，过分的使用迪米特法则，会产生大量的中介和传递类，导致系统复杂度变大。</p><p><strong>定义：</strong></p><p>​    一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类来说，无论逻辑多么复杂，都尽量地的将逻辑封装在类的内部，对外提供 <code>public</code> 方法，不对外泄露任何信息。</p><h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p><strong>引言：</strong></p><p>​    在软件的生命周期内，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给旧代码引入错误，也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试。</p><p>​    开闭原则是面向对象设计中最基础的设计原则，它指导我们如何建立稳定灵活的系统。用抽象构建框架，用实现扩展细节。因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节，我们从抽象派生的实现类来进行扩展，当软件需要发生变化时，我们只需要根据需求重新派生一个实现类来进行扩展。<strong>当然前提是我们的抽象要合理，要对需求的变更有前瞻性和预见性才行。</strong></p><p><strong>定义：</strong></p><p>​    一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    开闭原则无非就是表达了这样一层意思：<strong>用抽象构建框架，用实现扩展细节</strong>。</p><p>​    因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。</p><p>​    而软件中易变的细节，我们用从抽象派生的实现类来进行扩展，当软件需要变化时。我们只需要根据需求重新派生一个实现类扩展就可以了。</p><p>​    当然前提是我们的抽象要合理，<strong>要对需求的变更有前瞻性和预见性才行</strong>。</p><p>​    回想前面说的几项原则，恰恰是告诉我们用抽象构建框架，用实现扩展细节的注意事项而已：单一职责原则告诉我们类要职责单一；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合；而开闭原则是总纲，他告诉我们要对扩展开放，对修改关闭。</p><blockquote><p>关键词 ： 抽象 - 接口 - 面向接口编程 - 封闭 - 不允许修改； 修改 - 接口派生的实现类 - 扩展 - 根据需求随时可可变；</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式的六大原则&quot;&gt;&lt;a href=&quot;#设计模式的六大原则&quot; class=&quot;headerlink&quot; title=&quot;设计模式的六大原则&quot;&gt;&lt;/a&gt;设计模式的六大原则&lt;/h2&gt;&lt;h4 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>你是怎么变自律？</title>
    <link href="https://double-c.github.io/2018/12/10/good/"/>
    <id>https://double-c.github.io/2018/12/10/good/</id>
    <published>2018-12-10T07:18:34.000Z</published>
    <updated>2019-05-13T06:21:49.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="你是怎么变自律？"><a href="#你是怎么变自律？" class="headerlink" title="你是怎么变自律？"></a>你是怎么变自律？</h2><ul><li>转载自知乎：    <a href="https://www.zhihu.com/question/284206141/answer/490039014" target="_blank" rel="noopener">https://www.zhihu.com/question/284206141/answer/490039014</a></li><li>作者：高冷冷</li></ul><h3 id="核心习惯"><a href="#核心习惯" class="headerlink" title="核心习惯"></a>核心习惯</h3><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>这样的场景是不是相当熟悉？</p><ul><li>晚上熬夜</li><li>早上赖床</li><li>拖延成性</li><li>玩手机停不下来</li><li>拖延导致焦虑，于是破罐子破摔，干脆不做事</li><li>一气之下干脆大开吃戒，吃一堆垃圾食品</li></ul><p>一般人是这么想：<strong>你必须把每一个坏习惯都纠正过来</strong>，才能实现改变，做到自律。</p><p>可这个思路真的对吗？</p><p>虽然没错可单是想想一下子就要改掉这么多坏习惯，就感觉要被掏空。</p><p><strong>算了吧，我不改了！</strong></p><p>我烂泥好好摊在地上，不需要你们任何人来扶我。</p><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><p>现在好消息来了，你只需要改掉一个习惯，作为整体的全部的生活 / 学习 / 工作，就会按照既定轨迹规律运转。</p><p>曾经的我一滩烂泥，直到看到了《习惯的力量》中提出的 『 核心习惯 』 这一理念。</p><p><strong>某些或者某个习惯，一旦将其改变，就自发地引起连锁反应，进而重塑生活 / 学习。</strong></p><p>核心习惯能启动一个进程，久而久之将改变一切。</p><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>对我来说，导致我拖延的、焦虑、情绪化进食、破罐子破摔的，其实只有早起后没写文章这一件事。</p><p>只要我把写文章这件事固定在早上，我就可以从早到晚都是一个自律的人。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>『 成功并不需要做对每一件事 』</p><p>当你找准了自己的核心习惯 — 你是因为没养成哪个习惯，才导致生活的一切都失控的，并着力于此。</p><p>养成例行公事之后，自然会驱动和塑造其他行为模式。</p><p>日常生活中， <strong>我们很多不自律的行为，基本上都是由于身体处于糟糕的状态。</strong></p><p>以及精神焦虑导致的：拖延、压抑、压力大、情绪化进食等等。</p><p>运动会让人变得开心。一旦启动这一齿轮，其他的自然会正常运转。</p><p>你只需要<strong>改变对你影响最大的那个坏习惯，或者说，培养你最重要的那个好习惯。</strong>比如：早起、运动等。</p><p>找到你的『 核心习惯 』，然后你就会变成一个自律的人。</p><h3 id="自我管理"><a href="#自我管理" class="headerlink" title="自我管理"></a>自我管理</h3><h4 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h4><p><strong>『 我就是不想做啊 』其实是生活常态。</strong></p><p>一旦这种状态出现，打鸡血、分析利弊、用目标激励、自我谩骂，都无济于事。</p><p>这里偷懒拖延的是『 本我 』，也就是我们的原始人性，喜欢按照『 唯乐原则 』行事。</p><p>不停批判和审判的是『 超我 』，也就是一个理想化的自己，是从压抑本能进化而来。</p><blockquote><p>『 本我 』和 『 超我 』是弗洛伊德在《自我与本我》中提出的概念。</p></blockquote><p>不妨试试转换角色，让『 超我 』扮演自己的『 引领者 』和『 管理者 』。</p><h4 id="区分真正的我"><a href="#区分真正的我" class="headerlink" title="区分真正的我"></a>区分真正的我</h4><p>李笑来在《把时间当作朋友》这本书中，这样说：</p><blockquote><p>作为一个人，这一生中可能遇到最惊人的经历</p><p>莫过于发现一个这样的神奇现象：我们竟然可以用我们的大脑控制我们的大脑。</p></blockquote><p>太绕了。我来翻译一下：</p><p>李笑来认为，大多数时候『 我们都是无意识地被自己的大脑控制 』</p><p>也就是被那些负面情绪、唯乐原则所指使，拖拖拉拉不愿做事。</p><p>我们应该意识到，『 大脑  』并不是我自己，而是属于『 我 』的</p><p>『 我 』是『 我的大脑 』的主人。</p><p>李笑来这一观点，本质是指出：作为人，我们要意识到，自己在理性上具有主导地位。</p><p><strong>有意识地让『 超我 』去扮演『 引领者 』和『 管理者 』的角色，才是真正地主宰自己的生活。</strong></p><h4 id="执行力"><a href="#执行力" class="headerlink" title="执行力"></a>执行力</h4><p>但是我想说，意识到自己是自己的管理者，远远不够。</p><p>如果只知道自己有决策权和命令权，我们依然可以消极怠工。</p><p>下面的才是重点。</p><p>认真体会这几句话：</p><p><strong>一个人就像一支队伍，对着自己的头脑和心灵招兵买马</strong>，不气馁，有召唤，爱自由 — 《送你一颗子弹》刘瑜</p><p>那么『 我 』就是我自己的老板，一切都是我说了算。</p><p>但是同时『 我 』也是员工，我应该学会服从，而不是想做就做，想不做就不做。</p><p>在需要自我管理时，我们只知道自己有绝对的权利，却没有意识到，自己有服从的义务。</p><p>试着接受这个思维：<strong>你是自己的管理者，也是自己的被管理者。</strong>这是一体两面的事情。</p><p>当你把这一意识内化：</p><p><strong>我是我自己的老板，会让你有一种权利感和掌控感，我可以对自己的大事小事做出决定。</strong></p><p><strong>我是我自己的员工，我必须服从，而不是想做就做，不想做就不做。</strong></p><p>能够在很大程度上，减少你内心积极小人和偷懒小人的斗争。</p><p>挣脱拖延偷懒、不想做事的状态，增强执行力，变得自律。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>你只需要找自己的『 核心习惯 』，<strong>一旦将其改变，就会自发地引起连锁反应</strong>，进而重塑生活 / 学习方式，成为一个自律的人。</li><li>在自我管理方面，<strong>一个人像一支队伍，你有掌握和调整的权利，也有绝对服从和执行的义务，而且你没有讨价还价的权利，一点都没有。</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;你是怎么变自律？&quot;&gt;&lt;a href=&quot;#你是怎么变自律？&quot; class=&quot;headerlink&quot; title=&quot;你是怎么变自律？&quot;&gt;&lt;/a&gt;你是怎么变自律？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;转载自知乎：    &lt;a href=&quot;https://www.zhihu.com
      
    
    </summary>
    
      <category term="更好的自己" scheme="https://double-c.github.io/categories/%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    
    
      <category term="自律" scheme="https://double-c.github.io/tags/%E8%87%AA%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>ApiDoc接口文档工具</title>
    <link href="https://double-c.github.io/2018/11/26/api-doc/"/>
    <id>https://double-c.github.io/2018/11/26/api-doc/</id>
    <published>2018-11-26T01:33:03.000Z</published>
    <updated>2018-11-26T01:53:58.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ApiDoc"><a href="#ApiDoc" class="headerlink" title="ApiDoc"></a>ApiDoc</h2><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://fxm5547.com/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/2017/11/08/apiDoc-define-standard/" target="_blank" rel="noopener">apiDoc定义规范</a></li><li><a href="http://apidocjs.com/index.html" target="_blank" rel="noopener">apiDoc官方文档</a></li></ul><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>ApiDoc 用来比较规范的管理 API 文档。</p><p>ApiDoc 这个 API 文档管理器，可以根据你代码的注释来进行自动生成 API 文档。</p><blockquote><p>同时支持 C#、Java、JavaScript、PHP、Python等语言。</p></blockquote><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><p><a href="#安装">安装</a></p></li><li><p><a href="#目录结构">目录结构</a></p></li><li><p><a href="#常用命令">常用命令</a></p></li><li><p><a href="#配置">配置</a></p><ul><li><a href="#配置项说明">配置项说明</a></li></ul></li><li><a href="#基本使用">基本使用</a><ul><li><a href="#安装">安装</a></li><li><a href="#定义错误响应">定义错误响应</a></li><li><a href="#定义接口分组和权限">定义接口分组和权限</a></li><li><a href="#定义页首">定义页首</a></li><li><a href="#接口文档编写">接口文档编写</a></li></ul></li><li><a href="#公共部分定义">公共部分定义</a><ul><li><a href="#权限">权限</a></li></ul></li><li><a href="#常用参数">常用参数</a><ul><li><a href="#@api">@api</a></li><li><a href="#@apiDefine">@apiDefine</a></li><li><a href="#@apiDdprecated">@apiDeprecated</a></li><li><a href="#@apiDescription">@apiDescription</a></li><li><a href="#@apiError">@apiError</a></li><li><a href="#@apiErrorExample">@apiErrorExample</a></li><li><a href="#@apiExample">@apiExample</a></li><li><a href="#@apiGroup">@apiGroup</a></li><li><a href="#@apiHeader">@apiHeader</a></li><li><a href="#apiHeaderExample">@apiHeaderExample</a></li><li><a href="#@apiIgnore">@apiIgnore</a></li><li><a href="#@apiName">@apiName</a></li><li><a href="#@apiParam">@apiParam</a></li><li><a href="#@apiParamExample">@apiParamExample</a></li><li><a href="#@apiPermission">@apiPermission</a></li><li><a href="#@apiPrivate">@apiPrivate</a></li><li><a href="#@apiSuccess">@apiSuccess</a></li><li><a href="#@apiSuccessExample">@apiSuccessExample</a></li><li><a href="@apiUse">@apiUse</a></li><li><a href="#@apiVersion">@apiVersion</a></li></ul></li></ul><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">project  项目目录</span><br><span class="line">├─src                           源代码目录</span><br><span class="line">│  ├─commom.php                 定义权限，状态码，错误响应等</span><br><span class="line">│  ├─define.php                 定义接口分组</span><br><span class="line">│  ├─header.md                  页首内容</span><br><span class="line">│  ├─footer.md                  页尾内容</span><br><span class="line">│  ├─history.php                历史版本，只存放小版本更新</span><br><span class="line">│  ├─v1                  版本目录</span><br><span class="line">│  │  ├─ ......                详细的接口文件</span><br><span class="line">├─output                        编译后存放目录</span><br><span class="line">│  ├─......                </span><br><span class="line">│  ├─index.html                 编译后的静态首页</span><br><span class="line">├─apidoc.json                   配置文件</span><br></pre></td></tr></table></figure><blockquote><p>示例的所有目录文件都需要自己去创建</p><p>结构仅供参考， ApiDoc 并不强制要求。</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><code>apidoc -xxx</code></p><ul><li><strong>-i</strong>：指定源代码目录</li><li><strong>-o</strong>：指定输出目录</li><li><p><strong>-t</strong>：指定模板输出文件</p></li><li><p><strong>-f</strong>：解析的文件</p><ul><li><code>apidoc -f &quot;.*\\.js$&quot;</code>  ：只解析 .js 文件</li></ul></li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>ApiDoc 配置是基于项目根目录的 <code>apidoc.json</code> 中设置的</p><p><code>apidoc.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"example"</span>,</span><br><span class="line">    <span class="attr">"version"</span>:<span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="attr">"description"</span>:<span class="string">"apiDoc basic example"</span>,</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"Custom apiDoc browser title"</span>,</span><br><span class="line">    <span class="attr">"url"</span>:<span class="string">"https://api.my-project.com/v1"</span>,</span><br><span class="line">    <span class="attr">"sampleUrl"</span>:<span class="string">"https://api.my-develop.com/v1"</span>,</span><br><span class="line">    <span class="attr">"header"</span>:&#123;</span><br><span class="line">        <span class="attr">"title"</span>:<span class="string">"项目概要"</span>,</span><br><span class="line">        <span class="attr">"filename"</span>:<span class="string">"header.md"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"order"</span>:[</span><br><span class="line">        <span class="string">"userGroup"</span>,</span><br><span class="line">        <span class="string">"orderGroup"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h5><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>项目名称</td></tr><tr><td>version</td><td>项目版本</td></tr><tr><td>description</td><td>项目描述</td></tr><tr><td>title</td><td>浏览器上的 title 名称</td></tr><tr><td>url</td><td>接口地址</td></tr><tr><td>sampleUrl</td><td>接口测试地址</td></tr><tr><td>header.title</td><td>左侧导航标签头部内容的标题</td></tr><tr><td>header.filename</td><td>相对于源代码目录的头部文件路径，文件内容使用markdow语法</td></tr><tr><td>footer.title</td><td>左侧导航标签底部内容的标题</td></tr><tr><td>footer.filename</td><td>相对于源代码目录的底部文件路径，文件内容使用markdow语法</td></tr><tr><td>order</td><td>用于对文档里面的接口分组，接口等进行排序</td></tr></tbody></table><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install apidoc -g</span><br></pre></td></tr></table></figure><h5 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir src &amp;&amp; mkdir output</span><br></pre></td></tr></table></figure><p>创建配置文件 <code>apidoc.json</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> touch apidoc.json</span><br></pre></td></tr></table></figure><p><code>apidoc.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"apidoc-study"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"apidoc 学习"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"http://apidoc.com/v1"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"apiDoc 示例"</span>,</span><br><span class="line">  <span class="attr">"header"</span>: &#123;</span><br><span class="line">    <span class="attr">"filename"</span>: <span class="string">"header.md"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"项目概要"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义错误响应"><a href="#定义错误响应" class="headerlink" title="定义错误响应"></a>定义错误响应</h5><p>创建文件 <code>common.php</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> touch common.php</span><br></pre></td></tr></table></figure><p><code>common.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*错误响应（apiError、apiErrorExample）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@apiDefine</span> CommonError</span></span><br><span class="line"><span class="comment">*   </span></span><br><span class="line"><span class="comment">*   <span class="doctag">@apiError</span> (客户端错误) 400-BadRequest 请求信息有误，服务器不能或不会处理该请求</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@apiError</span> (服务端错误) 500-ServerError 服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@apiErrorExample</span> &#123;json&#125; BadRequest</span></span><br><span class="line"><span class="comment">*HTTP/1.1 401 BadRequest </span></span><br><span class="line"><span class="comment">*&#123;</span></span><br><span class="line"><span class="comment">*"message": "请求信息有误",</span></span><br><span class="line"><span class="comment">*"code": 400,</span></span><br><span class="line"><span class="comment">*"data":[] </span></span><br><span class="line"><span class="comment">*&#125;</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@apiErrorExample</span> &#123;json&#125; ServerError</span></span><br><span class="line"><span class="comment">*HTTP/1.1 500 Internal Server Error </span></span><br><span class="line"><span class="comment">*&#123;</span></span><br><span class="line"><span class="comment">*"message": "系统错误，请稍后再试",</span></span><br><span class="line"><span class="comment">*"code": 500,</span></span><br><span class="line"><span class="comment">*"data":[] </span></span><br><span class="line"><span class="comment">*&#125;  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如何使用自定义的错误响应：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@apiUse</span> CommonError          // 该使用common.php 定义的错误信息返回文档块 CommonError</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>当有多个@apiErrorExample时候，页面会以tab标签形式展示，方便我们返回多种异常样例</p></blockquote><h5 id="定义接口分组和权限"><a href="#定义接口分组和权限" class="headerlink" title="定义接口分组和权限"></a>定义接口分组和权限</h5><p>创建文件 <code>define.php</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> touch define.php</span><br></pre></td></tr></table></figure><p><code>define.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* api分组（Group）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@apiDefine</span> userGroup 用户相关</span></span><br><span class="line"><span class="comment">*用户列表，信息修改等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@apiDefine</span> dataGroup 数据相关</span></span><br><span class="line"><span class="comment">*   相关数据的增删改查</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 权限（apiPermission）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@apiDefine</span> token 需要用户授权</span></span><br><span class="line"><span class="comment">*   详情查看用户授权接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@apiDefine</span> none 无需授权</span></span><br><span class="line"><span class="comment">*该接口没有权限限制 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如何使用定义的权限组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@apiGroup</span> userGroup           // 该使用define.php 定义的接口分组 userGroup</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@apiPermission</span> none  // 该使用define.php 定义的权限 none</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="定义页首"><a href="#定义页首" class="headerlink" title="定义页首"></a>定义页首</h5><p>创建文件 <code>header.md</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> touch header.md</span><br></pre></td></tr></table></figure><p><code>header.md</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">产品需求说明：&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt;戳这里直达&lt;/a&gt;  </span><br><span class="line"></span><br><span class="line">作者 ：</span><br><span class="line">  * chenchao</span><br><span class="line">  * chenchao_cn@qq.com</span><br></pre></td></tr></table></figure><h5 id="接口文档编写"><a href="#接口文档编写" class="headerlink" title="接口文档编写"></a>接口文档编写</h5><p>创建版本目录，默认为：<code>v1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir v1 &amp;&amp; touch user.php</span><br></pre></td></tr></table></figure><p><code>user.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@api</span> &#123;post&#125; /users/:id 更新用户信息</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@apiName</span> update-user</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@apiVersion</span> 1.0.0</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@apiGroup</span> userGroup</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@apiPermission</span> none</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@apiUse</span> CommonError</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> apidoc -i src/ -o output</span><br></pre></td></tr></table></figure><p>执行成功时显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"message":"Done.","level":"info"&#125;</span><br></pre></td></tr></table></figure><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><h5 id="api"><a href="#api" class="headerlink" title="@api"></a>@api</h5><p><strong>必须值</strong>，如果没有该参数，解析器将忽略该文档块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@api &#123;method&#125; path [title]</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>说明</th><th>是否必须</th></tr></thead><tbody><tr><td>method</td><td>请求方法，例：<code>GET</code> 、<code>POST</code>、<code>DELETE</code> 等等。</td><td>是</td></tr><tr><td>path</td><td>请求路径</td><td>是</td></tr><tr><td>title</td><td>简短的标题，用于左侧导航和接口标题</td><td>否</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiDefine"><a href="#apiDefine" class="headerlink" title="@apiDefine"></a>@apiDefine</h5><p>定义要嵌入 <code>@api</code> 的文档块或 <code>api function</code> 里的文档块。</p><p> <code>@apiDefine</code> 定义的在每个块里<strong>只能使用一次</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@apiDefine name [title]</span><br><span class="line">                     [description]</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>说明</th><th>是否必须</th></tr></thead><tbody><tr><td>name</td><td>块的唯一名称，如果使用相同名称可以使用不同版本 <code>@apiVersion</code> 去定义</td><td>是</td></tr><tr><td>title</td><td>一个简短的标题，仅用于命名函数，如：<code>@apiPermission</code> 或 <code>@apiParam(name)</code></td><td>否</td></tr><tr><td>description</td><td>详细说明从下一行开始，可以使用多行。仅用于命名函数 <code>@apiPermission</code></td><td>否</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @apiDefine UserNotFoundError</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @apiError UserNotFound The id of the User was not found.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @apiErrorExample Error-Response:</span></span><br><span class="line"><span class="comment"> *     HTTP/1.1 404 Not Found</span></span><br><span class="line"><span class="comment"> *     &#123;</span></span><br><span class="line"><span class="comment"> *       "error": "UserNotFound"</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;put&#125; /user/ Modify User information</span></span><br><span class="line"><span class="comment"> * @apiName PutUser</span></span><br><span class="line"><span class="comment"> * @apiGroup User</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @apiParam &#123;Number&#125; id          Users unique ID.</span></span><br><span class="line"><span class="comment"> * @apiParam &#123;String&#125; [firstname] Firstname of the User.</span></span><br><span class="line"><span class="comment"> * @apiParam &#123;String&#125; [lastname]  Lastname of the User.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @apiSuccessExample Success-Response:</span></span><br><span class="line"><span class="comment"> *     HTTP/1.1 200 OK</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @apiUse UserNotFoundError</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiDeprecated"><a href="#apiDeprecated" class="headerlink" title="@apiDeprecated"></a>@apiDeprecated</h5><p>将 API 方法标记为已弃用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@apiDeprecated [text]</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>text</td><td>多行文字</td><td>是</td></tr></tbody></table><h5 id="apiDescription"><a href="#apiDescription" class="headerlink" title="@apiDescription"></a>@apiDescription</h5><p>API 方法的详细描述</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>text</td><td>多行文字</td><td>是</td></tr></tbody></table><h5 id="apiError"><a href="#apiError" class="headerlink" title="@apiError"></a>@apiError</h5><p>错误返回参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@apiError [(group)] [&#123;type&#125;] field [description]</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>( group )</td><td>所有参数都将按此名称分组，</td><td>否</td></tr><tr><td>{ type }</td><td>返回类型，如：<code>{Boolean}</code>、<code>{Number}</code>、<code>{String}</code>、<code>{Object}</code></td><td>否</td></tr><tr><td>field</td><td>错误类型</td><td>是</td></tr><tr><td>description</td><td>错误描述</td><td>否</td></tr></tbody></table><h5 id="apiErrorExample"><a href="#apiErrorExample" class="headerlink" title="@apiErrorExample"></a>@apiErrorExample</h5><p>错误返回信息示例，以定义的代码格式输出，如 json</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@apiErrorExample [&#123;type&#125;] [title]</span><br><span class="line">                 example</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>{type}</td><td>返回格式，如 {json}</td><td>可选</td></tr><tr><td>title</td><td>描述标题</td><td>可选</td></tr><tr><td>example</td><td></td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiErrorExample &#123;json&#125; Error-Response:</span></span><br><span class="line"><span class="comment"> *     HTTP/1.1 404 Not Found</span></span><br><span class="line"><span class="comment"> *     &#123;</span></span><br><span class="line"><span class="comment"> *       "error": "UserNotFound"</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiExample"><a href="#apiExample" class="headerlink" title="@apiExample"></a>@apiExample</h5><p>API 方法的使用示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@apiExample [&#123;type&#125;] title</span><br><span class="line">            example</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>{type}</td><td>代码语言</td><td>否</td></tr><tr><td>title</td><td>标题</td><td>是</td></tr><tr><td>example</td><td>示例</td><td>是</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiExample &#123;curl&#125; Example usage:</span></span><br><span class="line"><span class="comment"> *     curl -i http://localhost/user/4711</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiGroup"><a href="#apiGroup" class="headerlink" title="@apiGroup"></a>@apiGroup</h5><p><strong>推荐经常使用。</strong></p><p>定义方法，文档块属于哪个分组。分组名称将用于主导航。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@apiGroup name</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>name</td><td>分组名称，也用于导航标题</td><td>是</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiGroup User</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiHeader"><a href="#apiHeader" class="headerlink" title="@apiHeader"></a>@apiHeader</h5><p>描述需要传给 API 的头部的参数，常用于授权。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@apiHeader [(group)] [&#123;type&#125;] [field=defaultValue] [description]</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>( group )</td><td>所属分组</td><td>否</td></tr><tr><td>{ type }</td><td>参数类型，可选：<code>Boolen</code>、<code>Number</code>、<code>String</code></td><td>否</td></tr><tr><td>field=defaultValue</td><td>字段名，可设置默认值，默认值非必须</td><td>是</td></tr><tr><td>description</td><td>描述</td><td>否</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiHeader &#123;String&#125; access-key Users unique access-key.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiHeaderExample"><a href="#apiHeaderExample" class="headerlink" title="@apiHeaderExample"></a>@apiHeaderExample</h5><p>参数请求示例。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@apiHeaderExample [&#123;type&#125;] [title]</span><br><span class="line">                   example</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>{ type }</td><td>请求格式</td><td>否</td></tr><tr><td>title</td><td>标题</td><td>否</td></tr><tr><td>example</td><td>示例</td><td>是</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiHeaderExample &#123;json&#125; Header-Example:</span></span><br><span class="line"><span class="comment"> *     &#123;</span></span><br><span class="line"><span class="comment"> *       "Accept-Encoding": "Accept-Encoding: gzip, deflate"</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apilgnore"><a href="#apilgnore" class="headerlink" title="@apilgnore"></a>@apilgnore</h5><p><strong>必须放在块的顶部。</strong></p><p><code>@apilgnore</code> 将使 ApiDoc 无法解析块。常用于过时的方法或未完成的方法里。</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>hint</td><td>描述为什么忽略这个块</td><td>否</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @apiIgnore Not finished Method</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiName"><a href="#apiName" class="headerlink" title="@apiName"></a>@apiName</h5><p><strong>推荐经常使用。</strong></p><p>定义接口名称，名称将用于导航中的子标题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@apiName name</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>名称</td><td>方法的唯一名称，相同名称的方法应该使用不同的版本区分开来</td><td>是</td></tr></tbody></table><p>示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiName GetUser</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiParam"><a href="#apiParam" class="headerlink" title="@apiParam"></a>@apiParam</h5><p>描述传递给 API 方法的参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@apiParam [(group)] [&#123;type&#125;] [field=defaultValue] [description]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiParam &#123;Number&#125; id Users unique ID.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;post&#125; /user/</span></span><br><span class="line"><span class="comment"> * @apiParam &#123;String&#125; [firstname]  Optional Firstname of the User.</span></span><br><span class="line"><span class="comment"> * @apiParam &#123;String&#125; lastname     Mandatory Lastname.</span></span><br><span class="line"><span class="comment"> * @apiParam &#123;String&#125; country="DE" Mandatory with default value "DE".</span></span><br><span class="line"><span class="comment"> * @apiParam &#123;Number&#125; [age=18]     Optional Age with default 18.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @apiParam (Login) &#123;String&#125; pass Only logged in users can post this.</span></span><br><span class="line"><span class="comment"> *                                 In generated documentation a separate</span></span><br><span class="line"><span class="comment"> *                                 "Login" Block will be generated.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiParamExample"><a href="#apiParamExample" class="headerlink" title="@apiParamExample"></a>@apiParamExample</h5><p>参数请求格式示例。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@apiParamExample [&#123;type&#125;] [title]</span><br><span class="line">                   example</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>{ type }</td><td>请求格式</td><td>否</td></tr><tr><td>title</td><td>该示例的简称</td><td>否</td></tr><tr><td>example</td><td>详细的示例</td><td>是</td></tr></tbody></table><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiParamExample &#123;json&#125; Request-Example:</span></span><br><span class="line"><span class="comment"> *     &#123;</span></span><br><span class="line"><span class="comment"> *       "id": 4711</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiPermission"><a href="#apiPermission" class="headerlink" title="@apiPermission"></a>@apiPermission</h5><p>该接口所需的权限名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@apiPermission name</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>name</td><td>权限的 <strong>唯一</strong> 名称</td><td>是</td></tr></tbody></table><h5 id="apiPrivate"><a href="#apiPrivate" class="headerlink" title="@apiPrivate"></a>@apiPrivate</h5><p>将 Api 定义为私有，以允许创建两个 API 规范文档，一个排除私有接口，一个包含私有接口。</p><p>用于排除 / 包含  私有 Api 的命令行： <code>--private false|true</code></p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiPrivate</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiSuccess"><a href="#apiSuccess" class="headerlink" title="@apiSuccess"></a>@apiSuccess</h5><p>成功请求返回参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@apiSuccess [(group)] [&#123;type&#125;] field [description]</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th style="text-align:left">名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td style="text-align:left">( group )</td><td>组</td><td>否</td></tr><tr><td style="text-align:left">{ type }</td><td>返回类型</td><td>否</td></tr><tr><td style="text-align:left">field</td><td>字段</td><td>是</td></tr><tr><td style="text-align:left">description</td><td>描述</td><td>否</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiSuccess &#123;Boolean&#125; active        Specify if the account is active.</span></span><br><span class="line"><span class="comment"> * @apiSuccess &#123;Object&#125;  profile       User profile information.</span></span><br><span class="line"><span class="comment"> * @apiSuccess &#123;Number&#125;  profile.age   Users age.</span></span><br><span class="line"><span class="comment"> * @apiSuccess &#123;String&#125;  profile.image Avatar-Image.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiSuccessExample"><a href="#apiSuccessExample" class="headerlink" title="@apiSuccessExample"></a>@apiSuccessExample</h5><p>成功返回示例。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@apiSuccessExample [&#123;type&#125;] [title]</span><br><span class="line">                   example</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>{ type }</td><td>类型</td><td>否</td></tr><tr><td>title</td><td>标题</td><td>否</td></tr><tr><td>example</td><td>示例</td><td>是</td></tr></tbody></table><h5 id="apiUse"><a href="#apiUse" class="headerlink" title="@apiUse"></a>@apiUse</h5><p>引入一个已定义的块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@apiUse name</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>name</td><td>块名称</td><td>是</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @apiDefine MySuccess</span></span><br><span class="line"><span class="comment"> * @apiSuccess &#123;string&#125; firstname The users firstname.</span></span><br><span class="line"><span class="comment"> * @apiSuccess &#123;number&#125; age The users age.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiUse MySuccess</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="apiVersion"><a href="#apiVersion" class="headerlink" title="@apiVersion"></a>@apiVersion</h5><p>设置文档块的版本，也可用于 <code>@apiDefine</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@apiVersion version</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td>version</td><td>版本号</td><td>是</td></tr></tbody></table><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @api &#123;get&#125; /user/:id</span></span><br><span class="line"><span class="comment"> * @apiVersion 1.6.2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ApiDoc&quot;&gt;&lt;a href=&quot;#ApiDoc&quot; class=&quot;headerlink&quot; title=&quot;ApiDoc&quot;&gt;&lt;/a&gt;ApiDoc&lt;/h2&gt;&lt;h4 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
      <category term="api" scheme="https://double-c.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Git 配置多用户</title>
    <link href="https://double-c.github.io/2018/11/17/git-many-accounts/"/>
    <id>https://double-c.github.io/2018/11/17/git-many-accounts/</id>
    <published>2018-11-17T06:25:51.000Z</published>
    <updated>2018-11-17T06:51:56.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-配置多用户"><a href="#Git-配置多用户" class="headerlink" title="Git 配置多用户"></a>Git 配置多用户</h2><h5 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h5><p>当有多个 git 账号时，比如：</p><ul><li>github，用于个人项目的开发</li><li>gogs，公司内部的git</li></ul><h5 id="冲突："><a href="#冲突：" class="headerlink" title="冲突："></a>冲突：</h5><p>如果多个 git 账号邮箱不同的话，就会涉及一个问题</p><p><strong>生成第二个 gitkey 的时候会覆盖第一个的 key</strong> ，导致必然有一个用不了</p><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><p>生成多个不同的公私密钥对，从 config 文件管理它们</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>假设在 <code>~/.ssh</code> 目录下已经存在了一个密钥对：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id_rsa</span><br><span class="line">id_rsa.pub</span><br></pre></td></tr></table></figure><h5 id="生成Key"><a href="#生成Key" class="headerlink" title="生成Key"></a>生成Key</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "yourmail@gmail.com"</span><br></pre></td></tr></table></figure><p>这里不要一路回车，我们需要自己<strong>手动填写保存路径</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/Gary/.ssh/id_rsa): /c/Users/Gary/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><p>上面我们用 <code>id_rsa_github</code> 文件名来区分原有密钥对，避免被覆盖</p><p>完成之后，我们看到了 <code>~/.ssh</code> 目录下多了两个文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id_rsa_github</span><br><span class="line">id_rsa_github.pub</span><br></pre></td></tr></table></figure></p><h5 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">ssh-add ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><blockquote><p>如果提示文件或目录不存在，就使用绝对地址</p></blockquote><h5 id="创建-config-文件"><a href="#创建-config-文件" class="headerlink" title="创建 config 文件"></a>创建 config 文件</h5><p>在 <code>~/.ssh</code> 目录下创建名为  <code>config</code> 的文件</p><p><code>confg</code> 中添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> gitlab</span><br><span class="line">    Host git.iboxpay.com</span><br><span class="line">    HostName git.iboxpay.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> github</span><br><span class="line">    Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><p>其中 <code>Host</code> 和 <code>HostName</code> 填写 <code>git</code> 服务器的域名。</p><p><code>IdentityFile</code> 指定私钥的路径。</p><p>如果在 Linux 系统下提示错误：<code>Bad owner or permissions on /home/gary/.ssh/config</code></p><p>证明 config 权限过大，<code>chomd</code> 命令调整：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chmod 644 ~/.ssh/config</span><br></pre></td></tr></table></figure><p>然后在github和gitlab上添加公钥即可，这里不再多说。</p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>比如测试 github：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -vT git@github.com</span><br></pre></td></tr></table></figure><blockquote><p>-v 是输出编译信息</p><p>-T 是测试</p><p>测试不成功时根据编译信息自己去解决问题</p></blockquote><h4 id="git全局用户名和邮箱"><a href="#git全局用户名和邮箱" class="headerlink" title="git全局用户名和邮箱"></a>git全局用户名和邮箱</h4><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name// 全局用户名</span><br><span class="line">git config user.email// 全局邮箱</span><br></pre></td></tr></table></figure><h5 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "username"</span><br><span class="line">git config --global user.email "email"</span><br></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure><blockquote><p>如果之前有设置全局用户名和邮箱的话，需要 unset 一下</p></blockquote><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>然后在不同的仓库下设置局部的用户名和邮箱。</p><p>比如在自己公司git下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name "yourname" </span><br><span class="line">git config user.email "youremail"</span><br></pre></td></tr></table></figure><p>在自己的github的仓库在执行刚刚的命令一遍即可。</p><p>这样就可以在不同的仓库，已不同的账号登录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-配置多用户&quot;&gt;&lt;a href=&quot;#Git-配置多用户&quot; class=&quot;headerlink&quot; title=&quot;Git 配置多用户&quot;&gt;&lt;/a&gt;Git 配置多用户&lt;/h2&gt;&lt;h5 id=&quot;场景：&quot;&gt;&lt;a href=&quot;#场景：&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="git" scheme="https://double-c.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>php反射</title>
    <link href="https://double-c.github.io/2018/10/24/php-reflection/"/>
    <id>https://double-c.github.io/2018/10/24/php-reflection/</id>
    <published>2018-10-24T09:17:42.000Z</published>
    <updated>2018-10-25T06:08:25.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP反射"><a href="#PHP反射" class="headerlink" title="PHP反射"></a>PHP反射</h2><p><strong>反射就是让你拥有剖析类、函数的能力</strong></p><p>反射并不会对你实现业务有任何影响</p><p>但是你如果想写出结构优雅的程序，想写出维护性和扩展性都很高的程序</p><p>学习反射是 <strong>必不可少</strong> 的。</p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#PHP内置了一组反射类来实现类、方法以及参数的解析">反射基础知识</a></li><li><a href="#利用反射实例化类">实例化类</a></li><li><a href="#依赖注入">依赖注入</a></li><li><a href="#调用类方法">调用类方法</a></li><li><a href="#代码示例">代码示例</a></li></ul><h4 id="PHP内置了一组反射类来实现类、方法以及参数的解析"><a href="#PHP内置了一组反射类来实现类、方法以及参数的解析" class="headerlink" title="PHP内置了一组反射类来实现类、方法以及参数的解析"></a>PHP内置了一组反射类来实现类、方法以及参数的解析</h4><p>常用的有：</p><ul><li>ReflectionClass 解析类</li><li>ReflectionProperty 类的属性的相关信息</li><li>ReflectionMethod 类方法的有关信息</li><li>ReflectionParameter 取回了函数或方法参数的相关信息</li></ul><p>这些类大多数都继承于 <code>ReflectionFunctionAbstract</code> 类，该类常用的方法有：</p><ul><li><code>getFileName()</code> ：获取文件名称</li><li><code>getName()</code> ： 获取函数名称</li><li><code>getNamespaceName()</code> ：获取命名空间</li><li><code>getNumberOfParameters()</code>：获取参数数目</li><li><code>getNumberOfRequiredParameters()</code> ： 获取必须输入的参数个数</li><li><code>getParameters()</code> ： 获取参数，返回一个 ReflectionParameter 类，参数为空时返回空数组</li><li><code>getStaticVariables()</code> ：获取静态变量</li><li><code>inNamespace()</code> ：检查是否处于命名空间</li><li><code>isUserDefined()</code> ： 检查是否是用户定义 </li></ul><blockquote><p>详情参考 ： <a href="http://php.net/manual/zh/class.reflectionfunctionabstract.php" target="_blank" rel="noopener">http://php.net/manual/zh/class.reflectionfunctionabstract.php</a></p></blockquote><h5 id="ReflectionClass"><a href="#ReflectionClass" class="headerlink" title="ReflectionClass"></a>ReflectionClass</h5><blockquote><p> 传入实例化的类或者类名都可以。</p></blockquote><p>常用方法：</p><ul><li>is 开头的函数用于判断<ul><li><code>isInstantiable()</code> ：判断是否是类的实例，也就是是否可以实例化</li></ul></li><li>get 开头的函数获取类相关信息<ul><li><code>getConstructor()</code> ： 或许构造函数相关信息，返回 ReflectionMethod 对象，没有则返回空</li><li><code>getProerty($name)</code> ： 获取某一个属性值，返回 ReflectionProperty 对象【可用has先判断是否含有该属性值】</li><li><code>getProperties()</code> ：获取属性列表，返回一组 ReflectionProperty 对象</li><li><code>getMethod($method_name)</code> ：获取某一个方法，返回 ReflectionMethod 对象</li><li><code>getMethods()</code>：获取方法列表，返回一组 ReflectionMethod 对象</li></ul></li><li>new 创建一个新的实例<ul><li><code>newInstanceArgs()</code>  ： 从给定的参数实例化一个类</li></ul></li></ul><h5 id="ReflectionParameter"><a href="#ReflectionParameter" class="headerlink" title="ReflectionParameter"></a>ReflectionParameter</h5><p>常用方法：</p><ul><li><code>isDefaultValueAvailable()</code> ：该参数是否拥有默认值</li><li><code>getDefaultValue()</code> ： 获取参数的默认值，参数没有默认值时该方法会抛出异常</li><li><code>getClass()</code> ： 获得参数类型提示</li></ul><blockquote><p>详情参考 ： <a href="http://php.net/manual/zh/class.reflectionparameter.php" target="_blank" rel="noopener">http://php.net/manual/zh/class.reflectionparameter.php</a></p></blockquote><h5 id="ReflectionMethod"><a href="#ReflectionMethod" class="headerlink" title="ReflectionMethod"></a>ReflectionMethod</h5><blockquote><p>传入类名和方法名</p></blockquote><p>常用方法：</p><ul><li><code>invoke()</code> ：传入对象和参数执行该方法</li></ul><blockquote><p>详情参考 ：<a href="http://php.net/manual/zh/class.reflectionmethod.php" target="_blank" rel="noopener">http://php.net/manual/zh/class.reflectionmethod.php</a></p></blockquote><h4 id="实例化类"><a href="#实例化类" class="headerlink" title="实例化类"></a>实例化类</h4><p>传入类名和初始化参数，使用相关的反射类实现类的实例化，包括参数依赖注入。</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> $phone;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Phone $phone, $name = <span class="string">'小明'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;phone = $phone;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">has</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name . <span class="string">'拥有'</span> . $phone-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($phoneName = <span class="string">'iphoneX'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $phoneName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$phone = <span class="keyword">new</span> Phone(<span class="string">'小米手机'</span>);</span><br><span class="line">$people = <span class="keyword">new</span> People($phone);</span><br><span class="line">$people-&gt;has();<span class="comment">// 小明拥有小米手机</span></span><br></pre></td></tr></table></figure><p>使用反射类相关知识封装方法 <code>make()</code> 用来实例化类，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$phone = <span class="keyword">new</span> Phone(<span class="string">'小米手机'</span>);</span><br><span class="line">$people = <span class="keyword">new</span> People($phone);</span><br><span class="line">$people-&gt;has();<span class="comment">// 小明拥有小米手机</span></span><br></pre></td></tr></table></figure><p>则上面实例化类的代码只需要一行代码就可以。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make(<span class="string">'People'</span>, [<span class="string">'phoneName'</span> =&gt; <span class="string">'小米手机'</span>,<span class="string">'name'</span> =&gt; <span class="string">'爱学习的小明'</span>]);</span><br></pre></td></tr></table></figure><p><strong>make()</strong> 方法代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">*   执行类实例化 </span></span><br><span class="line"><span class="comment">*   假如构造函数中有类型提示的参数会自动注入到类中</span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($class, $vars = [])</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!class_exists($class)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'类不存在'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化反射类</span></span><br><span class="line">$ref = <span class="keyword">new</span> ReflectionClass($class);    </span><br><span class="line"><span class="comment">// 判断类是否能够实例化，例如抽象类便不可实例化，不能单纯只判断类是否存在</span></span><br><span class="line"><span class="keyword">if</span> (!$ref-&gt;isInstantiable()) &#123;         </span><br><span class="line"><span class="keyword">echo</span> $class . <span class="string">'不可以实例化'</span>;</span><br><span class="line"><span class="keyword">exit</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取该类是否有构造函数，返回 ReflectionMethod 类</span></span><br><span class="line">$construct = $ref-&gt;getConstructor();</span><br><span class="line">    <span class="keyword">if</span> (is_null($construct)) &#123;</span><br><span class="line">        <span class="comment">// 如果没有构造函数直接实例化该类即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> $class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取该方法的参数，如果参数不为空则返回一个数组，数组里的元素是 ReflectionParamters 对象</span></span><br><span class="line">    <span class="comment">// 如果该方法没有参数则直接返回 null</span></span><br><span class="line">    $parmeters = $construct-&gt;getParameters();</span><br><span class="line">    <span class="comment">// injectionParameter() 方法是执行依赖注入 </span></span><br><span class="line">    <span class="comment">// 详细代码参考下文依赖注入相关</span></span><br><span class="line">    $resolveParams = is_null($parmeters) ? [] : injectionParameter($parmeters, $vars); </span><br><span class="line">    <span class="comment">// 最后用处理过的参数去实例化该类并返回</span></span><br><span class="line">    <span class="comment">// 处理过的参数已经帮我们实现 new Phone(’小米手机‘)</span></span><br><span class="line">    <span class="comment">// 并将该对象存入处理完的参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//return new $class(...$resolveParams); 两种实例化方式都可以</span></span><br><span class="line">    <span class="keyword">return</span> $ref-&gt;newInstanceArgs($resolveParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p><strong>injectionParameters()</strong> ：解析参数，拼凑所需的参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* $parmters 数组里的元素是 ReflectionParamters 对象</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">injectionParameter</span><span class="params">(array $parmeters, $vars = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$resolveParams = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($parmeters <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">    <span class="comment">// 获取参数名称，需要通过变量名定位是否有传入参数</span></span><br><span class="line">    $name = $v-&gt;getName();</span><br><span class="line">    <span class="comment">// 判断 $value 是否有传值进来，有的话直接用传进来的值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($vars[$name])) &#123;</span><br><span class="line">    $resolveParams[] = $vars[$name];</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 判断参数是否有默认值</span></span><br><span class="line">$default = $v-&gt;isDefaultValueAvailable() ? $v-&gt;getDefaultValue() : <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 有的话优先使用默认值</span></span><br><span class="line"><span class="keyword">if</span> (!is_null($default)) &#123;</span><br><span class="line">$resolveParams[] = $default;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果参数默认值为空则判断参数是否有类型提示，如果有实例化并注入参数中</span></span><br><span class="line"><span class="keyword">if</span> ($v-&gt;getClass()) &#123;</span><br><span class="line">$resolveParams[] = make($v-&gt;getClass()-&gt;getName(), $vars);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该参数不能为空，抛出异常，这里先暴力处理</span></span><br><span class="line"><span class="keyword">echo</span> $name . <span class="string">"不能为空"</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $resolveParams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注入依赖最核心方法就是通过getClass 获取参数类型提示</strong></p><p>ReflectionParamters-&gt;getClass() ：获取参数类型提示</p><p>在该参数没有默认值且有设置类型提示时</p><p>递归去调用 make() 方法将类实例化出来后注入到参数里</p></blockquote><h4 id="调用类方法"><a href="#调用类方法" class="headerlink" title="调用类方法"></a>调用类方法</h4><p><strong>action()</strong>：传入实例化的类，对应的方法名之后执行该方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">($class, $method, $vars = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!method_exists($class, $method)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'方法不存在'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$ref = <span class="keyword">new</span> ReflectionMethod($class, $method);</span><br><span class="line">$parameters = $ref-&gt;getParameters();</span><br><span class="line">$resolveParams = is_null($parameters) ? [] : injectionParameter($parameters, $vars);</span><br><span class="line"></span><br><span class="line"><span class="comment">// return $class-&gt;&#123;$method&#125;(...array_values($resolveParams));</span></span><br><span class="line"><span class="keyword">return</span> $ref-&gt;invoke($class, ...$resolveParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($bagName = <span class="string">'书包'</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;name = $bagName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pencil</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($pencilName = <span class="string">'铅笔'</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;name = $pencilName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $bag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Bag $bag, $peopleName = <span class="string">'test'</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;bag = $bag;</span><br><span class="line"><span class="keyword">$this</span>-&gt;name = $peopleName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name . <span class="string">' has a '</span> . <span class="keyword">$this</span>-&gt;bag-&gt;bag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">has</span><span class="params">(Pencil $pencil, $say = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"hello, I'm is &#123;$this-&gt;name&#125;."</span> . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I has &#123;$pencil-&gt;name&#125;."</span> . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I has &#123;$this-&gt;bag-&gt;name&#125;."</span> . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">        <span class="keyword">if</span> ($say) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name . <span class="string">"say &#123;$say&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">*   执行类实例化 </span></span><br><span class="line"><span class="comment">*   当执行类对应方法时再去执行方法的反射类 </span></span><br><span class="line"><span class="comment">*   去注入方法所依赖的类 </span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($class, $vars = [])</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!class_exists($class)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'类不存在'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化反射类</span></span><br><span class="line">$ref = <span class="keyword">new</span> ReflectionClass($class);    </span><br><span class="line"><span class="comment">// 判断类是否能够实例化</span></span><br><span class="line"><span class="keyword">if</span> (!$ref-&gt;isInstantiable()) &#123;         </span><br><span class="line"><span class="keyword">echo</span> $class . <span class="string">'不可以实例化'</span>;</span><br><span class="line"><span class="keyword">exit</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取该类是否有构造函数</span></span><br><span class="line">$construct = $ref-&gt;getConstructor();</span><br><span class="line">    <span class="keyword">if</span> (is_null($construct)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> $class;</span><br><span class="line">    &#125;</span><br><span class="line">    $parmeters = $construct-&gt;getParameters();</span><br><span class="line">    $resolveParams = is_null($parmeters) ? [] : injectionParameter($parmeters, $vars); </span><br><span class="line">    <span class="comment">// 最后用处理过的参数去实例化该类并返回，$ref之前已经传入过要实例化的类名</span></span><br><span class="line">    <span class="comment">// 因为我读的参数都由该类的反射类解析而来，所系顺序大小都一样</span></span><br><span class="line">    <span class="comment">//return new $class(...$resolveParams);</span></span><br><span class="line">    <span class="keyword">return</span> $ref-&gt;newInstanceArgs($resolveParams);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">($class, $method, $vars = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!method_exists($class, $method)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'方法不存在'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$ref = <span class="keyword">new</span> ReflectionMethod($class, $method);</span><br><span class="line">$parameters = $ref-&gt;getParameters();</span><br><span class="line">$resolveParams = is_null($parameters) ? [] : injectionParameter($parameters, $vars);</span><br><span class="line"></span><br><span class="line"><span class="comment">// return $class-&gt;&#123;$method&#125;(...array_values($resolveParams));</span></span><br><span class="line"><span class="keyword">return</span> $ref-&gt;invoke($class, ...$resolveParams);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">injectionParameter</span><span class="params">(array $parmeters, $vars = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$resolveParams = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($parmeters <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">    <span class="comment">// 获取参数名称，需要通过变量名定位是否有传入参数</span></span><br><span class="line">    $name = $v-&gt;getName();</span><br><span class="line">    <span class="comment">// 判断 $value 是否有传值进来，有的话直接用传进来的值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($vars[$name])) &#123;</span><br><span class="line">    $resolveParams[] = $vars[$name];</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 判断参数是否有默认值</span></span><br><span class="line">$default = $v-&gt;isDefaultValueAvailable() ? $v-&gt;getDefaultValue() : <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 有的话优先使用默认值</span></span><br><span class="line"><span class="keyword">if</span> (!is_null($default)) &#123;</span><br><span class="line">$resolveParams[] = $default;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果参数默认值为空则判断参数是否有类型提示，如果有实例化并注入参数中</span></span><br><span class="line"><span class="keyword">if</span> ($v-&gt;getClass()) &#123;</span><br><span class="line">$resolveParams[] = make($v-&gt;getClass()-&gt;getName(), $vars);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该参数不能为空，抛出异常，这里先暴力处理</span></span><br><span class="line"><span class="keyword">echo</span> $name . <span class="string">"不能为空"</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $resolveParams;</span><br><span class="line">&#125;          </span><br><span class="line"></span><br><span class="line">$people = make(<span class="string">'People'</span>, [</span><br><span class="line"><span class="string">'peopleName'</span> =&gt; <span class="string">'小明'</span>,</span><br><span class="line"><span class="string">'pencilName'</span> =&gt; <span class="string">'2B铅笔'</span>,</span><br><span class="line"><span class="string">'bagName'</span> =&gt; <span class="string">'自定义书包'</span>,</span><br><span class="line">]);</span><br><span class="line">action($people, <span class="string">'has'</span>);</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// hello, I'm is 小明.</span></span><br><span class="line"><span class="comment">// I has 铅笔.</span></span><br><span class="line"><span class="comment">// I has 自定义书包.</span></span><br></pre></td></tr></table></figure><blockquote><p> 总结 ：</p><p>make() ： 实例化一个类，假如构造函数有依赖的时候实例化并将实例注入到类里</p><p>injectionParameter() ：解析参数，当参数没有传值，也没有默认值，但是有类型提示的情况下。实例化该类实例并注入到参数中返回。</p><p>action()：执行类里面的一个方法，假如方法参数里依赖于其他类的话将类实例化并注入到方法的参数中。</p></blockquote><p>该示例模拟了框架常用的一个依赖注入的功能。</p><p>通过路由解析到实际执行的类和方法，然后执行该方法。</p><p>上面的示例就大概模仿了去执行路由对应的动作这个流程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP反射&quot;&gt;&lt;a href=&quot;#PHP反射&quot; class=&quot;headerlink&quot; title=&quot;PHP反射&quot;&gt;&lt;/a&gt;PHP反射&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;反射就是让你拥有剖析类、函数的能力&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;反射并不会对你实现业务有任何影响
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Mac命令行终端下使用shadowsocks翻墙</title>
    <link href="https://double-c.github.io/2018/10/17/mac-ss-cmd/"/>
    <id>https://double-c.github.io/2018/10/17/mac-ss-cmd/</id>
    <published>2018-10-17T01:18:54.000Z</published>
    <updated>2018-10-17T02:52:05.977Z</updated>
    
    <content type="html"><![CDATA[<p>经常在命令行终端下工作的码农们，SS无法正常工作。</p><p>因为在终端下不支持socks5代理，只支持http代理，这就很尴尬了。</p><p>wget、curl、git、brew等命令行工具都会变得很慢。</p><p>苹果在新系统中加入了SIP安全机制</p><p>会阻止第三方程序向系统目录内（/System，/bin，/sbin，/usr(除了/usr/local)）进行写操作，sudo也不行。</p><p>办法是先把SIP关了，等装好软件配置好后再打开SIP。或者改用其他软件。</p><p>因为懒得去把SIP关了开开了关了，找了另外一个软件privoxy。</p><p>它刚好就是安装在/usr/local内，不需要关闭SIP也可以正常使用。</p><ol><li><p><strong>privoxy 安装</strong></p><p>安装很简单，用 brew 安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install privoxy</span><br></pre></td></tr></table></figure></li><li><p><strong>privoxy 配置</strong></p><p>打开配置文件 <code>/usr/local/etc/privoxy/config</code>  ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/etc/privoxy/config</span><br></pre></td></tr></table></figure><p>加入下面两项配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen-address 0.0.0.0:8118</span><br><span class="line">forward-socks5 / localhost:1080 .</span><br></pre></td></tr></table></figure><p>第一行设置 privoxy 监听任意IP地址的8118端口。</p><p>第二行设置本地socks5代理客户端端口。</p><blockquote><p> 注意不要忘了最后有一个空格和点号。</p></blockquote></li><li><p><strong>启动 privoxy</strong></p><p>因为没有安装在系统目录内，所以启动时要打全路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config</span><br></pre></td></tr></table></figure></li><li><p><strong>查看是否启动成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -na | grep 8118</span><br></pre></td></tr></table></figure></li><li><p><strong>privoxy 使用</strong></p><p>在命令行终端输入如下命令，该终端即可翻墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy='http://localhost:8118'</span><br><span class="line">export https_proxy='http://localhost:8118'</span><br></pre></td></tr></table></figure><p>原理是将 socks5 代理转化成 http 代理给命令行终端使用。</p><p>如果不想使用了取消即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unset http_proxy</span><br><span class="line">unset https_proxy</span><br></pre></td></tr></table></figure></li></ol><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>如果关闭了终端，功能就会失效，如果需要代理一直生效，则可以把上述两行代码添加到 <code>~/.bash_profile</code> 文件最后。</p><blockquote><p>iterm2 的话编辑 <code>~/.zshrc</code> 文件即可。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">export http_proxy='http://localhost:8118'</span><br><span class="line">export https_proxy='http://localhost:8118'</span><br><span class="line">-----------------------------------------------------</span><br></pre></td></tr></table></figure><p>还可以在 <code>~/.bash_profile</code> 加入开关函数，使用起来更方便。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function proxy_off()&#123;</span><br><span class="line">    unset http_proxy</span><br><span class="line">    unset https_proxy</span><br><span class="line">    echo -e "已关闭代理"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function proxy_on() &#123;</span><br><span class="line">    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"</span><br><span class="line">    export http_proxy="http://127.0.0.1:8118"</span><br><span class="line">    export https_proxy=$http_proxy</span><br><span class="line">    echo -e "已开启代理"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经常在命令行终端下工作的码农们，SS无法正常工作。&lt;/p&gt;
&lt;p&gt;因为在终端下不支持socks5代理，只支持http代理，这就很尴尬了。&lt;/p&gt;
&lt;p&gt;wget、curl、git、brew等命令行工具都会变得很慢。&lt;/p&gt;
&lt;p&gt;苹果在新系统中加入了SIP安全机制&lt;/p&gt;

      
    
    </summary>
    
      <category term="运维笔记" scheme="https://double-c.github.io/categories/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="mac" scheme="https://double-c.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 项目开发规范</title>
    <link href="https://double-c.github.io/2018/09/25/laravel-specification/"/>
    <id>https://double-c.github.io/2018/09/25/laravel-specification/</id>
    <published>2018-09-25T00:59:28.000Z</published>
    <updated>2018-09-25T06:32:03.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Laravel-项目开发规范"><a href="#Laravel-项目开发规范" class="headerlink" title="Laravel 项目开发规范"></a>Laravel 项目开发规范</h2><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#优势">优势</a></li><li><a href="#开发哲学">开发哲学</a></li><li><a href="#设计理念">设计理念</a></li><li><a href="#开发和线上环境">开发和线上环境</a></li><li><a href="#开发专用扩展包">开发专用扩展包</a></li><li><a href="#辅助函数">辅助函数</a></li><li><a href="#路由">路由</a></li><li><a href="#数据模型">数据模型</a></li><li><a href="#控制器">控制器</a></li><li><a href="#视图">视图</a></li><li><a href="#表单验证">表单验证</a></li><li><a href="#授权策略">授权策略</a></li><li><a href="#Auth 中间件">Auth 中间件</a></li></ul><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>规范有以下优点：</p><ul><li><strong>高效编码</strong>：避免了过多的选择造成的『决策时间』浪费</li><li><strong>风格统一</strong> ： 最大程度统一了开发团队成员代码书写风格和思路，代码阅读起来如出一辙</li><li><strong>减少错误</strong> ： 减小初级工程师的犯错几率。</li></ul><h4 id="开发哲学"><a href="#开发哲学" class="headerlink" title="开发哲学"></a>开发哲学</h4><p>开发中请把其当做指明灯，来指引你做决策：</p><ul><li>DRY：「Don’t Repeat Yourself」不写<strong>重复</strong>的逻辑代码</li><li>约定俗成：优先选择框架提倡的做法，不过度配置</li><li>KISS：「Keep it Simple, Stupid」提倡简单易读的代码，不写高深、晦涩难懂的代码，<strong>不过度设计</strong></li><li>主厨精选： 让有经验的人来为你选择方案，不独创方案</li><li>官方提倡：优先选择官方推崇的方案</li></ul><h4 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h4><p>以下是一些优秀的『程序设计理念』：</p><ul><li>MVC ：Model，View，Controller，以MVC为核心，严格控制 Controller 的可读性和代码行数</li><li>Resutful：利用『资源化概念』和标准的 HTTP 动词来组织你的程序</li></ul><h4 id="开发和线上环境"><a href="#开发和线上环境" class="headerlink" title="开发和线上环境"></a>开发和线上环境</h4><p>一般情况下，一个项目 <strong>应该</strong> 有以下三个基本的项目环境：</p><ul><li>Local：开发环境</li><li>Staging：线上测试环境</li><li>Production：线上生产环境</li></ul><h4 id="开发专用扩展包"><a href="#开发专用扩展包" class="headerlink" title="开发专用扩展包"></a>开发专用扩展包</h4><p>我们都知道 Laravel 扩展包的注册会对应用造成消耗。</p><p>有一些扩展包是开发环境中专用，生产环境中并不会使用到。</p><p>为了避免无用的负载， 必须严格控制其安装和加载。</p><p>安装开发专用扩展包时 <strong>必须</strong> 使用 <code>--dev</code> 参数，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require laracasts/generators --dev</span><br></pre></td></tr></table></figure><p>开发专用的 provider <strong>绝不</strong> 在 <code>config/app.php</code> 里面注册</p><p><strong>必须</strong> 在 <code>app/Providers/AppServiceProvider.php</code> 文件中使用如以下方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;app-&gt;environment() == <span class="string">'local'</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;register(<span class="string">'Laracasts\Generators\GeneratorsServiceProvider'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><p>存放位置</p><p><strong>必须</strong> 把所有『自定义辅助函数』存放于 <code>bootstarp</code> 文件夹中。</p><p> 并在 <code>bootstrap/app.php</code> 最顶部进行加载。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/helpers.php'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>路由器要保证干净整洁， <strong>绝不</strong> 防止除路由配置以外的其他的程序逻辑。</p><p><strong>资源命名使用复数</strong>。</p><h5 id="Restful-路由"><a href="#Restful-路由" class="headerlink" title="Restful 路由"></a>Restful 路由</h5><p><strong>必须</strong> 优先使用 Restful 路由，配合资源控制器使用。</p><p>由资源控制器处理的行为：</p><table><thead><tr><th>动词</th><th>路径</th><th>行为（方法）</th><th>路由名称</th><th>注释</th></tr></thead><tbody><tr><td>GET</td><td><code>/photos</code></td><td>index</td><td>photos.index</td><td>首页</td></tr><tr><td>GET</td><td><code>/photos/create</code></td><td>create</td><td>photos.create</td><td>创建页面</td></tr><tr><td>POST</td><td><code>/photots</code></td><td>store</td><td>photos.store</td><td>数据入库</td></tr><tr><td>GET</td><td><code>/photos/{id}</code></td><td>show</td><td>photos.show</td><td>个人展示页</td></tr><tr><td>GET</td><td><code>/photos/{id}/edit</code></td><td>edit</td><td>photos.edit</td><td>个人编辑页</td></tr><tr><td>PUT / PATCH</td><td><code>/photos/{id}</code></td><td>update</td><td>photos.update</td><td>个人信息更新</td></tr><tr><td>DELETE</td><td><code>/photos/{id}</code></td><td>destory</td><td>photos.destory</td><td>个人信息删除</td></tr></tbody></table><h5 id="全局路由参数"><a href="#全局路由参数" class="headerlink" title="全局路由参数"></a>全局路由参数</h5><p>出于安全考虑， <strong>应该</strong> 使用全局路由器参数限制。</p><p><strong>必须</strong> 在 <code>RouteServiceProvider</code> 文件的 boot 方法里定义模式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义你的路由模型绑定，模式过滤器等。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  \Illuminate\Routing\Router  $router</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(Router $router)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 路由参数限制</span></span><br><span class="line">    $router-&gt;pattern(<span class="string">'id'</span>, <span class="string">'[0-9]+'</span>);</span><br><span class="line">    <span class="comment">// 模型绑定</span></span><br><span class="line">    Route::bind(<span class="string">'user_name'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> User::where(<span class="string">'name'</span>, $value)-&gt;first();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parent</span>::boot($router);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模式一旦被定义，遍会自动应用到所有使用该参数名称的路由上：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'users/&#123;id&#125;'</span>, <span class="string">'UsersController@show'</span>);</span><br><span class="line">Route::get(<span class="string">'photos/&#123;id&#125;'</span>, <span class="string">'PhotosController@show'</span>);</span><br></pre></td></tr></table></figure><p>只有 id 为数字时，才会路由到控制器方法中，否则 404 错误。</p><h5 id="获取-URL"><a href="#获取-URL" class="headerlink" title="获取 URL"></a>获取 URL</h5><p>获取 URL <strong>必须</strong> 遵循以下优先级：</p><ol><li><code>$model-&gt;link()</code></li><li><code>route</code> 方法</li><li><code>url</code> 方法</li></ol><p>在 Model 中创建 <code>link()</code> 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">link</span><span class="params">($params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $params = array_merge([<span class="keyword">$this</span>-&gt;id], $params);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> route(<span class="string">'models.show'</span>, $params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有单个模型数据链接使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$model-&gt;link();</span><br><span class="line"><span class="comment">// 或者添加参数</span></span><br><span class="line">$model-&gt;link($params = [<span class="string">'source'</span> =&gt; <span class="string">'list'</span>])</span><br></pre></td></tr></table></figure><p>『单个模型 URI』经常会发生变化，这样做将会让程序更加灵活。</p><p>除了『单个模型 URI』，其他路由 <strong>必须</strong> 使用 <code>route</code> 来获取 URL：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$url = route(<span class="string">'profile'</span>, [<span class="string">'id'</span> =&gt; <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>无法使用 <code>route</code> 的情况下， <strong>可以</strong> 使用 <code>url</code> 方法来获取 URL：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">'profile'</span>, [<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>模型命名使用 <strong>单数</strong> 。</p><h5 id="放置位置"><a href="#放置位置" class="headerlink" title="放置位置"></a>放置位置</h5><p>所有的数据模型文件，都 <strong>必须</strong> 存放在：<code>app/Models/</code> 文件夹中。</p><p>命名空间：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br></pre></td></tr></table></figure><h5 id="User-php"><a href="#User-php" class="headerlink" title="User.php"></a>User.php</h5><p>Laravel 默认安装会把 <code>User</code> 模型存放在 <code>app/User.php</code> ， <strong>必须</strong> 移动到 <code>app/Models</code> 文件夹中，并修改命名空间为 <code>App/Models</code> 。</p><p>为了不破坏原来的逻辑点，必须全局搜索 <code>App/User</code> 并替换为 <code>App/Models/User</code> 。</p><h5 id="使用基类"><a href="#使用基类" class="headerlink" title="使用基类"></a>使用基类</h5><p>所有的 <strong>Eloquent 数据模型</strong> 都 <strong>必须</strong> 继承统一的基类 <code>App/Models/Model</code> ，此基类存放位置为 <code>/app/Models/Model.php</code>，内容参考以下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span> <span class="title">as</span> <span class="title">EloquentModel</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span> <span class="keyword">extends</span> <span class="title">EloquentModel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeRecent</span><span class="params">($query)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $query-&gt;orderBy(<span class="string">'created_at'</span>, <span class="string">'desc'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h5><p>数据模型相关命名规范：</p><ul><li>数据模型类名 <code>必须</code> 为「单数」, 如：<code>App\Models\Photo</code></li><li>类文件名 <code>必须</code> 为「单数」，如：<code>app/Models/Photo.php</code></li><li>数据库表名字 <code>必须</code> 为「复数」，多个单词情况下使用「<a href="https://en.wikipedia.org/wiki/Snake_case" target="_blank" rel="noopener">Snake Case</a>」 如：<code>photos</code>, <code>my_photos</code></li><li>数据库表迁移名字 <code>必须</code> 为「复数」，如：<code>2014_08_08_234417_create_photos_table.php</code></li><li>数据填充文件名 <code>必须</code> 为「复数」，如：<code>PhotosTableSeeder.php</code></li><li>数据库字段名 <code>必须</code> 为「<a href="https://en.wikipedia.org/wiki/Snake_case" target="_blank" rel="noopener">Snake Case</a>」，如：<code>view_count</code>, <code>is_vip</code></li><li>数据库表主键 <code>必须</code> 为「id」</li><li>数据库表外键 <code>必须</code> 为「resource_id」，如：<code>user_id</code>, <code>post_id</code></li><li>数据模型变量 <code>必须</code> 为「resource_id」，如：<code>$user_id</code>, <code>$post_id</code></li></ul><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><p>控制器命名用 <strong>复数</strong>。</p><p><strong>必须</strong> 优先使用 Restful 资源控制器。</p><h5 id="保持短小精练"><a href="#保持短小精练" class="headerlink" title="保持短小精练"></a>保持短小精练</h5><p><strong>必须</strong> 保持控制器文件代码行数最小化，还有可读性。</p><ul><li><strong>不应该</strong> 为「方法」书写注释，这要求方法取名要足够合理，不需要过多注释；</li><li><strong>应该</strong> 为一些复杂的逻辑代码块书写注释，主要介绍产品逻辑 - <code>为什么要这么做。</code>；</li><li><strong>不应该</strong> 在控制器中书写「私有方法」，控制器里 <code>应该</code> 只存放「路由动作方法」；</li><li><strong>绝不</strong> 遗留「死方法」，就是没有用到的方法，控制器里的所有方法，都应该被使用到，否则应该删除；</li><li><strong>绝不</strong> 在控制器里批量注释掉代码，无用的逻辑代码就必须清除掉。</li></ul><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><h5 id="优先使用-Blade"><a href="#优先使用-Blade" class="headerlink" title="优先使用 Blade"></a>优先使用 Blade</h5><p>视图文件 <strong>必须</strong> 优先考虑使用 <code>.blade.php</code> 后缀来指定使用 <code>Blade</code> 模板引擎。</p><h5 id="保持目录清晰"><a href="#保持目录清晰" class="headerlink" title="保持目录清晰"></a>保持目录清晰</h5><ul><li>layouts - 页面布局文件 <strong>必须</strong> 放置于此目录下；</li><li>common - 存放页面通用元素；</li><li>pages - 简单的页面存放文件夹，如：about、contact 等；</li><li>resources - 对应 Restful 路由的资源路径名称，以 URI <code>photos/create</code> 为例，对应 <code>create.blade.php</code>文件，存放在文件夹 <code>photos</code> 下。</li></ul><p><strong>必须</strong> 避免在 <code>resources/views</code> 目录下直接放置视图文件。</p><h5 id="局部视图"><a href="#局部视图" class="headerlink" title="局部视图"></a>局部视图</h5><p>局部视图文件 <strong>必须</strong> 使用 <code>_</code> 前缀来命名，如：<code>photos/_upload_form.blade.php</code> 。</p><h5 id="视图命名要释义"><a href="#视图命名要释义" class="headerlink" title="视图命名要释义"></a>视图命名要释义</h5><p>为了和 Restful 路由器和资源控制器保持一致，视图命名也 <strong>必须</strong> 使用资源视图的命名方式。以 <code>photos</code> 为例：</p><ul><li><code>photos/index.blade.php</code><ul><li>内容列表视图</li><li>对应路由器 <code>/photos</code>，命名 <code>photos.index</code></li><li>控制器方法 <code>PhotosController@index</code></li></ul></li></ul><h5 id="create-and-edit-视图"><a href="#create-and-edit-视图" class="headerlink" title="create_and_edit 视图"></a><code>create_and_edit</code> 视图</h5><p>很多情况下，创建和编辑视图里的页面结构接近相似，在这种情况下，<strong>应该</strong> 使用 <code>create_and_edit</code> 视图。以 <code>photos</code> 为例：</p><ul><li><code>PhotosController@create</code> - 对应视图：<code>/photos/create_and_edit.blade.php</code></li><li><code>PhotosController@edit</code> - 对应 视图：<code>/photos/create_and_edit.blade.php</code></li></ul><h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><p><strong>必须</strong> 使用 表单请求 - FormRequest 类来处理控制器里的表单验证。</p><p><strong>绝不</strong> 使用 <code>authorize()</code> 方法来做用户授权，用户授权我们会单独使用 <code>Policy</code> 授权策略 来实现。</p><h5 id="使用基类-1"><a href="#使用基类-1" class="headerlink" title="使用基类"></a>使用基类</h5><p>所有 FormRequest 表验证类 <strong>必须</strong> 继承 <code>app/Http/Requests/Request.php</code> 基类。</p><p>基类文件如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">FormRequest</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">extends</span> <span class="title">FormRequest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Using policy for Authorization</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证类命名"><a href="#验证类命名" class="headerlink" title="验证类命名"></a>验证类命名</h5><p>命名使用 <strong>单数</strong> 。</p><p>FormRquest 表验证类 <strong>必须</strong> 遵循 <strong>资源控制器</strong> 方式进行命名，<code>photos</code> 对应 <code>app/Http/Requests/PhotoRequest.php</code></p><h5 id="类文件参考"><a href="#类文件参考" class="headerlink" title="类文件参考"></a>类文件参考</h5><p>FormRequest 表验证文件参考以下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoRequest</span> <span class="keyword">extends</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="keyword">$this</span>-&gt;method())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// CREATE</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> [</span><br><span class="line">                    <span class="comment">// CREATE ROLES</span></span><br><span class="line">                ];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// UPDATE</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PUT'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PATCH'</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> [</span><br><span class="line">                    <span class="comment">// UPDATE ROLES</span></span><br><span class="line">                ];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'GET'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'DELETE'</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> [];</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">messages</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="comment">// Validation messages</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="授权策略"><a href="#授权策略" class="headerlink" title="授权策略"></a>授权策略</h5><h5 id="使用基类-2"><a href="#使用基类-2" class="headerlink" title="使用基类"></a>使用基类</h5><p>所有 Policy 授权策略类 <strong>必须</strong> 继承 <code>app/Policies/Policy.php</code> 基类。</p><p>基类文件如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Policies</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">HandlesAuthorization</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Policy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">HandlesAuthorization</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">before</span><span class="params">($user, $ability)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($user-&gt;isAdmin()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="授权策略命名"><a href="#授权策略命名" class="headerlink" title="授权策略命名"></a>授权策略命名</h5><p>命名使用 <strong>单数</strong> 。</p><p>Policy 授权策略类 <strong>必须</strong> 遵循 <strong>资源路由</strong> 方式进行命名，<code>photos</code> 对应 <code>/app/Policies/PhotoPolicy.php</code> 。</p><h5 id="类文件参考-1"><a href="#类文件参考-1" class="headerlink" title="类文件参考"></a>类文件参考</h5><p>Policy 授权策略文件内容参考以下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Policies</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Photo</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoPolicy</span> <span class="keyword">extends</span> <span class="title">Policy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(User $user, Photo $photo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $user-&gt;isAuthorOf($photo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">(User $user, Photo $photo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $user-&gt;isAuthorOf($photo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自动判断授权策略"><a href="#自动判断授权策略" class="headerlink" title="自动判断授权策略"></a>自动判断授权策略</h5><p><strong>应该</strong> 使用 自动授权策略方法，这样控制器和授权类的方法名就统一起来了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新指定的文章。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $post = Post::findOrFail($id);</span><br><span class="line">    <span class="comment">// 会自动调用 `PostPolicy` 类中的 `update` 方法。</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;authorize($post);</span><br><span class="line">    <span class="comment">// 更新文章...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Auth-中间件"><a href="#Auth-中间件" class="headerlink" title="Auth 中间件"></a>Auth 中间件</h4><p>Auth 中间件 <strong>必须</strong> 书写在控制器 <code>__construct</code> 方法中，并且 <strong>必须</strong> 使用 <code>except</code> 黑名单进行过滤。</p><p>这样当你新增控制器方法时，默认是安全的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>, [            </span><br><span class="line">        <span class="string">'except'</span> =&gt; [<span class="string">'show'</span>, <span class="string">'index'</span>]</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Laravel-项目开发规范&quot;&gt;&lt;a href=&quot;#Laravel-项目开发规范&quot; class=&quot;headerlink&quot; title=&quot;Laravel 项目开发规范&quot;&gt;&lt;/a&gt;Laravel 项目开发规范&lt;/h2&gt;&lt;h4 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot;
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
      <category term="laravel" scheme="https://double-c.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>初次接触 Yii</title>
    <link href="https://double-c.github.io/2018/08/22/yii2-learn-note/"/>
    <id>https://double-c.github.io/2018/08/22/yii2-learn-note/</id>
    <published>2018-08-22T01:13:38.000Z</published>
    <updated>2018-10-17T07:11:36.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Yii2-0"><a href="#Yii2-0" class="headerlink" title="Yii2.0"></a>Yii2.0</h2><blockquote><p>记录下首次接触这个框架学习的点点滴滴</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>关于 <code>.env</code></li><li><code>init()</code> 代替 <code>__construct</code></li><li>控制器<ul><li><a href="#actions">actions()</a></li><li><a href="#behaviors">behaviors()</a></li></ul></li><li>路由<ul><li><a href="#定义路由">定义路由</a></li><li><a href="#生成路由">生成路由</a></li></ul></li><li>模型<ul><li><a href="#查询器">查询器</a></li><li><a href="#查看生成的sql语句">查看生成的sql语句</a></li></ul></li><li>视图<ul><li><a href="#小部件">小部件</a></li><li><a href="#分页">分页</a></li></ul></li><li>响应<ul><li><a href="#状态码">状态码</a></li><li><a href="#响应头">响应头</a></li><li><a href="#响应主体">响应主体</a></li><li><a href="#跳转">跳转</a></li></ul></li><li>异常<ul><li><a href="#自定义错误处理动作">自定义错误处理动作</a></li><li><a href="#获取异常相关信息">获取异常相关信息</a></li></ul></li><li>日志<ul><li><a href="#日志消息">日志消息</a></li><li><a href="#日志目标">日志目标</a></li><li><a href="#自定义日志格式">自定义日志格式</a></li><li><a href="#注释抛出异常会自动记录日志">注释抛出异常会自动记录日志</a></li></ul></li><li>缓存<ul><li><a href="#Redis">Redis</a></li></ul></li></ul><h4 id="关于-env"><a href="#关于-env" class="headerlink" title="关于 .env"></a>关于 <code>.env</code></h4><p>Yii默认是使用 <code>main-local.php</code> 来代表本地环境，会覆盖掉<code>main.php</code> 的配置。 </p><p>参考 <code>Tinkphp5</code> 源码，自定义函数 <code>env()</code> 让框架支持读取 <code>.env</code> 文件配置。</p><blockquote><p> 使用方法：</p><p>在项目入口文件前引用 <code>env.php</code> 文件即可。</p></blockquote><p><strong>env.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">defined(<span class="string">'ENV_PREFIX'</span>) <span class="keyword">or</span> define(<span class="string">'ENV_PREFIX'</span>, <span class="string">'PHP_'</span>); <span class="comment">// 环境变量的配置前缀</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载环境变量配置文件，根据各个项目入口文件的不同，这里需要自己定义</span></span><br><span class="line">$envFilePath = <span class="keyword">__DIR__</span> . <span class="string">'/../.env'</span>;</span><br><span class="line"><span class="comment">// 当项目中存在 .env 文件时加载</span></span><br><span class="line"><span class="keyword">if</span> (is_file($envFilePath)) &#123;</span><br><span class="line">    $env = parse_ini_file(<span class="keyword">__DIR__</span> . <span class="string">'/../.env'</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 全部转换为大写且以_分割做的命名</span></span><br><span class="line">    <span class="keyword">foreach</span> ($env <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">        $name = ENV_PREFIX . strtoupper($key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_array($val)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($val <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $item = $name . <span class="string">'_'</span> . strtoupper($k);</span><br><span class="line">                putenv(<span class="string">"$item=$v"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            putenv(<span class="string">"$name=$val"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'env'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">env</span><span class="params">($name, $default = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 支持以 . 符号分隔数组</span></span><br><span class="line">        $result = getenv(ENV_PREFIX . strtoupper(str_replace(<span class="string">'.'</span>, <span class="string">'_'</span>, $name)));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> !== $result) &#123;</span><br><span class="line">            <span class="comment">// 如果是布尔值相关的字符串转为布尔值</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'false'</span> === $result) &#123;</span><br><span class="line">                $result = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="string">'true'</span> === $result) &#123;</span><br><span class="line">                $result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $default;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="init-代替-construct"><a href="#init-代替-construct" class="headerlink" title="init() 代替 __construct"></a><code>init()</code> 代替 <code>__construct</code></h4><p><code>Yii</code> 里大部分类的构造方法都需要传参并调用父类构造方法。</p><p>为了方便实现构造方法，<code>Yii</code> 每个父类都会定义一个 <code>init()</code> 空方法，并在构造方法使用。</p><p>所以当你需要使用构造方法的时候请选择 <code>init()</code>。 </p><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><p>控制器中允许路由访问的方法都需要加上 <code>action</code> + 方法名才可以访问。例： <code>actionIndex()</code>。</p><h5 id="actions"><a href="#actions" class="headerlink" title="actions()"></a>actions()</h5><p>比如访问 <code>http://host/site/test</code> 的时候，会先在控制器的 <code>action()</code> 方法中找到对应请求的 <code>test</code> 方法</p><p>如果没有那么就会在控制器中找 <code>actionTest()</code> 方法</p><p>把公共的方法放在 <code>actions()</code> 中，这样要对调用一些公共的静态页面时就可以不用写控制器方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'error'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\web\ErrorAction'</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'captcha'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\captcha\CaptchaAction'</span>,</span><br><span class="line">            <span class="string">'fixedVerifyCode'</span> =&gt; YII_ENV_TEST ? <span class="string">'testme'</span> : <span class="keyword">null</span>,    <span class="comment">// 该值的是传入类的变量名</span></span><br><span class="line">        ],</span><br><span class="line">       <span class="comment">//返回验证</span></span><br><span class="line">        <span class="string">'tests'</span>=&gt;[</span><br><span class="line">             <span class="string">'class'</span>=&gt;<span class="string">'backend\models\TestAction'</span>,</span><br><span class="line">         ]</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors()"></a>behaviors()</h5><p>在控制器方法执行之前，使用指定的 <code>过滤器</code> 处理数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'access'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; AccessControl::className(), <span class="comment">// 使用核心过滤器Access 对执行动作进行验证</span></span><br><span class="line">            <span class="string">'only'</span> =&gt; [<span class="string">'logout'</span>], <span class="comment">// 对logout动作进行验证</span></span><br><span class="line">            <span class="string">'rules'</span> =&gt; [ <span class="comment">// 规则</span></span><br><span class="line">                [</span><br><span class="line">                    <span class="string">'actions'</span> =&gt; [<span class="string">'logout'</span>],</span><br><span class="line">                    <span class="string">'allow'</span> =&gt; <span class="keyword">true</span>, <span class="comment">// 只允许认证用户进行访问</span></span><br><span class="line">                    <span class="string">'roles'</span> =&gt; [<span class="string">'@'</span>],</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'verbs'</span> =&gt; [ <span class="comment">// 设置curd动作 所运行的请求方式</span></span><br><span class="line">            <span class="string">'class'</span> =&gt; VerbFilter::className(),</span><br><span class="line">            <span class="string">'actions'</span> =&gt; [</span><br><span class="line">                <span class="string">'logout'</span> =&gt; [<span class="string">'post'</span>], <span class="comment">// post 方法</span></span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="验证器"><a href="#验证器" class="headerlink" title="验证器"></a>验证器</h4><p>定义验证器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">forms</span>\<span class="title">common</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">forms</span>\<span class="title">BaseForm</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneVerifyCodeForm</span> <span class="keyword">extends</span> <span class="title">BaseForm</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $phone;  <span class="comment">// 定义需要验证的字段跟数据库字段名保持一致</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $captcha;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $method = <span class="string">'get'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attributeLabels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'phone'</span> =&gt; <span class="string">'手机号'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证规则</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [[<span class="string">'phone'</span>], <span class="string">'required'</span>]</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$form = <span class="keyword">new</span> PhoneVerifyCodeForm();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$form-&gt;load([<span class="string">'PhoneVerifyCodeForm'</span> =&gt; \Yii::$app-&gt;request-&gt;get();]);</span><br></pre></td></tr></table></figure><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><h5 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h5><p>对应模块的 <code>config</code> 目录下的 <code>main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">    </span><br><span class="line"><span class="string">'urlManager'</span> =&gt; [</span><br><span class="line">            <span class="string">'enablePrettyUrl'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">            <span class="string">'showScriptName'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">'rules'</span> =&gt; [</span><br><span class="line">                <span class="string">'login'</span> =&gt; <span class="string">'site/show-login-form'</span>,  <span class="comment">// http://host/login</span></span><br><span class="line">                <span class="string">'news/detail/&lt;id:\d+&gt;'</span> =&gt; <span class="string">'news/detail'</span>,    <span class="comment">// http://host/news/detail/1</span></span><br><span class="line">            ]</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><h5 id="生成路由"><a href="#生成路由" class="headerlink" title="生成路由"></a>生成路由</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入路由和参数</span></span><br><span class="line">\yii\helpers\Url::toRoute([<span class="string">"news/detail"</span>, <span class="string">'id'</span> =&gt; $v[<span class="string">'id'</span>]])</span><br></pre></td></tr></table></figure><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><h5 id="查询器"><a href="#查询器" class="headerlink" title="查询器"></a>查询器</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模型静态方法find()返回对应模型的查询器</span></span><br><span class="line">$query = Model::find();</span><br><span class="line"><span class="comment">// where()</span></span><br><span class="line">$query-&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>]); <span class="comment">// 查询id=1</span></span><br><span class="line">$query-&gt;where([<span class="string">'in'</span>, <span class="string">'id'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 查新 id IN (1,2,3)</span></span><br><span class="line">               </span><br><span class="line">\Yii::$app-&gt;db-&gt;createCommand($sql)-&gt;queryAll();    <span class="comment">// 使用原生的sql语句查询               </span></span><br><span class="line">               </span><br><span class="line">$query-&gt;asArray() <span class="comment">// 查询结果以数组返回</span></span><br><span class="line"></span><br><span class="line">$query-&gt;orderBy(<span class="string">'sort desc, push_time desc'</span>);   <span class="comment">// 排序</span></span><br><span class="line">               </span><br><span class="line">$query-&gt;all();    <span class="comment">// 返回所有结果</span></span><br></pre></td></tr></table></figure><h5 id="查看生成的sql语句"><a href="#查看生成的sql语句" class="headerlink" title="查看生成的sql语句"></a>查看生成的sql语句</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>])-&gt;createCommand()-&gt;getRawSql(); <span class="comment">// 将all()方法替换即可</span></span><br></pre></td></tr></table></figure><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><h5 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h5><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-base-controller#render(" target="_blank" rel="noopener">render()</a>-detail): 渲染一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#named-views" target="_blank" rel="noopener">视图名</a> 并使用一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#layouts" target="_blank" rel="noopener">布局</a> 返回到渲染结果。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-base-controller#renderPartial(" target="_blank" rel="noopener">renderPartial()</a>-detail): 渲染一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#named-views" target="_blank" rel="noopener">视图名</a> 并且不使用布局。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-controller#renderAjax(" target="_blank" rel="noopener">renderAjax()</a>-detail): 渲染一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#named-views" target="_blank" rel="noopener">视图名</a> 并且不使用布局， 并注入所有注册的JS/CSS脚本和文件，通常使用在响应AJAX网页请求的情况下。</li></ul><h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><p>当控制器调用 <code>render()</code>  渲染视图时，默认会使用 <code>@app/views/layouts/main.php</code> 作为布局文件。</p><p>例如：下面代码使用 <code>post.php</code> 作为布局文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $layout = <span class="string">'post'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="小部件"><a href="#小部件" class="headerlink" title="小部件"></a>小部件</h5><p>可以重复利用的视图都可以将其用小部件来展示</p><p> 小部件类：<code>model/widget/DemoWidget</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">widgets</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">DemoService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Widget</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $service = <span class="keyword">new</span> DemoService();</span><br><span class="line">        <span class="comment">// 获取数据并注入到data属性</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = $service-&gt;getData(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 去渲染该路径的视图文件 model/widget/views/demo.php</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'demo'</span>, [</span><br><span class="line">            <span class="string">'data'</span> =&gt; <span class="keyword">$this</span>-&gt;data</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小部件视图文件： <code>model/widget/views/demo.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;xw_wp sw&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;con_r&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;ln&quot;&gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;ti&quot;&gt;新闻排行&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class=&quot;xw&quot;&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">        $newsNum = 1;</span><br><span class="line">        if (is_array($data)) &#123; foreach ($data as $v) &#123;</span><br><span class="line">        ?&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;&lt;?= \yii\helpers\Url::toRoute([&quot;news/detail&quot;, &apos;id&apos; =&gt; $v[&apos;id&apos;]])?&gt;&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;ic dls&quot;&gt;&lt;?=$newsNum ?&gt;&lt;/span&gt;</span><br><span class="line">                &lt;span class=&quot;ti dls&quot;&gt;&lt;?=\yii\helpers\Html::encode($v[&apos;title&apos;]) ?&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">        $newsNum++;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h5><p>控制器方法 <code>app/controller</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $count = <span class="keyword">$this</span>-&gt;newsService-&gt;getNewsCount();</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    $pagination = <span class="keyword">new</span> Pagination([</span><br><span class="line">        <span class="string">'totalCount'</span> =&gt; $count,     <span class="comment">// 数据总数</span></span><br><span class="line">        <span class="string">'defaultPageSize'</span> =&gt; <span class="number">2</span>,     <span class="comment">// 每页显示的数据条数</span></span><br><span class="line">    ]);</span><br><span class="line">    $list = <span class="keyword">$this</span>-&gt;newsService-&gt;getNewsList($pagination-&gt;limit, $pagination-&gt;offset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'list'</span>, compact(<span class="string">'list'</span>, <span class="string">'pagination'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图  <code>app/views</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">......</span><br><span class="line">// 显示分页</span><br><span class="line">echo \yii\widgets\LinkPager::widget([</span><br><span class="line">    &apos;pagination&apos; =&gt; $pagination,</span><br><span class="line">    &apos;nextPageLabel&apos; =&gt; &apos;下一页&apos;,   // 设置下一页的显示文本</span><br><span class="line">    &apos;prevPageLabel&apos; =&gt; &apos;上一页&apos;,   // 设置上一页的显示文本</span><br><span class="line">    &apos;options&apos; =&gt; [  // 该项的设置的属性都会添加到分页组件的 &lt;ul&gt; 标签上</span><br><span class="line">        &apos;class&apos; =&gt; &apos;my-class-name&apos;,</span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p>响应对象包含的信息有HTTP状态码，HTTP头和主体内容等。</p><p>从本质上说，网页应用开发最终的目标就是<strong>根据不同的请求去构建这些响应对象</strong>。</p><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><p>手动设置状态码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;statusCode = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p>如果需要指定请求失败，可抛出对应的 <code>HTTP</code> 异常</p><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-badrequesthttpexception" target="_blank" rel="noopener">yii\web\BadRequestHttpException</a><ul><li>状态码：400</li><li>错误请求</li><li>服务器不理解请求的语法</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-unauthorizedhttpexception" target="_blank" rel="noopener">yii\web\UnauthorizedHttpException</a><ul><li>状态码：401</li><li>未授权</li><li>请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-forbiddenhttpexception" target="_blank" rel="noopener">yii\web\ForbiddenHttpException</a><ul><li>状态码：403</li><li>禁止</li><li>服务器拒绝请求</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-notfoundhttpexception" target="_blank" rel="noopener">yii\web\NotFoundHttpException</a><ul><li>状态码：404</li><li>未找到</li><li>服务器找不到请求的网页</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-servererrorhttpexception" target="_blank" rel="noopener">yii\web\ServerErrorHttpException</a><ul><li>状态码 : 500</li><li>服务器内部错误</li><li>服务器遇到错误，无法完成请求</li></ul></li></ul><h5 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$headers = Yii::$app-&gt;response-&gt;headers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个 Pragma 头，已存在的Pragma 头不会被覆盖。</span></span><br><span class="line">$headers-&gt;add(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个Pragma 头. 任何已存在的Pragma 头都会被丢弃</span></span><br><span class="line">$headers-&gt;set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除Pragma 头并返回删除的Pragma 头的值到数组</span></span><br><span class="line">$values = $headers-&gt;remove(<span class="string">'Pragma'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>请求头大小写敏感。</p></blockquote><h5 id="响应主体"><a href="#响应主体" class="headerlink" title="响应主体"></a>响应主体</h5><p>返回数据前先设置格式，<code>format</code> 属性指定 <code>data</code> 中数据格式化后的样式，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$response = Yii::$app-&gt;response;</span><br><span class="line">$response-&gt;format = \yii\web\Response::FORMAT_JSON;</span><br><span class="line">$response-&gt;data = [<span class="string">'message'</span> =&gt; <span class="string">'hello world'</span>];</span><br></pre></td></tr></table></figure><p><code>Yii</code> 支持五种格式：</p><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_HTML-detail" target="_blank" rel="noopener">HTML</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-htmlresponseformatter" target="_blank" rel="noopener">yii\web\HtmlResponseFormatter</a> 来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_XML-detail" target="_blank" rel="noopener">XML</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-xmlresponseformatter" target="_blank" rel="noopener">yii\web\XmlResponseFormatter</a>来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_JSON-detail" target="_blank" rel="noopener">JSON</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-jsonresponseformatter" target="_blank" rel="noopener">yii\web\JsonResponseFormatter</a>来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_JSONP-detail" target="_blank" rel="noopener">JSONP</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-jsonresponseformatter" target="_blank" rel="noopener">yii\web\JsonResponseFormatter</a>来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_RAW-detail" target="_blank" rel="noopener">RAW</a>: use this format if you want to send the response directly without applying any formatting.</li></ul><h5 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h5><p>控制器中直接使用 <code>redirect()</code> 方法进行重定向</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionDemo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redirect(<span class="string">'http://example.com/new'</span>, <span class="number">301</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>redirect()</code> 方法默认为302，该状态码会告诉浏览器请求的资源临时放到了另一个URL地址上。</p><p>可传递 301 状态码告诉浏览器请求的资源已经永久重定向到新的URL地址。</p></blockquote><p>如果请求为 <code>Ajax</code> 请求的时候，发一个 <code>Localtion</code> 头不会使浏览器自动跳转。</p><p>可设置一个 <code>X-Redirect</code> 头，让客户端用 <code>js</code> 获取并实现跳转。</p><p>非控制器中使用如下代码完成跳转</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Yii::$app-&gt;response-&gt;redirect(<span class="string">'/'</span>, <span class="number">301</span>)-&gt;send();</span><br></pre></td></tr></table></figure><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p><code>Yii</code> 内置了一个 <code>ErrorHandler</code> 用来处理错误。</p><blockquote><p>ErrorHandler 默认启用，可以在应用入口脚本定义 <code>YII_ENABLE_ERROR_HANDLER</code> 来禁用</p></blockquote><h5 id="自定义错误处理动作"><a href="#自定义错误处理动作" class="headerlink" title="自定义错误处理动作"></a>自定义错误处理动作</h5><p>应用配置文件 <code>main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'errorHandler'</span> =&gt; [</span><br><span class="line">            <span class="string">'errorAction'</span> =&gt; <span class="string">'site/error'</span>,  <span class="comment">// 指定错误处理动作，使用控制器来处理错误</span></span><br><span class="line">        ],</span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>如果异常不是继承于 <code>UserException</code> ，且 <code>debug</code> 为 <code>true</code>时。</p><p>例： <code>ErrorException</code> 是不会走配置的方法而是直接使用默认的视图显示错误。</p><p>所以上线时必须关闭 <code>debug</code> 才能让所有异常错误走自定义的错误动作。</p><p>方便记录日志。  </p></blockquote><p>错误处理器 <code>yii\base\ErrorHandler</code>  中注释掉105行的 <code>$this-&gt;logException($exception)</code></p><p>错误处理器默认会把每次异常记录为 <code>error</code> 级别的日志。</p><h5 id="获取异常相关信息"><a href="#获取异常相关信息" class="headerlink" title="获取异常相关信息"></a>获取异常相关信息</h5><p>错误处理动作中获取异常相关信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;exception = \Yii::$app-&gt;errorHandler-&gt;exception;   <span class="comment">// 获取抛出的异常类</span></span><br><span class="line">$code = <span class="keyword">$this</span>-&gt;exception-&gt;statusCode    <span class="comment">// 获取异常状态码是属性statusCode,而不是getCode()</span></span><br><span class="line">$message = <span class="keyword">$this</span>-&gt;exception-&gt;getMessage();      <span class="comment">// 获取异常信息</span></span><br><span class="line">$trace = <span class="keyword">$this</span>-&gt;exception-&gt;getTrace();      <span class="comment">// 获取异常堆栈信息</span></span><br></pre></td></tr></table></figure><p>可通过判断异常类是否继承于 <code>UserException</code> 决定是否记录日志</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!$exception <span class="keyword">instanceof</span> UserException) &#123;</span><br><span class="line">    <span class="comment">// write error log</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果异常继承于 <code>UserException</code> 会被认为是用户产生的错误，开发人员不需要去修正。</p><p>如果是 <code>UserException</code> 只需要返回友好的提示信息给用户即可。</p></blockquote><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p><code>Yii</code> 提供了一个日志框架，记录<strong>各种类型</strong>的消息，过滤它们，并将它们收集到不同目标，例：文件，数据库。</p><blockquote><p><code>log</code> 组件必须在 <code>bootstrapping</code>  期间就被加载，以便它能够及时调度日志信息到目标里。</p></blockquote><h5 id="日志消息"><a href="#日志消息" class="headerlink" title="日志消息"></a>日志消息</h5><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#trace(" target="_blank" rel="noopener">Yii::trace()</a>-detail)：记录一条消息去跟踪一段代码是怎样运行的。这主要在开发的时候使用。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#info(" target="_blank" rel="noopener">Yii::info()</a>-detail)：记录一条消息来传达一些有用的信息。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#warning(" target="_blank" rel="noopener">Yii::warning()</a>-detail)：记录一个警告消息用来指示一些已经发生的意外。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#error(" target="_blank" rel="noopener">Yii::error()</a>-detail)：记录一个致命的错误，这个错误应该尽快被检查。</li></ul><p>这些方法可填两个参数</p><p> <code>message</code> 代表要被记录的日志信息</p><p> <code>category</code> 代表要被记录的日志类别</p><blockquote><p>日志消息可以是字符串，也可以是复杂的数据，诸如数组或者对象。</p><p>可用魔术常量 <strong> METHOD </strong> 等当作日志类别区分日志 </p></blockquote><h5 id="日志目标"><a href="#日志目标" class="headerlink" title="日志目标"></a>日志目标</h5><p>一个日志目标是一个 <code>yii\log\Target</code> 类或者它的子类的实例。</p><p>它通过严重级别和类别过滤日志信息，然后将它们导入一些媒介中。</p><p><code>config\main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'bootstrap'</span> =&gt; [<span class="string">'log'</span>],</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'log'</span> =&gt; [</span><br><span class="line">            <span class="comment">// 开启两个文件的日志目标</span></span><br><span class="line">            <span class="string">'targets'</span> =&gt; [  </span><br><span class="line">                [</span><br><span class="line">                    <span class="comment">// 该目标记录一些自定义的的错误日志信息，例如一些数据查询之类的日志</span></span><br><span class="line">                    <span class="comment">// logVars 定义只记录请求的get post 和 cookie</span></span><br><span class="line">                    <span class="comment">// logFile 定义日志的路径 model/runtime/logs/app.log</span></span><br><span class="line">                    <span class="comment">// 该日志目标只记录 app 分类下的日志</span></span><br><span class="line">                    <span class="string">'class'</span> =&gt; <span class="string">'yii\log\FileTarget'</span>,</span><br><span class="line">                    <span class="string">'categories'</span> =&gt; [<span class="string">'app'</span>,],</span><br><span class="line">                    <span class="string">'logFile'</span> =&gt; <span class="string">'@runtime/logs/app.log'</span>,</span><br><span class="line">                    <span class="string">'logVars'</span> =&gt; [<span class="string">'_GET'</span>,<span class="string">'_POST'</span>,<span class="string">'_COOKIE'</span>]</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    <span class="comment">// 该日志目标记录下应用所有未知的bug</span></span><br><span class="line">                    <span class="string">'class'</span> =&gt; <span class="string">'yii\log\FileTarget'</span>,</span><br><span class="line">                    <span class="string">'levels'</span> =&gt; [<span class="string">'error'</span>, <span class="string">'warning'</span>],</span><br><span class="line">                    <span class="string">'logFile'</span> =&gt; <span class="string">'@runtime/logs/bug.log'</span>,</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h5 id="自定义日志格式"><a href="#自定义日志格式" class="headerlink" title="自定义日志格式"></a>自定义日志格式</h5><p>重写 <code>yii\log\FileTarget</code> 中的 <code>getContextMessage()</code> 和 <code>getMessagePrefix()</code>。</p><p><code>app\exceptions\FileLogHandler.php</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">exceptions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">log</span>\<span class="title">FileTarget</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLogHandler</span> <span class="keyword">extends</span> <span class="title">FileTarget</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 该方法定义日志格式，定义为json格式 请求参数为一行 请求报文相关为另一行json</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getContextMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $json = [];</span><br><span class="line">        $server = [];</span><br><span class="line">        $result = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;logVars <span class="keyword">as</span> $name) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>($GLOBALS[$name])) &#123;</span><br><span class="line">                $key = strtolower(substr($name, <span class="number">1</span>));</span><br><span class="line">                <span class="comment">// $_SERVER 只记录关键字段</span></span><br><span class="line">                <span class="keyword">if</span> ($key == <span class="string">'server'</span>) &#123;</span><br><span class="line">                    $server[<span class="string">'SERVER_PROTOCOL'</span>] = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'SERVER_PROTOCOL'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'SERVER_PROTOCOL'</span>];</span><br><span class="line">                    $server[<span class="string">'REDIRECT_STATUS'</span>] = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'REDIRECT_STATUS'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'REDIRECT_STATUS'</span>];</span><br><span class="line">                    $server[<span class="string">'REQUEST_METHOD'</span>]  = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'REQUEST_METHOD'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'REQUEST_METHOD'</span>];</span><br><span class="line">                    $server[<span class="string">'REQUEST_URI'</span>]     = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'REQUEST_URI'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'REQUEST_URI'</span>];</span><br><span class="line">                    $server[<span class="string">'HTTP_ACCEPT'</span>]     = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'HTTP_ACCEPT'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'HTTP_ACCEPT'</span>];</span><br><span class="line">                    $server[<span class="string">'HTTP_USER_AGENT'</span>] = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'HTTP_USER_AGENT'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $json[$key] = $GLOBALS[$name];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($json)) &#123;</span><br><span class="line">            $result .= json_encode($json, JSON_UNESCAPED_UNICODE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($server)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">                $result .= PHP_EOL;</span><br><span class="line">            &#125;</span><br><span class="line">            $result .= json_encode($server, JSON_UNESCAPED_UNICODE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除日志前缀的sessionId,只记录用户id和访问ip</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessagePrefix</span><span class="params">($message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;prefix !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func(<span class="keyword">$this</span>-&gt;prefix, $message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Yii::$app === <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $request = Yii::$app-&gt;getRequest();</span><br><span class="line">        $ip = $request <span class="keyword">instanceof</span> Request ? $request-&gt;getUserIP() : <span class="string">'-'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* <span class="doctag">@var</span> $user \yii\web\User */</span></span><br><span class="line">        $user = Yii::$app-&gt;has(<span class="string">'user'</span>, <span class="keyword">true</span>) ? Yii::$app-&gt;get(<span class="string">'user'</span>) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ($user &amp;&amp; ($identity = $user-&gt;getIdentity(<span class="keyword">false</span>))) &#123;</span><br><span class="line">            $userID = $identity-&gt;getId();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $userID = <span class="string">'-'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[$ip][$userID]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 <code>config\main.php</code>  中的 <code>class</code> 需要设置为自定义的日志类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line"><span class="string">'components'</span> =&gt; [</span><br><span class="line">    <span class="string">'log'</span> =&gt; [</span><br><span class="line">        <span class="string">'targets'</span> =&gt; [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'class'</span> =&gt; <span class="string">'app\exceptions\FileLogHandler'</span>,</span><br><span class="line">                <span class="string">'levels'</span> =&gt; [<span class="string">'error'</span>, <span class="string">'warning'</span>],</span><br><span class="line">                <span class="string">'logFile'</span> =&gt; <span class="string">'@runtime/logs/bug.log'</span>,</span><br><span class="line">            ],  </span><br><span class="line">        ],</span><br><span class="line">    ],    </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="注释抛出异常会自动记录日志"><a href="#注释抛出异常会自动记录日志" class="headerlink" title="注释抛出异常会自动记录日志"></a>注释抛出异常会自动记录日志</h5><p><code>yii\base\ErrorHandler</code> 中的 <code>handleException()</code></p><p>注释掉 <code>$this-&gt;logException($exception)</code>  </p><p>否则每次抛出异常的时候 <code>Yii</code> 都会自动记录一个 error 级别的日志</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">........</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleException</span><span class="params">($exception)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($exception <span class="keyword">instanceof</span> ExitException) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;exception = $exception;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;unregister();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PHP_SAPI !== <span class="string">'cli'</span>) &#123;</span><br><span class="line">            http_response_code(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            $this-&gt;logException($exception);      // 自定义异常的日志处理，避免日志过于混乱</span></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><p><code>composer</code> 安装</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> --prefer-dist yiisoft/yii2-redis</span><br></pre></td></tr></table></figure><p>添加配置文件 <code>main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">    <span class="string">'redis'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\redis\Connection'</span>,</span><br><span class="line">            <span class="string">'hostname'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">            <span class="string">'port'</span> =&gt; <span class="number">6379</span>,</span><br><span class="line">            <span class="string">'database'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$redis = Yii::$app-&gt;redis;</span><br><span class="line">$redis-&gt;set(<span class="string">'test'</span>, <span class="number">123</span>);</span><br><span class="line">$redis-&gt;expire(<span class="string">'test'</span>, <span class="number">60</span>);     <span class="comment">// 设置缓存过期的秒数</span></span><br><span class="line">$redis-&gt;get(<span class="string">'test'</span>);            <span class="comment">// 123</span></span><br><span class="line">$redis-&gt;del(<span class="string">'test'</span>);            <span class="comment">// 删除该键</span></span><br></pre></td></tr></table></figure><h4 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p><code>main.php</code> 配置文件下在 <code>components</code> 下添加 <code>user</code> 组件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="string">'components'</span> =&gt; [</span><br><span class="line">    <span class="string">'user'</span> =&gt; [</span><br><span class="line">        <span class="string">'identityClass'</span> =&gt; <span class="string">'common\models\User'</span>,</span><br><span class="line">        <span class="string">'enableAutoLogin'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'identityCookie'</span> =&gt; [<span class="string">'name'</span> =&gt; <span class="string">'_identity-frontend'</span>, <span class="string">'httpOnly'</span> =&gt; <span class="keyword">true</span>],  </span><br><span class="line">    ]       </span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。</p></blockquote><h5 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h5><p><code>common\models\User</code> 对应的用户表模型</p><blockquote><p> 使用 <code>cookie</code> 登录的话表中必须有字段 <code>auth_key</code> 。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">common</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">IdentityInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span> <span class="keyword">implements</span> <span class="title">IdentityInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#123;%users&#125;&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给到的ID查询身份。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|integer $id 被查询的ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IdentityInterface|null 通过ID匹配到的身份对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">findIdentity</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::findOne($id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 token 查询身份。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $token 被查询的 token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IdentityInterface|null 通过 token 得到的身份对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">findIdentityByAccessToken</span><span class="params">($token, $type = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::findOne([<span class="string">'access_token'</span> =&gt; $token]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int|string 当前用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string 当前用户的（cookie）认证密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;auth_key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $authKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean if auth key is valid for current user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateAuthKey</span><span class="params">($authKey)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getAuthKey() === $authKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 每次注册用户的时候为用户生成一个对应的key </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeSave</span><span class="params">($insert)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">parent</span>::beforeSave($insert)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isNewRecord) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;auth_key = \Yii::$app-&gt;security-&gt;generateRandomString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入验证完毕的登陆模型即可登陆，第二个参数设置登陆cookie有效期(秒)</span></span><br><span class="line">\Yii::$app-&gt;user-&gt;login($user, <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line"><span class="comment">// 获取用户id，未登录返回空</span></span><br><span class="line">\Yii::$app-&gt;user-&gt;getId();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Yii2-0&quot;&gt;&lt;a href=&quot;#Yii2-0&quot; class=&quot;headerlink&quot; title=&quot;Yii2.0&quot;&gt;&lt;/a&gt;Yii2.0&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;记录下首次接触这个框架学习的点点滴滴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
      <category term="yii2.0" scheme="https://double-c.github.io/tags/yii2-0/"/>
    
  </entry>
  
  <entry>
    <title>PHP 标准规范</title>
    <link href="https://double-c.github.io/2018/08/16/php-psr/"/>
    <id>https://double-c.github.io/2018/08/16/php-psr/</id>
    <published>2018-08-16T04:08:01.000Z</published>
    <updated>2018-10-17T07:11:24.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><p>参考：<a href="https://psr.phphub.org/" target="_blank" rel="noopener">https://psr.phphub.org/</a></p><p>说明：PSR 是由PHP FIG组织制定的PHP规范，是PHP开发的实践标准</p><p><strong>PHP代码文件必须是不带BOM的UTF-8</strong></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#命名规范">命名规范</a></li><li><a href="#命名空间和类">命名空间和类</a> </li><li><a href="#基本编码准则">基本编码准则</a> </li><li><a href="#方法">方法</a> </li><li><a href="#函数调用">函数调用</a></li><li><a href="#if、elseif和else">if、elseif和else</a></li><li><a href="#switch和case">switch和case</a></li><li><a href="#while和do　while">while和do　while</a></li><li><a href="#for">for</a></li><li><a href="#foreach">foreach</a></li><li><a href="#try　catch">try　catch</a></li><li><a href="#闭包">闭包</a></li><li><a href="#参数和变量可分成多行">参数和变量可分成多行</a> </li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><table><thead><tr><th>类型</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>类</td><td>StudlyCaps</td><td>类的命名 <strong>必须</strong> 遵循大写开头的驼峰命名</td></tr><tr><td>函数</td><td>camelCase</td><td>方法名称 <strong>必须</strong> 符合的小写开头驼峰命名</td></tr><tr><td>类方法</td><td>camelCase</td><td>方法名称 <strong>必须</strong> 符合的小写开头驼峰命名</td></tr><tr><td>变量</td><td>underScore</td><td>变量名可以遵循小写开头驼峰命名</td></tr><tr><td>类的属性</td><td>underScore</td><td>类的属性可以遵循小写开头驼峰命名</td></tr><tr><td>常量</td><td>DATE_APPROVED</td><td>常量中所有字母都 <strong>必须</strong> 大写，词间以下划线分隔</td></tr><tr><td>所有关键字</td><td>static</td><td>全部 <strong>必须</strong> 小写</td></tr><tr><td>个别常量</td><td>true, null,false</td><td>全部 <strong>必须</strong> 小写</td></tr></tbody></table><blockquote><p>命名尽量有意义，实在不行可以使用翻译软件<br>尽量避免没有意义的命名。</p></blockquote><h3 id="命名空间和类"><a href="#命名空间和类" class="headerlink" title="命名空间和类"></a>命名空间和类</h3><ol><li>完整的类名 <strong>必须</strong> 要有一个顶级命名空间，被称为 “vendor namespace”；</li><li>完整的类名 <strong>可以</strong> 有一个或多个子命名空间；</li><li>完整的类名 <strong>必须</strong> 有一个最终的类名；</li><li>完整的类名 <strong>可以</strong> 由任意大小写字母组成；</li><li>所有类名都 <strong>必须</strong> 是大小写敏感的。</li></ol><ul><li>类和方法开始花括号 <code>{</code> 必须写在函数声明后自成一行，结束花括号 <code>}</code> 也必须写在函数主体后自成一行</li><li>类的属性和方法 <strong>必须</strong> 添加访问修饰符（private、protected 以及 public）</li><li><code>abstract</code> 以及 <code>final</code> 必须声明在访问修饰符之前，而 <code>static</code> 必须声明在访问修饰符后</li><li>关键词 extends 和 implements <strong>必须</strong> 写在类名称的同一行。</li><li>控制结构的关键字后必须要有一个空格符，而调用方法或函数时则一定不可有。</li><li>控制结构的开始左括号后和结束右括号前，都一定不可有空格符。</li><li>namespace 声明后 <strong>必须</strong> 插入一个空白行。</li><li>所有 use <strong>必须</strong> 在 namespace 后声明。</li><li>每条 use 声明语句 <strong>必须</strong> 只有一个 use 关键词。</li><li>use 声明语句块后 <strong>必须</strong> 要有一个空白行。</li></ul><p>例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FooInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span> <span class="keyword">implements</span> <span class="title">FooInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $foo = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleFunction</span><span class="params">($a, $b = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($a === $b) &#123;</span><br><span class="line">            bar();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($a &gt; $b) &#123;</span><br><span class="line">            $foo-&gt;bar($arg1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BazClass::bar($arg2, $arg3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="基本编码准则"><a href="#基本编码准则" class="headerlink" title="基本编码准则"></a>基本编码准则</h3><p>非空行后 <strong>一定不可</strong>有 多余的空格符。</p><p>每行 <strong>一定不可</strong> 存在多于一条语句。</p><p>空行可以使得阅读代码更加方便以及有助于代码的分块，一般使用 <strong>一个</strong> 空行</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法名称后 <strong>一定不可</strong> 有空格符</p><p>参数列表中，每个逗号后面 <strong>必须</strong> 要有一个空格，而逗号前面 一定不可 有空格。</p><p>有默认值的参数，<strong>必须</strong> 放到参数列表的末尾。</p><p>结构体主体 <strong>必须</strong> 要有一次缩进。</p><p>一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($arg1, &amp;$arg2, $arg3 = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>方法及函数调用时，方法名或函数名与参数左括号之间 <strong>一定不可</strong> 有空格</p><p>参数右括号前也 <strong>一定不可</strong> 有空格</p><p>每个参数前 一定不可 有空格，但其后 <strong>必须</strong> 有一个空格。</p><p>一个标准的方法调用可参照以下范例，留意其括号、逗号以及空格的位置。<br>例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">bar();</span><br><span class="line">$foo-&gt;bar($arg1);</span><br><span class="line">Foo::bar($arg2, $arg3);</span><br></pre></td></tr></table></figure><h3 id="if、elseif和else"><a href="#if、elseif和else" class="headerlink" title="if、elseif和else"></a>if、elseif和else</h3><p>应该使用关键词 <code>elseif</code> 代替所有 else if，以使得所有的控制关键字都像是单独的一个词。</p><p>标准的if结构如下代码所示，请留意「括号」、「空格」以及「花括号」的位置， 注意 else 和 elseif 都与前面的结束花括号在同一行。</p><p>例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($expr1) &#123;</span><br><span class="line">    <span class="comment">// if body</span></span><br><span class="line">&#125; <span class="keyword">elseif</span> ($expr2) &#123;</span><br><span class="line">    <span class="comment">// elseif body</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// else body;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="switch和case"><a href="#switch和case" class="headerlink" title="switch和case"></a>switch和case</h3><p><code>case语句</code> <strong>必须</strong> 相对 <code>switch</code> 进行一次缩进</p><p><code>break</code> 语句以及 <code>case</code> 内的其它语句都必须相对 <code>case</code> 进行一次缩进。</p><p>如果存在非空的 <code>case</code> 直穿语句，主体里必须有类似  //no break 的注释。</p><p>标准 的<code>switch</code> 结构如下代码所示，留意括号、空格以及花括号的位置。</p><p>例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">switch</span> ($expr) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'First case, with a break'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Second case, which falls through'</span>;</span><br><span class="line">        <span class="comment">// no break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Third case, return instead of break'</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Default case'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="while和do-while"><a href="#while和do-while" class="headerlink" title="while和do　while"></a>while和do　while</h3><p>一个规范的 <code>while</code> 语句应该如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">while</span> ($expr) &#123;</span><br><span class="line">    <span class="comment">// structure body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>标准的 <code>do while</code> 语句如下所示，同样的，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// structure body;</span></span><br><span class="line">&#125; <span class="keyword">while</span> ($expr);</span><br></pre></td></tr></table></figure></p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>标准的 <code>for</code> 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++) &#123;</span><br><span class="line">    <span class="comment">// for body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>标准的 <code>foreach</code> 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> ($iterable <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="comment">// foreach body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try　catch"></a>try　catch</h3><p>标准的 <code>try catch</code> 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// try body</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FirstExceptionType $e) &#123;</span><br><span class="line">    <span class="comment">// catch body</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (OtherExceptionType $e) &#123;</span><br><span class="line">    <span class="comment">// catch body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包声明时，关键词 <code>function</code> 后以及关键词 <code>use</code> 的前后都必须要有一个空格。</p><p>开始花括号 <strong>必须</strong> 写在声明的同一行，结束花括号 <strong>必须</strong> 紧跟主体结束的下一行。</p><p>参数列表和变量列表的左括号后以及右括号前，<strong>一定不可</strong> 有空格。</p><p>参数和变量列表中，逗号前 <strong>一定不可</strong> 有空格，而逗号后 <strong>必须</strong> 要有空格</p><p>闭包中有默认值的参数 <strong>必须</strong> 放到列表的后面。</p><p>标准的闭包声明语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$closureWithArgs = <span class="function"><span class="keyword">function</span> <span class="params">($arg1, $arg2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$closureWithArgsAndVars = <span class="function"><span class="keyword">function</span> <span class="params">($arg1, $arg2)</span> <span class="title">use</span> <span class="params">($var1, $var2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="参数和变量可分成多行"><a href="#参数和变量可分成多行" class="headerlink" title="参数和变量可分成多行"></a>参数和变量可分成多行</h3><p>参数列表以及变量列表可以分成多行</p><p>这样，包括第一个在内的每个参数或变量都 必须 单独成行</p><p>而列表的右括号与闭包的开始花括号 <strong>必须</strong> 放在同一行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$longArgs_noVars = <span class="function"><span class="keyword">function</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerArgument</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$noArgs_longVars = <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longVar1,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerVar2,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerVar3</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编码规范&quot;&gt;&lt;a href=&quot;#编码规范&quot; class=&quot;headerlink&quot; title=&quot;编码规范&quot;&gt;&lt;/a&gt;编码规范&lt;/h1&gt;&lt;p&gt;参考：&lt;a href=&quot;https://psr.phphub.org/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>从零配置阿里云EMS实例</title>
    <link href="https://double-c.github.io/2018/06/14/ali-ems/"/>
    <id>https://double-c.github.io/2018/06/14/ali-ems/</id>
    <published>2018-06-14T05:05:58.000Z</published>
    <updated>2018-10-17T07:11:00.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EMS"><a href="#EMS" class="headerlink" title="EMS"></a>EMS</h2><blockquote><p>阿里云优惠活动 279 买了三年一核两G的主机玩玩。</p><p>记录从零搭建开发环境的过程。</p></blockquote><p>先执行一遍：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>每次执行 <code>sudo</code> 提示 <code>sudo: unable to resolve host</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname      // 获取主机名</span><br><span class="line">// 将上面获得的主机名写入hosts</span><br><span class="line">vim /etc/hosts</span><br><span class="line">127.0.0.1       localhost iZ2zecsdy8fl******</span><br></pre></td></tr></table></figure><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#Nginx">Ngingx</a></li><li><a href="#Redis">Redis</a></li><li>Mysql<ul><li><a href="#编译安装Mysql">编译安装Mysql</a></li><li><a href="#配置Mysql">配置Mysql</a></li><li><a href="#设置远程访问权限">设置远程访问权限</a></li></ul></li><li>php<ul><li><a href="#编译安装php">编译安装php</a></li><li><a href="#php-fpm">php-fpm</a></li></ul></li></ul><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>对版本没要求，直接简单安装即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install nginx</span><br></pre></td></tr></table></figure><p>开放80端口</p><p>进入阿里云控制台安全组添加规则</p><blockquote><p> 授权策略：允许</p></blockquote><blockquote><p>协议类型：自定义TCP   </p></blockquote><blockquote><p> 端口：80/80  </p></blockquote><blockquote><p>授权类型 地址段访问</p></blockquote><blockquote><p>授权对象：0.0.0.0/0</p></blockquote><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>同理对版本无任何要求，直接简单安装即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install reids-server</span><br></pre></td></tr></table></figure><p>当开放redis远程连接时，也要进入阿里云控制台安全组添加规则</p><blockquote><p> 授权策略：允许</p></blockquote><blockquote><p>协议类型：自定义TCP   </p></blockquote><blockquote><p> 端口：6379/6379  </p></blockquote><blockquote><p>授权类型 地址段访问</p></blockquote><blockquote><p>授权对象：0.0.0.0/0</p></blockquote><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><p>机子内存较小，不适宜安装过高版本，选择5.6版本即可。</p><h5 id="编译安装Mysql"><a href="#编译安装Mysql" class="headerlink" title="编译安装Mysql"></a>编译安装Mysql</h5><p>安装编译源码需要的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install make cmake gcc g++ bison libncurses5-dev</span><br></pre></td></tr></table></figure><p>下载并解压缩</p><ul><li>官方地址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a> </li><li>文件名：mysql-5.6.26.tar.gz </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-5.6.26.tar.gz </span><br><span class="line">cd mysql-5.6.26</span><br></pre></td></tr></table></figure><p>编译配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 -DWITHOUT_FEDERATED_STORAGE_ENGINE=1 -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=all -DENABLED_LOCAL_INFILE=1 -DWITH_READLINE=1 -DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock -DMYSQL_TCP_PORT=3306 -DMYSQL_USER=mysql -DCOMPILATION_COMMENT=”lq-edition”-DENABLE_DTRACE=1 -DOPTIMIZER_TRACE=1 -DWITH_DEBUG=1</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h5 id="配置Mysql"><a href="#配置Mysql" class="headerlink" title="配置Mysql"></a>配置Mysql</h5><ol><li>新建运行 <code>Mysql</code> 的用户和组 </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd mysql</span><br><span class="line">sudo useradd -g mysql mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>设置 <code>Mysql</code> 安装目录的权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql </span><br><span class="line">sudo chown -R mysql:mysql ./</span><br></pre></td></tr></table></figure><ol start="3"><li>建立配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp support-files/my-default.cnf /etc/my.cnf</span><br><span class="line">sudo chown mysql:mysql /etc/my.cnf</span><br></pre></td></tr></table></figure><ol start="4"><li>修改配置文件</li></ol><p>sudo vim /etc/my.cnf </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /usr/local/mysql/data/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /usr/local/mysql/data/mysql.sock</span><br><span class="line">basedir = /usr/local/mysql </span><br><span class="line">datadir = /usr/local/mysql/data</span><br></pre></td></tr></table></figure><ol start="5"><li>初始化数据库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line">sudo scripts/mysql_install_db –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data/</span><br></pre></td></tr></table></figure><ol start="6"><li><p>启动Mysql服务</p><ol><li>添加服务</li></ol><p>复制启动脚本到/etc/init.d目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/ </span><br><span class="line">cp support-files/mysql.server /etc/init.d/mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>设置权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 /etc/init.d/mysql</span><br></pre></td></tr></table></figure><blockquote><p>执行 <code>systemctl enable mysql.service</code></p><p>不然无法启动 报错  service.notfound </p></blockquote></li><li><p>配置环境变量</p></li></ol><p>为了直接调用 <code>mysql</code> 命令，需要将 <code>mysql</code> 的 <code>bin</code> 目录加入环境变量</p><p>编辑 <code>/etc/profile</code> 文件：</p><p>在文件最后两行添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:/usr/local/mysql/bin </span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>保存文件，运行下面命令，让配置立即生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ol start="8"><li>修改 <code>root</code> 密码，因为默认密码为空</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -h127.0.0.1 -u root -p </span><br><span class="line">update mysql.user set password=password(“mysqldba”) where user=’root’;</span><br></pre></td></tr></table></figure><h5 id="设置远程访问权限"><a href="#设置远程访问权限" class="headerlink" title="设置远程访问权限"></a>设置远程访问权限</h5><p>使用grant all privileges on来更改用户对应某些库的远程权限</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on 库名.表名 to &apos;用户名&apos;@&apos;IP地址&apos; identified by &apos;密码&apos; with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ul><li>库名:要远程访问的数据库名称,所有的数据库使用“*” </li><li>表名:要远程访问的数据库下的表的名称，所有的表使用“*” </li><li>用户名:要赋给远程访问权限的用户名称 </li><li>IP地址:可以远程访问的电脑的IP地址，所有的地址使用“%” </li><li>密码:要赋给远程访问权限的用户对应使用的密码</li></ul><h4 id="php"><a href="#php" class="headerlink" title="php"></a>php</h4><p>选择最新版本 7.2</p><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><p>到官方下载并解压</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/php --with-config-file-path=/etc/php --enable-fpm --enable-pcntl --enable-mysqlnd --enable-opcache --enable-sockets --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-shmop --enable-zip --enable-soap --enable-xml --enable-mbstring --disable-rpath --disable-debug --disable-fileinfo  --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-pcre-regex --with-iconv --with-zlib --with-mhash --with-xmlrpc --with-curl --with-imap-ssl  --with-openssl</span><br></pre></td></tr></table></figure><p>遇到报错 <code>configure: error: Cannot find OpenSSL&#39;s &lt;evp.h&gt;</code></p><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install build-essential libexpat1-dev libgeoip-dev libpng-dev libpcre3-dev libssl-dev libxml2-dev rcs zlib1g-dev libmcrypt-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libwebp-dev pkg-config</span><br></pre></td></tr></table></figure><h5 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h5><p>配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/php/etc</span><br><span class="line">cp php-fpm.conf.default php-fpm.conf</span><br><span class="line">vim php-fpm.conf</span><br></pre></td></tr></table></figure><p>php-fpm没有对应的service文件（既不能使用 service php-fpm start）</p><p>采用信号进行进程管理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">找到 ;pid = run/php-fpm.pid</span><br><span class="line">修改为 pid = /var/run/php-fpm/php-fpm.pid</span><br></pre></td></tr></table></figure><p>进入 /usr/local/php/etc/php-fpm.d</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp www.conf.default www.conf</span><br></pre></td></tr></table></figure><p>将 user = www-data</p><p>group = www-data</p><p>修改为nginx用户和用户组</p><p>当 <code>nginx</code> 无法解析php文件时：</p><p>假如php-fpm和nginx不在同一台服务器使用这种基于tcp连接</p><p>则对应配置文件修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen = 127.0.0.1:9000</span><br></pre></td></tr></table></figure><p>否则:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen = /var/run/php-fpm/php7.2-fpm.sock</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;EMS&quot;&gt;&lt;a href=&quot;#EMS&quot; class=&quot;headerlink&quot; title=&quot;EMS&quot;&gt;&lt;/a&gt;EMS&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;阿里云优惠活动 279 买了三年一核两G的主机玩玩。&lt;/p&gt;
&lt;p&gt;记录从零搭建开发环境的过程。&lt;/p&gt;

      
    
    </summary>
    
      <category term="运维笔记" scheme="https://double-c.github.io/categories/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://double-c.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>编写优秀的单元测试</title>
    <link href="https://double-c.github.io/2018/05/22/php-unit/"/>
    <id>https://double-c.github.io/2018/05/22/php-unit/</id>
    <published>2018-05-22T02:17:23.000Z</published>
    <updated>2018-10-17T07:11:29.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写优秀的单元测试"><a href="#编写优秀的单元测试" class="headerlink" title="编写优秀的单元测试"></a>编写优秀的单元测试</h2><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>太久没写单元测试了</p><p>等有时间再补代码用例</p><p>对知识点能有更好的补充说明。 mark</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>单元测试主要是作为一种良好的实践来编写的。</p><p>它能帮助开发人员识别并修复bug、<strong>重构代码</strong>。 </p><ul><li>理想的单元测试应当覆盖程序所有可能的路径</li><li>一个单元测试通常覆盖一个函数或方法中的一个特定路径</li><li>测试方法之间经常有隐含的依赖关系暗藏在测试的实现方案中</li></ul><p>单元测试的目标是尽可能地隔离周边环境的情况下测试每个组件。 </p><p>只有隔离了周围环境的影响，才能发现被测试的组件与周边组件间的耦合是否真正被解开。</p><p>所以单元测试也可用于检测代码是否过于耦合。</p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#测试进展">测试进展</a></li><li><a href="#常用命令">常用命令</a></li><li><a href="#常见问题">常见问题</a></li><li><a href="#基础知识">基础知识</a></li><li><a href="#测试的依赖关系">测试的依赖关系</a></li><li><a href="#数据供给器">数据供给器</a></li><li><a href="#测试异常">测试异常</a></li><li><a href="#对输出进行测试">对输出进行测试</a></li><li><a href="#基境">基境</a></li><li><a href="#组织测试">组织测试</a></li><li><a href="#数据库测试">数据库测试</a></li><li><a href="#测试替身">测试替身</a></li><li><a href="#测试实践">测试实践</a></li></ul><h4 id="测试进展"><a href="#测试进展" class="headerlink" title="测试进展"></a>测试进展</h4><p>对于每个测试时的运行，PHPUnit 命令行输出一个字符来指示进展</p><table><thead><tr><th>字符</th><th>进展</th></tr></thead><tbody><tr><td>.</td><td>测试成功时输出<code>.</code></td></tr><tr><td>F</td><td>一个断然失败时输出<code>F</code></td></tr><tr><td>E</td><td>产生一个错误时输出<code>E</code></td></tr><tr><td>R</td><td>当测试被标记为有风险时输出<code>R</code></td></tr><tr><td>S</td><td>当测试被跳过时输出<code>S</code></td></tr><tr><td>I</td><td>测试被标记为不完整或未实现时输出<code>I</code></td></tr></tbody></table><blockquote><p>失败是指违背了 <code>PHPUnit</code> 的断言<br>错误是指意料之外的异常或 <code>PHP</code> 错误<br>这种差异在某些时候是非常有用的，因为错误往往比失败更容易修复<br>如果得到一个非常长的问题列表，那么最有先对付错误</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpunit ArrayTest</span><br></pre></td></tr></table></figure><blockquote><p><code>PHPUnit</code> 命令行测试执行器在<strong>当前工作目录</strong>中寻找 <code>ArrayTest.php</code> 源文件并加载之<br>如果在此源文件中能找到 <code>ArrayTest</code> 测试用例类，此类中的测试将被执行  </p></blockquote><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>Q：当你想把一些东西写到 <code>print</code> 语句或者调试表达式中时</p><blockquote><p>A: 别这么做，将其写成一个测试来代替</p></blockquote><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ul><li>针对类 <code>Class</code> 的测试写在类 <code>ClassTest</code> 中</li><li><code>ClassTest</code>  通常继承自 <code>PHPUnit\Framework\TestCase</code></li><li>测试通常是命名为 <code>test*</code> 的公用( <code>public</code> )方法</li><li>在测试方法内，类似于 <code>assertEquals()</code> 这样的断言方法用来对实际值于预期值做出断言</li></ul><h4 id="测试的依赖关系"><a href="#测试的依赖关系" class="headerlink" title="测试的依赖关系"></a>测试的依赖关系</h4><p><code>PHPUnit</code> 支持对测试方法之间的显式依赖关系进行声明</p><p>这种依赖关系并不是定义在测试方法的执行顺序中</p><p>而是允许生产者返回一个测试基境( <code>fixture</code> ) 的示例</p><p>并将此实例传递给依赖于它的消费者</p><blockquote><p>生产者( producer ) : 是能生成被测单元并将其作为返回值的测试方法</p><p>消费者（consumer） ： 是依赖于一个或多个生产者及其返回值的测试方法</p></blockquote><p><code>@depends</code> 标注来表达依赖情况</p><p>默认情况下，生产者所产生的返回值将“原样”传递给相应的消费者。 </p><p>这意味着如果生产者返回的是一个对象，那么传递给消费者的是一个指向此对象的引用 </p><p>如果需要传递对象的副本而非引用，则应当用 @depends clone 替代 @depends </p><h4 id="数据供给器"><a href="#数据供给器" class="headerlink" title="数据供给器"></a>数据供给器</h4><p>测试方法可以接受任意参数</p><p>这些参数可以由数据供给器来提供</p><p>用 <code>@dataProvider</code> 标注来指定哪个数据供给器方法</p><p>数据供给器方法必须声明为 <code>public</code></p><p>其返回值可以是一个数组，其每个元素是一个数组的话，可以利用键值对元素进行说明</p><p>或者是一个实现了 <code>lterator</code> 接口的对象。</p><h4 id="测试异常"><a href="#测试异常" class="headerlink" title="测试异常"></a>测试异常</h4><p>方法：</p><ul><li>expectException()</li><li>expectExceptionCode() </li><li>expectExceptionMessage() </li><li>expectExceptionMessageRegExp() </li></ul><p>可以用于为被测代码所抛出的异常建立预期，也可以使用expectedException标注 </p><blockquote><p>默认情况下，PHPUnit将测试在执行中触发的PHP错误、警告、通知都转换为异常 </p><p>所以对异常进行测试是越明确越好，对于太笼统的类进行测试有可能导致不良副作用 </p></blockquote><h4 id="对输出进行测试"><a href="#对输出进行测试" class="headerlink" title="对输出进行测试"></a>对输出进行测试</h4><p>有时候想要断言某方法的运行过程是否中生成了预期的输出</p><p>断言输出的方法：<code>expectOutputString()</code></p><p>获取程序输出的方法：<code>getActualOutput()</code></p><h4 id="基境"><a href="#基境" class="headerlink" title="基境"></a>基境</h4><p>在编写试时最费时的部分之一就是<strong>编写代码来将整个场景设置成某个已知的状态</strong></p><p> 并在测试结束后将其复原到初始状态</p><p>这个已知的状态称为测试的基境( <code>fixture</code> )。</p><p>PHPUnit 支持共享建立基境的代码 </p><p>在运行某个测试方法前，会调用一个叫 <code>setUp()</code> 的模板方法 </p><p><code>setUp()</code> 是创建测试所用对象的地方 </p><p>当测试方法运行结束后，不管成功或失败都会调用 <code>tearDown()</code> 方法 </p><p><code>tearDown()</code> 是清理测试所用对象的地方 </p><h5 id="setUp-多-tearDown-少"><a href="#setUp-多-tearDown-少" class="headerlink" title="setUp() 多 tearDown() 少"></a>setUp() 多 tearDown() 少</h5><p>实际上只有在 setUp() 中分配类诸如文件或套接字之类的外部资源才需要实现 tearDown() </p><p>如果 setUp() 中只创建纯 PHP 对象，通常可以略过 tearDown() </p><h5 id="如果两个基境建立工作略有不同"><a href="#如果两个基境建立工作略有不同" class="headerlink" title="如果两个基境建立工作略有不同"></a>如果两个基境建立工作略有不同</h5><ul><li>如果两个 <code>setUp()</code> 代码仅有微小差异，把差异代码从 <code>setUp()</code> 移到测试方法内</li><li>如果两个 <code>setUp()</code> 是确实不一样，那么需要另外一个测试用例类</li></ul><h5 id="基境共享"><a href="#基境共享" class="headerlink" title="基境共享"></a>基境共享</h5><p>一个有实际意义的多测试间共享基境的例子是数据库连接 </p><p>只登陆数据库一次，然后重用此连接，而不是每个测试都建立一个新的数据库连接 </p><p>在同一个测试套件内的不同测试之间共享基境 </p><p>用 <code>setUpBeforeClass()</code> 和 <code>tearDownAfterClass()</code> 模板方法来 </p><p>分别在测试用例类的第一个测试之前和最后一个测试之后连接与断开数据库 </p><h4 id="组织测试"><a href="#组织测试" class="headerlink" title="组织测试"></a>组织测试</h4><p>我们希望能将任意数量的测试以任何组合方式运行</p><ol><li>用文件系统来编排测试套件</li></ol><p>最简单的大概就是把偶有测试用例源文件放在一个测试目录中</p><p>通过对测试目录进行递归遍历，PHPUnit 能自动发现并运行测试 </p><p>这种方法的缺点是无法控制测试的运行顺序 </p><p>这可能导致测试依赖关系方面的问题 </p><ol start="2"><li>用 XML 配置文件也可以用于编排测试套件</li></ol><p>如果phpunit.xml 或 phpunit.xml.dist 存在与当前工作目录且未使用 –configuration </p><p>将自动从此文件中读取配置，可以明确指定测试的执行顺序</p><h4 id="数据库测试"><a href="#数据库测试" class="headerlink" title="数据库测试"></a>数据库测试</h4><p>许多入门与中级的单元测试范例读暗示着这样一种信息 </p><p>很容易用简单的测试来对应用程序的逻辑进行测试 </p><p>但对于以数据库为中心的应用程序而言，这与现实想去甚远  </p><h5 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h5><p> 为什么所有单元测试的范例都不包含数据交互？ </p><p>这类测试的建立和维护都很复杂。 </p><p>对数据库进行测试时，需要考虑以下这些变数 :</p><ol><li>数据库和表</li><li>向表中插入测试所需要的行</li><li>测试运行完毕后验证数据库的状态</li><li>每个新测试都要清理数据库</li></ol><p>另外必须认识到，对于代码而言，本质上来说<strong>数据库是全局输入变量</strong></p><p>一个测试中出现的失败很容易影响到后继的测试结果，从而让整个测试过程变得非常艰难</p><p>随着数据库交互规模的增大，运行测试可能需要耗费可观的时间 </p><p>只要保持每个测试所使用的数据量较小并且尽可能用非数据库测试来对代码进行测试 </p><h5 id="数据库测试的四个阶段"><a href="#数据库测试的四个阶段" class="headerlink" title="数据库测试的四个阶段"></a>数据库测试的四个阶段</h5><ol><li>建立基境</li><li>执行被测系统</li><li>验证结果</li><li>拆除基境</li></ol><h4 id="测试替身"><a href="#测试替身" class="headerlink" title="测试替身"></a>测试替身</h4><p>有时候对被测系统进行测试是很困难的，因为它依赖于其他无法在测试环境中使用的组件 </p><p>这有可能是因为这些组件不可用，它们不会返回测试所需要的结果，或者执行它们会有不良副作用 </p><p>在其他情况下，我们的测试策略要求对被测系统的内部行为有更多控制或更多可见性 </p><p>如果在编写测试时无法使用（或选择不使用）实际的依赖组件（DOC），可以用测试替身来代替 </p><p>测试替身不需要和真正依赖最贱有完全一样的行为方式 </p><p>他只需要提供和真正的组件同样的 API 即可，这样被测系统会以为它是真正的组件 </p><h4 id="测试实践"><a href="#测试实践" class="headerlink" title="测试实践"></a>测试实践</h4><p>你总能编写更多测试。但是很快就会发现，在所有想得出来的测试中只有很小一部分是真正有用的 </p><ul><li><p>需要编写的是那些觉得能运作但却失败或觉得必将失败却成功的测试 </p></li><li><p>另一种思考的方式是从成本/收益的关系上去考量，需要编写的是能够给出反馈信息的测试 </p></li></ul><h5 id="在开发过程中"><a href="#在开发过程中" class="headerlink" title="在开发过程中"></a>在开发过程中</h5><p>当需要对软件的内部结构进行更改时，你实际上是要在不影响其可见行为的情况下让它更加容易理解、更加易于修改</p><p>测试套件对于安全地进行这些所谓的重构而言是非常宝贵的，否则，你可能在重构的过程中将系统搞坏而不自知</p><p>在使用单元测试来确认重构的转换步骤中确实保持原有行为并且没有引入错误时，以下情况有助于改进项目的编码与设计 </p><ol><li>所有单元测试均正确运行</li><li>代码传达其设计原则</li><li>代码没有冗(rong)余</li><li>代码所包含的类和方法的数量降至最低</li></ol><h5 id="在调试过程中"><a href="#在调试过程中" class="headerlink" title="在调试过程中"></a>在调试过程中</h5><p> 当看到缺陷报告时，你可能会有尽快修复错误的冲动 </p><p> 经验表明，这种冲动不是好事，<strong>因为修复一个缺陷很有可能导致另外一个缺陷</strong></p><p>下列操作可以帮你压住冲动 </p><ol><li><strong>确认能够重现此缺陷</strong></li><li>在代码中寻找此缺陷最小规模的表达。例如，如果在输出中有一个数字看起来不对，那么就寻找出算出此数字的那个对象</li><li>编写一个目前会失败而缺陷修复将会成功的自动测试</li><li>修复缺陷</li></ol><p>寻找缺陷的最小可靠重现使你有机会切真正检查缺陷的原因 </p><p>当修复了缺陷之后，所编写的测试有助于提高缺陷真正被修复的几率 </p><p>因为新加入的测试降低了未来修改代码时又破坏此修复的可能性 </p><p>而之前所编写的所有测试则降低了在不经意间导致其他问题的可能性 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编写优秀的单元测试&quot;&gt;&lt;a href=&quot;#编写优秀的单元测试&quot; class=&quot;headerlink&quot; title=&quot;编写优秀的单元测试&quot;&gt;&lt;/a&gt;编写优秀的单元测试&lt;/h2&gt;&lt;h4 id=&quot;备注&quot;&gt;&lt;a href=&quot;#备注&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php常用函数</title>
    <link href="https://double-c.github.io/2018/03/25/php-function/"/>
    <id>https://double-c.github.io/2018/03/25/php-function/</id>
    <published>2018-03-25T03:38:24.000Z</published>
    <updated>2018-10-17T07:11:20.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a>PHP函数</h2><p>整理下一些函数，方便查阅。</p><p>常用业务都是查询出对应的数据，通常都是字符串和数组</p><p>然后对其进行操作，返回业务需求所需的数据格式</p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li>字符串<ul><li><a href="#字符串转数组">字符串转数组</a></li><li><a href="#控制字符串大小写">控制字符串大小写</a></li><li><a href="#去除字符串空白符">去除字符串空白符</a></li><li><a href="#文本在指定长度后换行">文本在指定长度后换行</a></li><li><a href="#数字处理">数字处理</a></li><li><a href="#汉字处理">汉字处理</a></li><li><a href="#字符串搜索">字符串搜索</a></li></ul></li><li>数组<ul><li><a href="#键">键</a></li><li><a href="#值">值</a></li><li><a href="#操作数组">操作数组</a></li><li><a href="#统计数组">统计数组</a></li><li><a href="#使用回调函数处理数组元素">使用回调函数处理数组元素</a></li><li><a href="#排序">排序</a></li></ul></li></ul><h5 id="字符串转数组"><a href="#字符串转数组" class="headerlink" title="字符串转数组"></a>字符串转数组</h5><p><code>explode()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$str = <span class="string">"Hello world. I love Shanghai!"</span>;</span><br><span class="line">print_r(explode(<span class="string">" "</span>, $str));</span><br></pre></td></tr></table></figure><h5 id="控制字符串大小写"><a href="#控制字符串大小写" class="headerlink" title="控制字符串大小写"></a>控制字符串大小写</h5><ul><li><code>ucfirst()</code> ：字符串中的第一个单词首字母大写</li><li><code>ucwords()</code> ：字符串中的多个单词首字母大写  </li><li><code>strtolower()</code> ：修改整个字符串为小写</li><li><code>strtoupper()</code> ：修改整个字符串为大写</li></ul><h5 id="去除字符串空白符"><a href="#去除字符串空白符" class="headerlink" title="去除字符串空白符"></a>去除字符串空白符</h5><ul><li><code>ltrim()</code> ：从字符串开头删除空白符</li><li><code>rtrim()</code>： 从字符串末尾开始删除空白符</li><li><code>trim()</code> ： 会删除字符串开头和末尾的空白符。(第二个参数可以指定需要去除的字符)</li></ul><blockquote><p>空白符 :    换行、回车、空格、水平和垂直制表符、以及null…..</p></blockquote><h5 id="文本在指定长度后换行"><a href="#文本在指定长度后换行" class="headerlink" title="文本在指定长度后换行"></a>文本在指定长度后换行</h5><p><code>wordwrap()</code> ：默认会每75个字符自动换行</p><p>还提供第二个参数指定一个不同的行长度</p><p>第三个参数可以使用其他字符换行符</p><h5 id="数字处理"><a href="#数字处理" class="headerlink" title="数字处理"></a>数字处理</h5><ul><li><code>round($string, $a)</code> ：$a 代表小数点后几位，四舍五入</li><li><code>ceil()</code> ：向上取整，结果为整数</li><li><code>floor()</code> ：向下取整，结果为整数</li><li><code>range($start, $end, $length)</code> ：生成指定范围的字符串数组</li><li><code>mt_rand()</code> ：生成随机数</li><li><code>number_format()</code> ：格式化数字 千位分隔符</li></ul><h5 id="汉字处理"><a href="#汉字处理" class="headerlink" title="汉字处理"></a>汉字处理</h5><ul><li><code>mb_strlen()</code> ：计算字符串长度   一个汉字也会认为是长度为1     可以指定编码</li><li><code>mb_substr()</code> ：字符串截取     0第一个字符    -1 最后一个字符     可以指定编码</li></ul><h5 id="字符串搜索"><a href="#字符串搜索" class="headerlink" title="字符串搜索"></a>字符串搜索</h5><ul><li><code>strpos()</code> ：查找字符串在另一字符串中第一次出现的位置，大小写敏感</li><li><code>strripos()</code> ：查找字符串在另一字符串中<strong>最后一次</strong>出现的位置，大小写敏感</li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>PHP允许将任何数据类型赋至一个数组元素 </p><p>每个数组中每个键只能包含一个唯一的值 </p><p>数组处理完成后，<code>array_unique()</code> 就是<strong>删除重复元素</strong>的最佳方法</p><p>要循环遍历一个数组,并处理其中的所有或部分元素</p><p>最容易的方法是使用foreach </p><p><code>foreach()</code> 返回的变量并不是数组中原值的别名 </p><p>它们是一些副本,如果修改这些值,<strong>不会反映到数组中</strong> </p><p>如果想要在 <code>foreach()</code> 中修改值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> &amp;$v) &#123;<span class="comment">// 使用引用符，对数组的修改会反映到数组中</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量赋值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>($a, $b, $c) = $arr    <span class="comment">// 等同于  $a = $arr[0]     $b = arr[1]     $c = arr[2]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$a = <span class="string">'A'</span>;</span><br><span class="line">$b = <span class="string">'B'</span>;</span><br><span class="line">$c = <span class="string">'C'</span>;</span><br><span class="line">compact(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);   <span class="comment">// 等同于 $arr['a'] = 'A', $arr['b'] = 'B'</span></span><br></pre></td></tr></table></figure><h5 id="键"><a href="#键" class="headerlink" title="键"></a>键</h5><ul><li><code>array_keys()</code> ：返回数组中所有的键名</li><li><code>array_key_exists()</code> ：检查给定的键名或索引是否存在于数组中</li></ul><h5 id="值"><a href="#值" class="headerlink" title="值"></a>值</h5><ul><li><code>array_values()</code> ：返回数组中所有的值，适合用于数组中元素下标混乱的数组或者将关联数组转成索引数组</li><li><code>in_array()</code> ：检查数组中是否存在某个值(返回布尔值)  默认使用 <code>==</code> 判断  可以在第三个参数加上true使用   <code>===</code> </li><li><code>array_search()</code>  ： 检查数组中是否存在某个值，返回键值</li></ul><h5 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h5><ul><li><code>array_flip()</code> ： 交换数组中的键和值。返回一个反转后的数组，如果同一个值出现了多次，则最后一个键名将作为他的值</li><li><code>array_reverse()</code> ：将数组中的元素翻转， 键值不变，顺序翻转</li><li><code>array_unique()</code> ：用于删除数组中重复的值，并返回没有重复值的新数组</li><li><code>array_intersect()</code> ：计算两个数组的交集</li><li><code>array_diff()</code> ： 计算两个数组的差值</li><li><code>unset()</code> ： 删除一个或者多个不连续的元素</li><li><code>array_splice()</code> ：删除多个连续的元素 ，会自动对数组重新进行索引</li><li><code>array_slice()</code> ：数组截取，不会改变原数组</li></ul><h5 id="统计数组"><a href="#统计数组" class="headerlink" title="统计数组"></a>统计数组</h5><ul><li><code>count()</code> ：计算数组中元素的个数或对象中属性个数，对于其他值返回1，如果参数是变量没有定义返回0</li><li><code>array_count_values()</code> ： 用于统计数组中所有的值出现的次数，返回的数组键名是原来的值,返回的值是键名在原数组出现的次数</li><li><code>array_sum()</code> ： 计算数组中所有的值的和</li></ul><h5 id="使用回调函数处理数组元素"><a href="#使用回调函数处理数组元素" class="headerlink" title="使用回调函数处理数组元素"></a>使用回调函数处理数组元素</h5><ul><li><code>array_filter()</code> ：使用回调函数过滤数组中的元素</li><li><code>array_walk()</code> ：对数组中的每个元素都应用回调函数处理</li><li><code>array_map()</code> ： 对多个数组中的每个元素都应用回调函数处理，多个数组时长度应该相同,函数是平行作用的，如果长度不同，最短的数组会用空值填充</li></ul><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><ul><li><code>sort()</code> [ <code>rsort()</code> ] ：按升序(降序)对给定的数组的值排序，把数组转为索引数组</li><li><code>ksrot</code> [ <code>krsort()</code> ] ：按升序(降序)对给定的数组的键值排序</li><li><code>asort</code> [ <code>arsort()</code> ] ：按升序(降序)对给定数组的值进行排序，排序后保留索引关系</li><li><code>array_multisort($empty_arr, SORT_DESC)</code> ：二维数组排序，会改变原数组</li></ul><h5 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h5><p><code>implode()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'Hello'</span>,<span class="string">'World!'</span>,<span class="string">'I'</span>,<span class="string">'love'</span>,<span class="string">'Shanghai!'</span>);</span><br><span class="line"><span class="keyword">echo</span> implode(<span class="string">" "</span>, $arr);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP函数&quot;&gt;&lt;a href=&quot;#PHP函数&quot; class=&quot;headerlink&quot; title=&quot;PHP函数&quot;&gt;&lt;/a&gt;PHP函数&lt;/h2&gt;&lt;p&gt;整理下一些函数，方便查阅。&lt;/p&gt;
&lt;p&gt;常用业务都是查询出对应的数据，通常都是字符串和数组&lt;/p&gt;
&lt;p&gt;然后对其
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>字符编码</title>
    <link href="https://double-c.github.io/2017/12/17/code-string/"/>
    <id>https://double-c.github.io/2017/12/17/code-string/</id>
    <published>2017-12-17T03:59:50.000Z</published>
    <updated>2018-10-17T07:11:06.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>万恶的中文乱码问题归根结底都是编码问题！</p><p>记录爬坑历程。</p><h3 id="ANSI编码"><a href="#ANSI编码" class="headerlink" title="ANSI编码"></a>ANSI编码</h3><p><strong>不同的国家和地区制定了不同的标准</strong> ，由此产生了 GB2312, BIG5, JIS 等各自的编码标准。</p><p>这些使用 2 个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码。</p><p><strong>在简体中文系统下，ANSI 编码代表 GB2312 编码</strong>  【敲黑板！ T.T 】</p><p>在日文操作系统下，ANSI 编码代表 JIS 编码。</p><p>不同 ANSI 编码之间互不兼容，</p><p>当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。</p><p>当然对于ANSI编码而言，0x00~0x7F之间的字符，依旧是1个字节代表1个字符。</p><p>这一点是ASNI编码与Unicode编码之间最大也最明显的区别。</p><h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。</p><p>它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p><p>1990年开始研发，1994年正式公布。随着计算机工作能力的增强，Unicode也在面世以来的十多年里得到普及。</p><p>Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。</p><p>Unicode用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符，或者说有1114112个码位。</p><p>码位就是可以分配给字符的数字。UTF-8、UTF-16、UTF-32都是将数字转换到程序数据的编码方案。</p><h3 id="UTF-8编码"><a href="#UTF-8编码" class="headerlink" title="UTF-8编码"></a>UTF-8编码</h3><p>UTF-8是UNICODE的一种变长字符编码又称万国码，由Ken Thompson于1992年创建。</p><p>现在已经标准化为RFC 3629。UTF-8用1到6个字节编码UNICODE字符。</p><p>用在网页上可以同一页面显示中文简体繁体及其它语言(如日文，韩文)。</p><h3 id="PHP转换编码"><a href="#PHP转换编码" class="headerlink" title="PHP转换编码"></a>PHP转换编码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1：当前编码   </span></span><br><span class="line"><span class="comment">// 参数2：目标编码       //IGNORE：忽略识别不了的字符串 继续往下翻译 例如：“-”</span></span><br><span class="line"><span class="comment">// 参数三 ： 转码字符串</span></span><br><span class="line">$string = iconv( <span class="string">"UTF-8"</span>,  <span class="string">"GBK//IGNORE"</span>, $string );</span><br></pre></td></tr></table></figure><h3 id="查看字符编码"><a href="#查看字符编码" class="headerlink" title="查看字符编码"></a>查看字符编码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$encode = mb_detect_encoding( $string,  <span class="keyword">array</span>(<span class="string">'ASCII'</span>, <span class="string">'UTF-8'</span>, <span class="string">'GB2312'</span>, <span class="string">'GBK'</span>, <span class="string">'BIG5'</span>) );</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $encode;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h2&gt;&lt;p&gt;万恶的中文乱码问题归根结底都是编码问题！&lt;/p&gt;
&lt;p&gt;记录爬坑历程。&lt;/p&gt;
&lt;h3 id=&quot;ANSI编码&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="那些年踩过的坑" scheme="https://double-c.github.io/categories/%E9%82%A3%E4%BA%9B%E5%B9%B4%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
    
      <category term="人艰不拆" scheme="https://double-c.github.io/tags/%E4%BA%BA%E8%89%B0%E4%B8%8D%E6%8B%86/"/>
    
  </entry>
  
</feed>
