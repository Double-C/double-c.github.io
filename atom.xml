<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Double-c</title>
  
  <subtitle>而废不能半途</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://double-c.github.io/"/>
  <updated>2018-10-17T02:40:08.047Z</updated>
  <id>https://double-c.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac命令行终端下使用shadowsocks翻墙</title>
    <link href="https://double-c.github.io/2018/10/17/mac-ss-cmd/"/>
    <id>https://double-c.github.io/2018/10/17/mac-ss-cmd/</id>
    <published>2018-10-17T01:18:54.000Z</published>
    <updated>2018-10-17T02:40:08.047Z</updated>
    
    <content type="html"><![CDATA[<p>经常在命令行终端下工作的码农们，SS无法正常工作。</p><p>因为在终端下不支持socks5代理，只支持http代理，这就很尴尬了。</p><p>wget、curl、git、brew等命令行工具都会变得很慢。</p><p>苹果在新系统中加入了SIP安全机制</p><p>会阻止第三方程序向系统目录内（/System，/bin，/sbin，/usr(除了/usr/local)）进行写操作，sudo也不行。</p><p>办法是先把SIP关了，等装好软件配置好后再打开SIP。或者改用其他软件。</p><p>因为懒得去把SIP关了开开了关了，找了另外一个软件privoxy。</p><p>它刚好就是安装在/usr/local内，不需要关闭SIP也可以正常使用。</p><ol><li><p><strong>privoxy 安装</strong></p><p>安装很简单，用 brew 安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install privoxy</span><br></pre></td></tr></table></figure></li><li><p><strong>privoxy 配置</strong></p><p>打开配置文件 <code>/usr/local/etc/privoxy/config</code>  ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/etc/privoxy/config</span><br></pre></td></tr></table></figure><p>加入下面两项配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen-address 0.0.0.0:8118</span><br><span class="line">forward-socks5 / localhost:1080 .</span><br></pre></td></tr></table></figure><p>第一行设置 privoxy 监听任意IP地址的8118端口。</p><p>第二行设置本地socks5代理客户端端口。</p><blockquote><p> 注意不要忘了最后有一个空格和点号。</p></blockquote></li><li><p><strong>启动 privoxy</strong></p><p>因为没有安装在系统目录内，所以启动时要打全路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config</span><br></pre></td></tr></table></figure></li><li><p><strong>查看是否启动成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -na | grep 8118</span><br></pre></td></tr></table></figure></li><li><p><strong>privoxy 使用</strong></p><p>在命令行终端输入如下命令，该终端即可翻墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy='http://localhost:8118'</span><br><span class="line">export https_proxy='http://localhost:8118'</span><br></pre></td></tr></table></figure><p>原理是将 socks5 代理转化成 http 代理给命令行终端使用。</p><p>如果不想使用了取消即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unset http_proxy</span><br><span class="line">unset https_proxy</span><br></pre></td></tr></table></figure></li></ol><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>如果关闭了终端，功能就会失效，如果需要代理一直生效，则可以把上述两行代码添加到 <code>~/.bash_profile</code> 文件最后。</p><blockquote><p>iterm2 的话编辑 <code>~/.zshrc</code> 文件即可。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">export http_proxy='http://localhost:8118'</span><br><span class="line">export https_proxy='http://localhost:8118'</span><br><span class="line">-----------------------------------------------------</span><br></pre></td></tr></table></figure><p>还可以在 <code>~/.bash_profile</code> 加入开关函数，使用起来更方便。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function proxy_off()&#123;</span><br><span class="line">    unset http_proxy</span><br><span class="line">    unset https_proxy</span><br><span class="line">    echo -e "已关闭代理"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function proxy_on() &#123;</span><br><span class="line">    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"</span><br><span class="line">    export http_proxy="http://127.0.0.1:8118"</span><br><span class="line">    export https_proxy=$http_proxy</span><br><span class="line">    echo -e "已开启代理"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经常在命令行终端下工作的码农们，SS无法正常工作。&lt;/p&gt;
&lt;p&gt;因为在终端下不支持socks5代理，只支持http代理，这就很尴尬了。&lt;/p&gt;
&lt;p&gt;wget、curl、git、brew等命令行工具都会变得很慢。&lt;/p&gt;
&lt;p&gt;苹果在新系统中加入了SIP安全机制&lt;/p&gt;

      
    
    </summary>
    
      <category term="运维笔记" scheme="https://double-c.github.io/categories/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="mac" scheme="https://double-c.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 项目开发规范</title>
    <link href="https://double-c.github.io/2018/09/25/laravel-specification/"/>
    <id>https://double-c.github.io/2018/09/25/laravel-specification/</id>
    <published>2018-09-25T00:59:28.000Z</published>
    <updated>2018-09-25T06:32:03.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Laravel-项目开发规范"><a href="#Laravel-项目开发规范" class="headerlink" title="Laravel 项目开发规范"></a>Laravel 项目开发规范</h2><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#优势">优势</a></li><li><a href="#开发哲学">开发哲学</a></li><li><a href="#设计理念">设计理念</a></li><li><a href="#开发和线上环境">开发和线上环境</a></li><li><a href="#开发专用扩展包">开发专用扩展包</a></li><li><a href="#辅助函数">辅助函数</a></li><li><a href="#路由">路由</a></li><li><a href="#数据模型">数据模型</a></li><li><a href="#控制器">控制器</a></li><li><a href="#视图">视图</a></li><li><a href="#表单验证">表单验证</a></li><li><a href="#授权策略">授权策略</a></li><li><a href="#Auth 中间件">Auth 中间件</a></li></ul><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>规范有以下优点：</p><ul><li><strong>高效编码</strong>：避免了过多的选择造成的『决策时间』浪费</li><li><strong>风格统一</strong> ： 最大程度统一了开发团队成员代码书写风格和思路，代码阅读起来如出一辙</li><li><strong>减少错误</strong> ： 减小初级工程师的犯错几率。</li></ul><h4 id="开发哲学"><a href="#开发哲学" class="headerlink" title="开发哲学"></a>开发哲学</h4><p>开发中请把其当做指明灯，来指引你做决策：</p><ul><li>DRY：「Don’t Repeat Yourself」不写<strong>重复</strong>的逻辑代码</li><li>约定俗成：优先选择框架提倡的做法，不过度配置</li><li>KISS：「Keep it Simple, Stupid」提倡简单易读的代码，不写高深、晦涩难懂的代码，<strong>不过度设计</strong></li><li>主厨精选： 让有经验的人来为你选择方案，不独创方案</li><li>官方提倡：优先选择官方推崇的方案</li></ul><h4 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h4><p>以下是一些优秀的『程序设计理念』：</p><ul><li>MVC ：Model，View，Controller，以MVC为核心，严格控制 Controller 的可读性和代码行数</li><li>Resutful：利用『资源化概念』和标准的 HTTP 动词来组织你的程序</li></ul><h4 id="开发和线上环境"><a href="#开发和线上环境" class="headerlink" title="开发和线上环境"></a>开发和线上环境</h4><p>一般情况下，一个项目 <strong>应该</strong> 有以下三个基本的项目环境：</p><ul><li>Local：开发环境</li><li>Staging：线上测试环境</li><li>Production：线上生产环境</li></ul><h4 id="开发专用扩展包"><a href="#开发专用扩展包" class="headerlink" title="开发专用扩展包"></a>开发专用扩展包</h4><p>我们都知道 Laravel 扩展包的注册会对应用造成消耗。</p><p>有一些扩展包是开发环境中专用，生产环境中并不会使用到。</p><p>为了避免无用的负载， 必须严格控制其安装和加载。</p><p>安装开发专用扩展包时 <strong>必须</strong> 使用 <code>--dev</code> 参数，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require laracasts/generators --dev</span><br></pre></td></tr></table></figure><p>开发专用的 provider <strong>绝不</strong> 在 <code>config/app.php</code> 里面注册</p><p><strong>必须</strong> 在 <code>app/Providers/AppServiceProvider.php</code> 文件中使用如以下方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;app-&gt;environment() == <span class="string">'local'</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;register(<span class="string">'Laracasts\Generators\GeneratorsServiceProvider'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><p>存放位置</p><p><strong>必须</strong> 把所有『自定义辅助函数』存放于 <code>bootstarp</code> 文件夹中。</p><p> 并在 <code>bootstrap/app.php</code> 最顶部进行加载。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/helpers.php'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>路由器要保证干净整洁， <strong>绝不</strong> 防止除路由配置以外的其他的程序逻辑。</p><p><strong>资源命名使用复数</strong>。</p><h5 id="Restful-路由"><a href="#Restful-路由" class="headerlink" title="Restful 路由"></a>Restful 路由</h5><p><strong>必须</strong> 优先使用 Restful 路由，配合资源控制器使用。</p><p>由资源控制器处理的行为：</p><table><thead><tr><th>动词</th><th>路径</th><th>行为（方法）</th><th>路由名称</th><th>注释</th></tr></thead><tbody><tr><td>GET</td><td><code>/photos</code></td><td>index</td><td>photos.index</td><td>首页</td></tr><tr><td>GET</td><td><code>/photos/create</code></td><td>create</td><td>photos.create</td><td>创建页面</td></tr><tr><td>POST</td><td><code>/photots</code></td><td>store</td><td>photos.store</td><td>数据入库</td></tr><tr><td>GET</td><td><code>/photos/{id}</code></td><td>show</td><td>photos.show</td><td>个人展示页</td></tr><tr><td>GET</td><td><code>/photos/{id}/edit</code></td><td>edit</td><td>photos.edit</td><td>个人编辑页</td></tr><tr><td>PUT / PATCH</td><td><code>/photos/{id}</code></td><td>update</td><td>photos.update</td><td>个人信息更新</td></tr><tr><td>DELETE</td><td><code>/photos/{id}</code></td><td>destory</td><td>photos.destory</td><td>个人信息删除</td></tr></tbody></table><h5 id="全局路由参数"><a href="#全局路由参数" class="headerlink" title="全局路由参数"></a>全局路由参数</h5><p>出于安全考虑， <strong>应该</strong> 使用全局路由器参数限制。</p><p><strong>必须</strong> 在 <code>RouteServiceProvider</code> 文件的 boot 方法里定义模式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义你的路由模型绑定，模式过滤器等。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  \Illuminate\Routing\Router  $router</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">(Router $router)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 路由参数限制</span></span><br><span class="line">    $router-&gt;pattern(<span class="string">'id'</span>, <span class="string">'[0-9]+'</span>);</span><br><span class="line">    <span class="comment">// 模型绑定</span></span><br><span class="line">    Route::bind(<span class="string">'user_name'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> User::where(<span class="string">'name'</span>, $value)-&gt;first();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parent</span>::boot($router);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模式一旦被定义，遍会自动应用到所有使用该参数名称的路由上：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'users/&#123;id&#125;'</span>, <span class="string">'UsersController@show'</span>);</span><br><span class="line">Route::get(<span class="string">'photos/&#123;id&#125;'</span>, <span class="string">'PhotosController@show'</span>);</span><br></pre></td></tr></table></figure><p>只有 id 为数字时，才会路由到控制器方法中，否则 404 错误。</p><h5 id="获取-URL"><a href="#获取-URL" class="headerlink" title="获取 URL"></a>获取 URL</h5><p>获取 URL <strong>必须</strong> 遵循以下优先级：</p><ol><li><code>$model-&gt;link()</code></li><li><code>route</code> 方法</li><li><code>url</code> 方法</li></ol><p>在 Model 中创建 <code>link()</code> 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">link</span><span class="params">($params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $params = array_merge([<span class="keyword">$this</span>-&gt;id], $params);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> route(<span class="string">'models.show'</span>, $params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有单个模型数据链接使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$model-&gt;link();</span><br><span class="line"><span class="comment">// 或者添加参数</span></span><br><span class="line">$model-&gt;link($params = [<span class="string">'source'</span> =&gt; <span class="string">'list'</span>])</span><br></pre></td></tr></table></figure><p>『单个模型 URI』经常会发生变化，这样做将会让程序更加灵活。</p><p>除了『单个模型 URI』，其他路由 <strong>必须</strong> 使用 <code>route</code> 来获取 URL：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$url = route(<span class="string">'profile'</span>, [<span class="string">'id'</span> =&gt; <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>无法使用 <code>route</code> 的情况下， <strong>可以</strong> 使用 <code>url</code> 方法来获取 URL：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">'profile'</span>, [<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>模型命名使用 <strong>单数</strong> 。</p><h5 id="放置位置"><a href="#放置位置" class="headerlink" title="放置位置"></a>放置位置</h5><p>所有的数据模型文件，都 <strong>必须</strong> 存放在：<code>app/Models/</code> 文件夹中。</p><p>命名空间：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br></pre></td></tr></table></figure><h5 id="User-php"><a href="#User-php" class="headerlink" title="User.php"></a>User.php</h5><p>Laravel 默认安装会把 <code>User</code> 模型存放在 <code>app/User.php</code> ， <strong>必须</strong> 移动到 <code>app/Models</code> 文件夹中，并修改命名空间为 <code>App/Models</code> 。</p><p>为了不破坏原来的逻辑点，必须全局搜索 <code>App/User</code> 并替换为 <code>App/Models/User</code> 。</p><h5 id="使用基类"><a href="#使用基类" class="headerlink" title="使用基类"></a>使用基类</h5><p>所有的 <strong>Eloquent 数据模型</strong> 都 <strong>必须</strong> 继承统一的基类 <code>App/Models/Model</code> ，此基类存放位置为 <code>/app/Models/Model.php</code>，内容参考以下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span> <span class="title">as</span> <span class="title">EloquentModel</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span> <span class="keyword">extends</span> <span class="title">EloquentModel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeRecent</span><span class="params">($query)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $query-&gt;orderBy(<span class="string">'created_at'</span>, <span class="string">'desc'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h5><p>数据模型相关命名规范：</p><ul><li>数据模型类名 <code>必须</code> 为「单数」, 如：<code>App\Models\Photo</code></li><li>类文件名 <code>必须</code> 为「单数」，如：<code>app/Models/Photo.php</code></li><li>数据库表名字 <code>必须</code> 为「复数」，多个单词情况下使用「<a href="https://en.wikipedia.org/wiki/Snake_case" target="_blank" rel="noopener">Snake Case</a>」 如：<code>photos</code>, <code>my_photos</code></li><li>数据库表迁移名字 <code>必须</code> 为「复数」，如：<code>2014_08_08_234417_create_photos_table.php</code></li><li>数据填充文件名 <code>必须</code> 为「复数」，如：<code>PhotosTableSeeder.php</code></li><li>数据库字段名 <code>必须</code> 为「<a href="https://en.wikipedia.org/wiki/Snake_case" target="_blank" rel="noopener">Snake Case</a>」，如：<code>view_count</code>, <code>is_vip</code></li><li>数据库表主键 <code>必须</code> 为「id」</li><li>数据库表外键 <code>必须</code> 为「resource_id」，如：<code>user_id</code>, <code>post_id</code></li><li>数据模型变量 <code>必须</code> 为「resource_id」，如：<code>$user_id</code>, <code>$post_id</code></li></ul><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><p>控制器命名用 <strong>复数</strong>。</p><p><strong>必须</strong> 优先使用 Restful 资源控制器。</p><h5 id="保持短小精练"><a href="#保持短小精练" class="headerlink" title="保持短小精练"></a>保持短小精练</h5><p><strong>必须</strong> 保持控制器文件代码行数最小化，还有可读性。</p><ul><li><strong>不应该</strong> 为「方法」书写注释，这要求方法取名要足够合理，不需要过多注释；</li><li><strong>应该</strong> 为一些复杂的逻辑代码块书写注释，主要介绍产品逻辑 - <code>为什么要这么做。</code>；</li><li><strong>不应该</strong> 在控制器中书写「私有方法」，控制器里 <code>应该</code> 只存放「路由动作方法」；</li><li><strong>绝不</strong> 遗留「死方法」，就是没有用到的方法，控制器里的所有方法，都应该被使用到，否则应该删除；</li><li><strong>绝不</strong> 在控制器里批量注释掉代码，无用的逻辑代码就必须清除掉。</li></ul><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><h5 id="优先使用-Blade"><a href="#优先使用-Blade" class="headerlink" title="优先使用 Blade"></a>优先使用 Blade</h5><p>视图文件 <strong>必须</strong> 优先考虑使用 <code>.blade.php</code> 后缀来指定使用 <code>Blade</code> 模板引擎。</p><h5 id="保持目录清晰"><a href="#保持目录清晰" class="headerlink" title="保持目录清晰"></a>保持目录清晰</h5><ul><li>layouts - 页面布局文件 <strong>必须</strong> 放置于此目录下；</li><li>common - 存放页面通用元素；</li><li>pages - 简单的页面存放文件夹，如：about、contact 等；</li><li>resources - 对应 Restful 路由的资源路径名称，以 URI <code>photos/create</code> 为例，对应 <code>create.blade.php</code>文件，存放在文件夹 <code>photos</code> 下。</li></ul><p><strong>必须</strong> 避免在 <code>resources/views</code> 目录下直接放置视图文件。</p><h5 id="局部视图"><a href="#局部视图" class="headerlink" title="局部视图"></a>局部视图</h5><p>局部视图文件 <strong>必须</strong> 使用 <code>_</code> 前缀来命名，如：<code>photos/_upload_form.blade.php</code> 。</p><h5 id="视图命名要释义"><a href="#视图命名要释义" class="headerlink" title="视图命名要释义"></a>视图命名要释义</h5><p>为了和 Restful 路由器和资源控制器保持一致，视图命名也 <strong>必须</strong> 使用资源视图的命名方式。以 <code>photos</code> 为例：</p><ul><li><code>photos/index.blade.php</code><ul><li>内容列表视图</li><li>对应路由器 <code>/photos</code>，命名 <code>photos.index</code></li><li>控制器方法 <code>PhotosController@index</code></li></ul></li></ul><h5 id="create-and-edit-视图"><a href="#create-and-edit-视图" class="headerlink" title="create_and_edit 视图"></a><code>create_and_edit</code> 视图</h5><p>很多情况下，创建和编辑视图里的页面结构接近相似，在这种情况下，<strong>应该</strong> 使用 <code>create_and_edit</code> 视图。以 <code>photos</code> 为例：</p><ul><li><code>PhotosController@create</code> - 对应视图：<code>/photos/create_and_edit.blade.php</code></li><li><code>PhotosController@edit</code> - 对应 视图：<code>/photos/create_and_edit.blade.php</code></li></ul><h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><p><strong>必须</strong> 使用 表单请求 - FormRequest 类来处理控制器里的表单验证。</p><p><strong>绝不</strong> 使用 <code>authorize()</code> 方法来做用户授权，用户授权我们会单独使用 <code>Policy</code> 授权策略 来实现。</p><h5 id="使用基类-1"><a href="#使用基类-1" class="headerlink" title="使用基类"></a>使用基类</h5><p>所有 FormRequest 表验证类 <strong>必须</strong> 继承 <code>app/Http/Requests/Request.php</code> 基类。</p><p>基类文件如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">FormRequest</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">extends</span> <span class="title">FormRequest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Using policy for Authorization</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证类命名"><a href="#验证类命名" class="headerlink" title="验证类命名"></a>验证类命名</h5><p>命名使用 <strong>单数</strong> 。</p><p>FormRquest 表验证类 <strong>必须</strong> 遵循 <strong>资源控制器</strong> 方式进行命名，<code>photos</code> 对应 <code>app/Http/Requests/PhotoRequest.php</code></p><h5 id="类文件参考"><a href="#类文件参考" class="headerlink" title="类文件参考"></a>类文件参考</h5><p>FormRequest 表验证文件参考以下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoRequest</span> <span class="keyword">extends</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="keyword">$this</span>-&gt;method())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// CREATE</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> [</span><br><span class="line">                    <span class="comment">// CREATE ROLES</span></span><br><span class="line">                ];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// UPDATE</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PUT'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PATCH'</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> [</span><br><span class="line">                    <span class="comment">// UPDATE ROLES</span></span><br><span class="line">                ];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'GET'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'DELETE'</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> [];</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">messages</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="comment">// Validation messages</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="授权策略"><a href="#授权策略" class="headerlink" title="授权策略"></a>授权策略</h5><h5 id="使用基类-2"><a href="#使用基类-2" class="headerlink" title="使用基类"></a>使用基类</h5><p>所有 Policy 授权策略类 <strong>必须</strong> 继承 <code>app/Policies/Policy.php</code> 基类。</p><p>基类文件如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Policies</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">HandlesAuthorization</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Policy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">HandlesAuthorization</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">before</span><span class="params">($user, $ability)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($user-&gt;isAdmin()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="授权策略命名"><a href="#授权策略命名" class="headerlink" title="授权策略命名"></a>授权策略命名</h5><p>命名使用 <strong>单数</strong> 。</p><p>Policy 授权策略类 <strong>必须</strong> 遵循 <strong>资源路由</strong> 方式进行命名，<code>photos</code> 对应 <code>/app/Policies/PhotoPolicy.php</code> 。</p><h5 id="类文件参考-1"><a href="#类文件参考-1" class="headerlink" title="类文件参考"></a>类文件参考</h5><p>Policy 授权策略文件内容参考以下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Policies</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Photo</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoPolicy</span> <span class="keyword">extends</span> <span class="title">Policy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(User $user, Photo $photo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $user-&gt;isAuthorOf($photo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">(User $user, Photo $photo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $user-&gt;isAuthorOf($photo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自动判断授权策略"><a href="#自动判断授权策略" class="headerlink" title="自动判断授权策略"></a>自动判断授权策略</h5><p><strong>应该</strong> 使用 自动授权策略方法，这样控制器和授权类的方法名就统一起来了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新指定的文章。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $post = Post::findOrFail($id);</span><br><span class="line">    <span class="comment">// 会自动调用 `PostPolicy` 类中的 `update` 方法。</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;authorize($post);</span><br><span class="line">    <span class="comment">// 更新文章...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Auth-中间件"><a href="#Auth-中间件" class="headerlink" title="Auth 中间件"></a>Auth 中间件</h4><p>Auth 中间件 <strong>必须</strong> 书写在控制器 <code>__construct</code> 方法中，并且 <strong>必须</strong> 使用 <code>except</code> 黑名单进行过滤。</p><p>这样当你新增控制器方法时，默认是安全的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>, [            </span><br><span class="line">        <span class="string">'except'</span> =&gt; [<span class="string">'show'</span>, <span class="string">'index'</span>]</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Laravel-项目开发规范&quot;&gt;&lt;a href=&quot;#Laravel-项目开发规范&quot; class=&quot;headerlink&quot; title=&quot;Laravel 项目开发规范&quot;&gt;&lt;/a&gt;Laravel 项目开发规范&lt;/h2&gt;&lt;h4 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot;
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
      <category term="laravel" scheme="https://double-c.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>初次接触 Yii</title>
    <link href="https://double-c.github.io/2018/08/22/yii2-learn-note/"/>
    <id>https://double-c.github.io/2018/08/22/yii2-learn-note/</id>
    <published>2018-08-22T01:13:38.000Z</published>
    <updated>2018-09-07T12:37:24.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Yii2-0"><a href="#Yii2-0" class="headerlink" title="Yii2.0"></a>Yii2.0</h2><blockquote><p>记录下首次接触这个框架学习的点点滴滴</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>关于 <code>.env</code></li><li><code>init()</code> 代替 <code>__construct</code></li><li>控制器<ul><li><a href="#actions">actions()</a></li><li><a href="#behaviors">behaviors()</a></li></ul></li><li>路由<ul><li><a href="#定义路由">定义路由</a></li><li><a href="#生成路由">生成路由</a></li></ul></li><li>模型<ul><li><a href="#查询器">查询器</a></li><li><a href="#查看生成的sql语句">查看生成的sql语句</a></li></ul></li><li>视图<ul><li><a href="#小部件">小部件</a></li><li><a href="#分页">分页</a></li></ul></li><li>响应<ul><li><a href="#状态码">状态码</a></li><li><a href="#响应头">响应头</a></li><li><a href="#响应主体">响应主体</a></li><li><a href="#跳转">跳转</a></li></ul></li><li>异常<ul><li><a href="#自定义错误处理动作">自定义错误处理动作</a></li><li><a href="#获取异常相关信息">获取异常相关信息</a></li></ul></li><li>日志<ul><li><a href="#日志消息">日志消息</a></li><li><a href="#日志目标">日志目标</a></li><li><a href="#自定义日志格式">自定义日志格式</a></li><li><a href="#注释抛出异常会自动记录日志">注释抛出异常会自动记录日志</a></li></ul></li><li>缓存<ul><li><a href="#Redis">Redis</a></li></ul></li></ul><h4 id="关于-env"><a href="#关于-env" class="headerlink" title="关于 .env"></a>关于 <code>.env</code></h4><p>Yii默认是使用 <code>main-local.php</code> 来代表本地环境，会覆盖掉<code>main.php</code> 的配置。 </p><p>参考 <code>Tinkphp5</code> 源码，自定义函数 <code>env()</code> 让框架支持读取 <code>.env</code> 文件配置。</p><blockquote><p> 使用方法：</p><p>在项目入口文件前引用 <code>env.php</code> 文件即可。</p></blockquote><p><strong>env.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">defined(<span class="string">'ENV_PREFIX'</span>) <span class="keyword">or</span> define(<span class="string">'ENV_PREFIX'</span>, <span class="string">'PHP_'</span>); <span class="comment">// 环境变量的配置前缀</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载环境变量配置文件，根据各个项目入口文件的不同，这里需要自己定义</span></span><br><span class="line">$envFilePath = <span class="keyword">__DIR__</span> . <span class="string">'/../.env'</span>;</span><br><span class="line"><span class="comment">// 当项目中存在 .env 文件时加载</span></span><br><span class="line"><span class="keyword">if</span> (is_file($envFilePath)) &#123;</span><br><span class="line">    $env = parse_ini_file(<span class="keyword">__DIR__</span> . <span class="string">'/../.env'</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 全部转换为大写且以_分割做的命名</span></span><br><span class="line">    <span class="keyword">foreach</span> ($env <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">        $name = ENV_PREFIX . strtoupper($key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_array($val)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($val <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $item = $name . <span class="string">'_'</span> . strtoupper($k);</span><br><span class="line">                putenv(<span class="string">"$item=$v"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            putenv(<span class="string">"$name=$val"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'env'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">env</span><span class="params">($name, $default = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 支持以 . 符号分隔数组</span></span><br><span class="line">        $result = getenv(ENV_PREFIX . strtoupper(str_replace(<span class="string">'.'</span>, <span class="string">'_'</span>, $name)));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> !== $result) &#123;</span><br><span class="line">            <span class="comment">// 如果是布尔值相关的字符串转为布尔值</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'false'</span> === $result) &#123;</span><br><span class="line">                $result = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="string">'true'</span> === $result) &#123;</span><br><span class="line">                $result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $default;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="init-代替-construct"><a href="#init-代替-construct" class="headerlink" title="init() 代替 __construct"></a><code>init()</code> 代替 <code>__construct</code></h4><p><code>Yii</code> 里大部分类的构造方法都需要传参并调用父类构造方法。</p><p>为了方便实现构造方法，<code>Yii</code> 每个父类都会定义一个 <code>init()</code> 空方法，并在构造方法使用。</p><p>所以当你需要使用构造方法的时候请选择 <code>init()</code>。 </p><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><p>控制器中允许路由访问的方法都需要加上 <code>action</code> + 方法名才可以访问。例： <code>actionIndex()</code>。</p><h5 id="actions"><a href="#actions" class="headerlink" title="actions()"></a>actions()</h5><p>比如访问 <code>http://host/site/test</code> 的时候，会先在控制器的 <code>action()</code> 方法中找到对应请求的 <code>test</code> 方法</p><p>如果没有那么就会在控制器中找 <code>actionTest()</code> 方法</p><p>把公共的方法放在 <code>actions()</code> 中，这样要对调用一些公共的静态页面时就可以不用写控制器方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'error'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\web\ErrorAction'</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'captcha'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\captcha\CaptchaAction'</span>,</span><br><span class="line">            <span class="string">'fixedVerifyCode'</span> =&gt; YII_ENV_TEST ? <span class="string">'testme'</span> : <span class="keyword">null</span>,    <span class="comment">// 该值的是传入类的变量名</span></span><br><span class="line">        ],</span><br><span class="line">       <span class="comment">//返回验证</span></span><br><span class="line">        <span class="string">'tests'</span>=&gt;[</span><br><span class="line">             <span class="string">'class'</span>=&gt;<span class="string">'backend\models\TestAction'</span>,</span><br><span class="line">         ]</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors()"></a>behaviors()</h5><p>在控制器方法执行之前，使用指定的 <code>过滤器</code> 处理数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'access'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; AccessControl::className(), <span class="comment">// 使用核心过滤器Access 对执行动作进行验证</span></span><br><span class="line">            <span class="string">'only'</span> =&gt; [<span class="string">'logout'</span>], <span class="comment">// 对logout动作进行验证</span></span><br><span class="line">            <span class="string">'rules'</span> =&gt; [ <span class="comment">// 规则</span></span><br><span class="line">                [</span><br><span class="line">                    <span class="string">'actions'</span> =&gt; [<span class="string">'logout'</span>],</span><br><span class="line">                    <span class="string">'allow'</span> =&gt; <span class="keyword">true</span>, <span class="comment">// 只允许认证用户进行访问</span></span><br><span class="line">                    <span class="string">'roles'</span> =&gt; [<span class="string">'@'</span>],</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'verbs'</span> =&gt; [ <span class="comment">// 设置curd动作 所运行的请求方式</span></span><br><span class="line">            <span class="string">'class'</span> =&gt; VerbFilter::className(),</span><br><span class="line">            <span class="string">'actions'</span> =&gt; [</span><br><span class="line">                <span class="string">'logout'</span> =&gt; [<span class="string">'post'</span>], <span class="comment">// post 方法</span></span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="验证器"><a href="#验证器" class="headerlink" title="验证器"></a>验证器</h4><p>定义验证器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">forms</span>\<span class="title">common</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">forms</span>\<span class="title">BaseForm</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneVerifyCodeForm</span> <span class="keyword">extends</span> <span class="title">BaseForm</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $phone;  <span class="comment">// 定义需要验证的字段跟数据库字段名保持一致</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $captcha;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $method = <span class="string">'get'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attributeLabels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'phone'</span> =&gt; <span class="string">'手机号'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证规则</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [[<span class="string">'phone'</span>], <span class="string">'required'</span>]</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$form = <span class="keyword">new</span> PhoneVerifyCodeForm();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$form-&gt;load([<span class="string">'PhoneVerifyCodeForm'</span> =&gt; \Yii::$app-&gt;request-&gt;get();]);</span><br></pre></td></tr></table></figure><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><h5 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h5><p>对应模块的 <code>config</code> 目录下的 <code>main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">    </span><br><span class="line"><span class="string">'urlManager'</span> =&gt; [</span><br><span class="line">            <span class="string">'enablePrettyUrl'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">            <span class="string">'showScriptName'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">'rules'</span> =&gt; [</span><br><span class="line">                <span class="string">'login'</span> =&gt; <span class="string">'site/show-login-form'</span>,  <span class="comment">// http://host/login</span></span><br><span class="line">                <span class="string">'news/detail/&lt;id:\d+&gt;'</span> =&gt; <span class="string">'news/detail'</span>,    <span class="comment">// http://host/news/detail/1</span></span><br><span class="line">            ]</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><h5 id="生成路由"><a href="#生成路由" class="headerlink" title="生成路由"></a>生成路由</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入路由和参数</span></span><br><span class="line">\yii\helpers\Url::toRoute([<span class="string">"news/detail"</span>, <span class="string">'id'</span> =&gt; $v[<span class="string">'id'</span>]])</span><br></pre></td></tr></table></figure><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><h5 id="查询器"><a href="#查询器" class="headerlink" title="查询器"></a>查询器</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模型静态方法find()返回对应模型的查询器</span></span><br><span class="line">$query = Model::find();</span><br><span class="line"><span class="comment">// where()</span></span><br><span class="line">$query-&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>]); <span class="comment">// 查询id=1</span></span><br><span class="line">$query-&gt;where([<span class="string">'in'</span>, <span class="string">'id'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 查新 id IN (1,2,3)</span></span><br><span class="line">               </span><br><span class="line">\Yii::$app-&gt;db-&gt;createCommand($sql)-&gt;queryAll();    <span class="comment">// 使用原生的sql语句查询               </span></span><br><span class="line">               </span><br><span class="line">$query-&gt;asArray() <span class="comment">// 查询结果以数组返回</span></span><br><span class="line"></span><br><span class="line">$query-&gt;orderBy(<span class="string">'sort desc, push_time desc'</span>);   <span class="comment">// 排序</span></span><br><span class="line">               </span><br><span class="line">$query-&gt;all();    <span class="comment">// 返回所有结果</span></span><br></pre></td></tr></table></figure><h5 id="查看生成的sql语句"><a href="#查看生成的sql语句" class="headerlink" title="查看生成的sql语句"></a>查看生成的sql语句</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query-&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>])-&gt;createCommand()-&gt;getRawSql(); <span class="comment">// 将all()方法替换即可</span></span><br></pre></td></tr></table></figure><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><h5 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h5><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-base-controller#render(" target="_blank" rel="noopener">render()</a>-detail): 渲染一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#named-views" target="_blank" rel="noopener">视图名</a> 并使用一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#layouts" target="_blank" rel="noopener">布局</a> 返回到渲染结果。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-base-controller#renderPartial(" target="_blank" rel="noopener">renderPartial()</a>-detail): 渲染一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#named-views" target="_blank" rel="noopener">视图名</a> 并且不使用布局。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-controller#renderAjax(" target="_blank" rel="noopener">renderAjax()</a>-detail): 渲染一个 <a href="https://www.yiichina.com/doc/guide/2.0/structure-views#named-views" target="_blank" rel="noopener">视图名</a> 并且不使用布局， 并注入所有注册的JS/CSS脚本和文件，通常使用在响应AJAX网页请求的情况下。</li></ul><h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><p>当控制器调用 <code>render()</code>  渲染视图时，默认会使用 <code>@app/views/layouts/main.php</code> 作为布局文件。</p><p>例如：下面代码使用 <code>post.php</code> 作为布局文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $layout = <span class="string">'post'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="小部件"><a href="#小部件" class="headerlink" title="小部件"></a>小部件</h5><p>可以重复利用的视图都可以将其用小部件来展示</p><p> 小部件类：<code>model/widget/DemoWidget</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">widgets</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">services</span>\<span class="title">DemoService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Widget</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $service = <span class="keyword">new</span> DemoService();</span><br><span class="line">        <span class="comment">// 获取数据并注入到data属性</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = $service-&gt;getData(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 去渲染该路径的视图文件 model/widget/views/demo.php</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'demo'</span>, [</span><br><span class="line">            <span class="string">'data'</span> =&gt; <span class="keyword">$this</span>-&gt;data</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小部件视图文件： <code>model/widget/views/demo.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;xw_wp sw&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;con_r&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;ln&quot;&gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;ti&quot;&gt;新闻排行&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class=&quot;xw&quot;&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">        $newsNum = 1;</span><br><span class="line">        if (is_array($data)) &#123; foreach ($data as $v) &#123;</span><br><span class="line">        ?&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;&lt;?= \yii\helpers\Url::toRoute([&quot;news/detail&quot;, &apos;id&apos; =&gt; $v[&apos;id&apos;]])?&gt;&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;ic dls&quot;&gt;&lt;?=$newsNum ?&gt;&lt;/span&gt;</span><br><span class="line">                &lt;span class=&quot;ti dls&quot;&gt;&lt;?=\yii\helpers\Html::encode($v[&apos;title&apos;]) ?&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">        $newsNum++;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h5><p>控制器方法 <code>app/controller</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $count = <span class="keyword">$this</span>-&gt;newsService-&gt;getNewsCount();</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    $pagination = <span class="keyword">new</span> Pagination([</span><br><span class="line">        <span class="string">'totalCount'</span> =&gt; $count,     <span class="comment">// 数据总数</span></span><br><span class="line">        <span class="string">'defaultPageSize'</span> =&gt; <span class="number">2</span>,     <span class="comment">// 每页显示的数据条数</span></span><br><span class="line">    ]);</span><br><span class="line">    $list = <span class="keyword">$this</span>-&gt;newsService-&gt;getNewsList($pagination-&gt;limit, $pagination-&gt;offset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'list'</span>, compact(<span class="string">'list'</span>, <span class="string">'pagination'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图  <code>app/views</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">......</span><br><span class="line">// 显示分页</span><br><span class="line">echo \yii\widgets\LinkPager::widget([</span><br><span class="line">    &apos;pagination&apos; =&gt; $pagination,</span><br><span class="line">    &apos;nextPageLabel&apos; =&gt; &apos;下一页&apos;,   // 设置下一页的显示文本</span><br><span class="line">    &apos;prevPageLabel&apos; =&gt; &apos;上一页&apos;,   // 设置上一页的显示文本</span><br><span class="line">    &apos;options&apos; =&gt; [  // 该项的设置的属性都会添加到分页组件的 &lt;ul&gt; 标签上</span><br><span class="line">        &apos;class&apos; =&gt; &apos;my-class-name&apos;,</span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p>响应对象包含的信息有HTTP状态码，HTTP头和主体内容等。</p><p>从本质上说，网页应用开发最终的目标就是<strong>根据不同的请求去构建这些响应对象</strong>。</p><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><p>手动设置状态码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yii::$app-&gt;response-&gt;statusCode = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p>如果需要指定请求失败，可抛出对应的 <code>HTTP</code> 异常</p><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-badrequesthttpexception" target="_blank" rel="noopener">yii\web\BadRequestHttpException</a><ul><li>状态码：400</li><li>错误请求</li><li>服务器不理解请求的语法</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-unauthorizedhttpexception" target="_blank" rel="noopener">yii\web\UnauthorizedHttpException</a><ul><li>状态码：401</li><li>未授权</li><li>请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-forbiddenhttpexception" target="_blank" rel="noopener">yii\web\ForbiddenHttpException</a><ul><li>状态码：403</li><li>禁止</li><li>服务器拒绝请求</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-notfoundhttpexception" target="_blank" rel="noopener">yii\web\NotFoundHttpException</a><ul><li>状态码：404</li><li>未找到</li><li>服务器找不到请求的网页</li></ul></li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-servererrorhttpexception" target="_blank" rel="noopener">yii\web\ServerErrorHttpException</a><ul><li>状态码 : 500</li><li>服务器内部错误</li><li>服务器遇到错误，无法完成请求</li></ul></li></ul><h5 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$headers = Yii::$app-&gt;response-&gt;headers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个 Pragma 头，已存在的Pragma 头不会被覆盖。</span></span><br><span class="line">$headers-&gt;add(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个Pragma 头. 任何已存在的Pragma 头都会被丢弃</span></span><br><span class="line">$headers-&gt;set(<span class="string">'Pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除Pragma 头并返回删除的Pragma 头的值到数组</span></span><br><span class="line">$values = $headers-&gt;remove(<span class="string">'Pragma'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>请求头大小写敏感。</p></blockquote><h5 id="响应主体"><a href="#响应主体" class="headerlink" title="响应主体"></a>响应主体</h5><p>返回数据前先设置格式，<code>format</code> 属性指定 <code>data</code> 中数据格式化后的样式，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$response = Yii::$app-&gt;response;</span><br><span class="line">$response-&gt;format = \yii\web\Response::FORMAT_JSON;</span><br><span class="line">$response-&gt;data = [<span class="string">'message'</span> =&gt; <span class="string">'hello world'</span>];</span><br></pre></td></tr></table></figure><p><code>Yii</code> 支持五种格式：</p><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_HTML-detail" target="_blank" rel="noopener">HTML</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-htmlresponseformatter" target="_blank" rel="noopener">yii\web\HtmlResponseFormatter</a> 来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_XML-detail" target="_blank" rel="noopener">XML</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-xmlresponseformatter" target="_blank" rel="noopener">yii\web\XmlResponseFormatter</a>来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_JSON-detail" target="_blank" rel="noopener">JSON</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-jsonresponseformatter" target="_blank" rel="noopener">yii\web\JsonResponseFormatter</a>来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_JSONP-detail" target="_blank" rel="noopener">JSONP</a>: 通过 <a href="https://www.yiichina.com/doc/api/2.0/yii-web-jsonresponseformatter" target="_blank" rel="noopener">yii\web\JsonResponseFormatter</a>来实现.</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-web-response#FORMAT_RAW-detail" target="_blank" rel="noopener">RAW</a>: use this format if you want to send the response directly without applying any formatting.</li></ul><h5 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h5><p>控制器中直接使用 <code>redirect()</code> 方法进行重定向</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionDemo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redirect(<span class="string">'http://example.com/new'</span>, <span class="number">301</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>redirect()</code> 方法默认为302，该状态码会告诉浏览器请求的资源临时放到了另一个URL地址上。</p><p>可传递 301 状态码告诉浏览器请求的资源已经永久重定向到新的URL地址。</p></blockquote><p>如果请求为 <code>Ajax</code> 请求的时候，发一个 <code>Localtion</code> 头不会使浏览器自动跳转。</p><p>可设置一个 <code>X-Redirect</code> 头，让客户端用 <code>js</code> 获取并实现跳转。</p><p>非控制器中使用如下代码完成跳转</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Yii::$app-&gt;response-&gt;redirect(<span class="string">'/'</span>, <span class="number">301</span>)-&gt;send();</span><br></pre></td></tr></table></figure><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p><code>Yii</code> 内置了一个 <code>ErrorHandler</code> 用来处理错误。</p><blockquote><p>ErrorHandler 默认启用，可以在应用入口脚本定义 <code>YII_ENABLE_ERROR_HANDLER</code> 来禁用</p></blockquote><h5 id="自定义错误处理动作"><a href="#自定义错误处理动作" class="headerlink" title="自定义错误处理动作"></a>自定义错误处理动作</h5><p>应用配置文件 <code>main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'errorHandler'</span> =&gt; [</span><br><span class="line">            <span class="string">'errorAction'</span> =&gt; <span class="string">'site/error'</span>,  <span class="comment">// 指定错误处理动作，使用控制器来处理错误</span></span><br><span class="line">        ],</span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>如果异常不是继承于 <code>UserException</code> ，且 <code>debug</code> 为 <code>true</code>时。</p><p>例： <code>ErrorException</code> 是不会走配置的方法而是直接使用默认的视图显示错误。</p><p>所以上线时必须关闭 <code>debug</code> 才能让所有异常错误走自定义的错误动作。</p><p>方便记录日志。  </p></blockquote><p>错误处理器 <code>yii\base\ErrorHandler</code>  中注释掉105行的 <code>$this-&gt;logException($exception)</code></p><p>错误处理器默认会把每次异常记录为 <code>error</code> 级别的日志。</p><h5 id="获取异常相关信息"><a href="#获取异常相关信息" class="headerlink" title="获取异常相关信息"></a>获取异常相关信息</h5><p>错误处理动作中获取异常相关信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;exception = \Yii::$app-&gt;errorHandler-&gt;exception;   <span class="comment">// 获取抛出的异常类</span></span><br><span class="line">$code = <span class="keyword">$this</span>-&gt;exception-&gt;statusCode    <span class="comment">// 获取异常状态码是属性statusCode,而不是getCode()</span></span><br><span class="line">$message = <span class="keyword">$this</span>-&gt;exception-&gt;getMessage();      <span class="comment">// 获取异常信息</span></span><br><span class="line">$trace = <span class="keyword">$this</span>-&gt;exception-&gt;getTrace();      <span class="comment">// 获取异常堆栈信息</span></span><br></pre></td></tr></table></figure><p>可通过判断异常类是否继承于 <code>UserException</code> 决定是否记录日志</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!$exception <span class="keyword">instanceof</span> UserException) &#123;</span><br><span class="line">    <span class="comment">// write error log</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果异常继承于 <code>UserException</code> 会被认为是用户产生的错误，开发人员不需要去修正。</p><p>如果是 <code>UserException</code> 只需要返回友好的提示信息给用户即可。</p></blockquote><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p><code>Yii</code> 提供了一个日志框架，记录<strong>各种类型</strong>的消息，过滤它们，并将它们收集到不同目标，例：文件，数据库。</p><blockquote><p><code>log</code> 组件必须在 <code>bootstrapping</code>  期间就被加载，以便它能够及时调度日志信息到目标里。</p></blockquote><h5 id="日志消息"><a href="#日志消息" class="headerlink" title="日志消息"></a>日志消息</h5><ul><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#trace(" target="_blank" rel="noopener">Yii::trace()</a>-detail)：记录一条消息去跟踪一段代码是怎样运行的。这主要在开发的时候使用。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#info(" target="_blank" rel="noopener">Yii::info()</a>-detail)：记录一条消息来传达一些有用的信息。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#warning(" target="_blank" rel="noopener">Yii::warning()</a>-detail)：记录一个警告消息用来指示一些已经发生的意外。</li><li><a href="https://www.yiichina.com/doc/api/2.0/yii-baseyii#error(" target="_blank" rel="noopener">Yii::error()</a>-detail)：记录一个致命的错误，这个错误应该尽快被检查。</li></ul><p>这些方法可填两个参数</p><p> <code>message</code> 代表要被记录的日志信息</p><p> <code>category</code> 代表要被记录的日志类别</p><blockquote><p>日志消息可以是字符串，也可以是复杂的数据，诸如数组或者对象。</p><p>可用魔术常量 <strong> METHOD </strong> 等当作日志类别区分日志 </p></blockquote><h5 id="日志目标"><a href="#日志目标" class="headerlink" title="日志目标"></a>日志目标</h5><p>一个日志目标是一个 <code>yii\log\Target</code> 类或者它的子类的实例。</p><p>它通过严重级别和类别过滤日志信息，然后将它们导入一些媒介中。</p><p><code>config\main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'bootstrap'</span> =&gt; [<span class="string">'log'</span>],</span><br><span class="line">    <span class="string">'components'</span> =&gt; [</span><br><span class="line">        <span class="string">'log'</span> =&gt; [</span><br><span class="line">            <span class="comment">// 开启两个文件的日志目标</span></span><br><span class="line">            <span class="string">'targets'</span> =&gt; [  </span><br><span class="line">                [</span><br><span class="line">                    <span class="comment">// 该目标记录一些自定义的的错误日志信息，例如一些数据查询之类的日志</span></span><br><span class="line">                    <span class="comment">// logVars 定义只记录请求的get post 和 cookie</span></span><br><span class="line">                    <span class="comment">// logFile 定义日志的路径 model/runtime/logs/app.log</span></span><br><span class="line">                    <span class="comment">// 该日志目标只记录 app 分类下的日志</span></span><br><span class="line">                    <span class="string">'class'</span> =&gt; <span class="string">'yii\log\FileTarget'</span>,</span><br><span class="line">                    <span class="string">'categories'</span> =&gt; [<span class="string">'app'</span>,],</span><br><span class="line">                    <span class="string">'logFile'</span> =&gt; <span class="string">'@runtime/logs/app.log'</span>,</span><br><span class="line">                    <span class="string">'logVars'</span> =&gt; [<span class="string">'_GET'</span>,<span class="string">'_POST'</span>,<span class="string">'_COOKIE'</span>]</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    <span class="comment">// 该日志目标记录下应用所有未知的bug</span></span><br><span class="line">                    <span class="string">'class'</span> =&gt; <span class="string">'yii\log\FileTarget'</span>,</span><br><span class="line">                    <span class="string">'levels'</span> =&gt; [<span class="string">'error'</span>, <span class="string">'warning'</span>],</span><br><span class="line">                    <span class="string">'logFile'</span> =&gt; <span class="string">'@runtime/logs/bug.log'</span>,</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h5 id="自定义日志格式"><a href="#自定义日志格式" class="headerlink" title="自定义日志格式"></a>自定义日志格式</h5><p>重写 <code>yii\log\FileTarget</code> 中的 <code>getContextMessage()</code> 和 <code>getMessagePrefix()</code>。</p><p><code>app\exceptions\FileLogHandler.php</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">exceptions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">log</span>\<span class="title">FileTarget</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLogHandler</span> <span class="keyword">extends</span> <span class="title">FileTarget</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 该方法定义日志格式，定义为json格式 请求参数为一行 请求报文相关为另一行json</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getContextMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $json = [];</span><br><span class="line">        $server = [];</span><br><span class="line">        $result = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;logVars <span class="keyword">as</span> $name) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>($GLOBALS[$name])) &#123;</span><br><span class="line">                $key = strtolower(substr($name, <span class="number">1</span>));</span><br><span class="line">                <span class="comment">// $_SERVER 只记录关键字段</span></span><br><span class="line">                <span class="keyword">if</span> ($key == <span class="string">'server'</span>) &#123;</span><br><span class="line">                    $server[<span class="string">'SERVER_PROTOCOL'</span>] = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'SERVER_PROTOCOL'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'SERVER_PROTOCOL'</span>];</span><br><span class="line">                    $server[<span class="string">'REDIRECT_STATUS'</span>] = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'REDIRECT_STATUS'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'REDIRECT_STATUS'</span>];</span><br><span class="line">                    $server[<span class="string">'REQUEST_METHOD'</span>]  = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'REQUEST_METHOD'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'REQUEST_METHOD'</span>];</span><br><span class="line">                    $server[<span class="string">'REQUEST_URI'</span>]     = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'REQUEST_URI'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'REQUEST_URI'</span>];</span><br><span class="line">                    $server[<span class="string">'HTTP_ACCEPT'</span>]     = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'HTTP_ACCEPT'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'HTTP_ACCEPT'</span>];</span><br><span class="line">                    $server[<span class="string">'HTTP_USER_AGENT'</span>] = <span class="keyword">empty</span>($GLOBALS[$name][<span class="string">'HTTP_USER_AGENT'</span>]) ? <span class="string">''</span> : $GLOBALS[$name][<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $json[$key] = $GLOBALS[$name];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($json)) &#123;</span><br><span class="line">            $result .= json_encode($json, JSON_UNESCAPED_UNICODE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($server)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">                $result .= PHP_EOL;</span><br><span class="line">            &#125;</span><br><span class="line">            $result .= json_encode($server, JSON_UNESCAPED_UNICODE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除日志前缀的sessionId,只记录用户id和访问ip</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessagePrefix</span><span class="params">($message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;prefix !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func(<span class="keyword">$this</span>-&gt;prefix, $message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Yii::$app === <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $request = Yii::$app-&gt;getRequest();</span><br><span class="line">        $ip = $request <span class="keyword">instanceof</span> Request ? $request-&gt;getUserIP() : <span class="string">'-'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* <span class="doctag">@var</span> $user \yii\web\User */</span></span><br><span class="line">        $user = Yii::$app-&gt;has(<span class="string">'user'</span>, <span class="keyword">true</span>) ? Yii::$app-&gt;get(<span class="string">'user'</span>) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ($user &amp;&amp; ($identity = $user-&gt;getIdentity(<span class="keyword">false</span>))) &#123;</span><br><span class="line">            $userID = $identity-&gt;getId();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $userID = <span class="string">'-'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[$ip][$userID]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 <code>config\main.php</code>  中的 <code>class</code> 需要设置为自定义的日志类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line"><span class="string">'components'</span> =&gt; [</span><br><span class="line">    <span class="string">'log'</span> =&gt; [</span><br><span class="line">        <span class="string">'targets'</span> =&gt; [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'class'</span> =&gt; <span class="string">'app\exceptions\FileLogHandler'</span>,</span><br><span class="line">                <span class="string">'levels'</span> =&gt; [<span class="string">'error'</span>, <span class="string">'warning'</span>],</span><br><span class="line">                <span class="string">'logFile'</span> =&gt; <span class="string">'@runtime/logs/bug.log'</span>,</span><br><span class="line">            ],  </span><br><span class="line">        ],</span><br><span class="line">    ],    </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="注释抛出异常会自动记录日志"><a href="#注释抛出异常会自动记录日志" class="headerlink" title="注释抛出异常会自动记录日志"></a>注释抛出异常会自动记录日志</h5><p><code>yii\base\ErrorHandler</code> 中的 <code>handleException()</code></p><p>注释掉 <code>$this-&gt;logException($exception)</code>  </p><p>否则每次抛出异常的时候 <code>Yii</code> 都会自动记录一个 error 级别的日志</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">........</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleException</span><span class="params">($exception)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($exception <span class="keyword">instanceof</span> ExitException) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;exception = $exception;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;unregister();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PHP_SAPI !== <span class="string">'cli'</span>) &#123;</span><br><span class="line">            http_response_code(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            $this-&gt;logException($exception);      // 自定义异常的日志处理，避免日志过于混乱</span></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><p><code>composer</code> 安装</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> --prefer-dist yiisoft/yii2-redis</span><br></pre></td></tr></table></figure><p>添加配置文件 <code>main.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">    <span class="string">'redis'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'yii\redis\Connection'</span>,</span><br><span class="line">            <span class="string">'hostname'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">            <span class="string">'port'</span> =&gt; <span class="number">6379</span>,</span><br><span class="line">            <span class="string">'database'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$redis = Yii::$app-&gt;redis;</span><br><span class="line">$redis-&gt;set(<span class="string">'test'</span>, <span class="number">123</span>);</span><br><span class="line">$redis-&gt;expire(<span class="string">'test'</span>, <span class="number">60</span>);     <span class="comment">// 设置缓存过期的秒数</span></span><br><span class="line">$redis-&gt;get(<span class="string">'test'</span>);            <span class="comment">// 123</span></span><br><span class="line">$redis-&gt;del(<span class="string">'test'</span>);            <span class="comment">// 删除该键</span></span><br></pre></td></tr></table></figure><h4 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p><code>main.php</code> 配置文件下在 <code>components</code> 下添加 <code>user</code> 组件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="string">'components'</span> =&gt; [</span><br><span class="line">    <span class="string">'user'</span> =&gt; [</span><br><span class="line">        <span class="string">'identityClass'</span> =&gt; <span class="string">'common\models\User'</span>,</span><br><span class="line">        <span class="string">'enableAutoLogin'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">'identityCookie'</span> =&gt; [<span class="string">'name'</span> =&gt; <span class="string">'_identity-frontend'</span>, <span class="string">'httpOnly'</span> =&gt; <span class="keyword">true</span>],  </span><br><span class="line">    ]       </span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。</p></blockquote><h5 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h5><p><code>common\models\User</code> 对应的用户表模型</p><blockquote><p> 使用 <code>cookie</code> 登录的话表中必须有字段 <code>auth_key</code> 。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">common</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">IdentityInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span> <span class="keyword">implements</span> <span class="title">IdentityInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#123;%users&#125;&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给到的ID查询身份。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|integer $id 被查询的ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IdentityInterface|null 通过ID匹配到的身份对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">findIdentity</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::findOne($id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 token 查询身份。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $token 被查询的 token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IdentityInterface|null 通过 token 得到的身份对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">findIdentityByAccessToken</span><span class="params">($token, $type = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::findOne([<span class="string">'access_token'</span> =&gt; $token]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int|string 当前用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string 当前用户的（cookie）认证密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;auth_key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $authKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean if auth key is valid for current user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateAuthKey</span><span class="params">($authKey)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getAuthKey() === $authKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 每次注册用户的时候为用户生成一个对应的key </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeSave</span><span class="params">($insert)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">parent</span>::beforeSave($insert)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isNewRecord) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;auth_key = \Yii::$app-&gt;security-&gt;generateRandomString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入验证完毕的登陆模型即可登陆，第二个参数设置登陆cookie有效期(秒)</span></span><br><span class="line">\Yii::$app-&gt;user-&gt;login($user, <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line"><span class="comment">// 获取用户id，未登录返回空</span></span><br><span class="line">\Yii::$app-&gt;user-&gt;getId();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Yii2-0&quot;&gt;&lt;a href=&quot;#Yii2-0&quot; class=&quot;headerlink&quot; title=&quot;Yii2.0&quot;&gt;&lt;/a&gt;Yii2.0&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;记录下首次接触这个框架学习的点点滴滴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
      <category term="yii2.0" scheme="https://double-c.github.io/tags/yii2-0/"/>
    
  </entry>
  
  <entry>
    <title>PHP 标准规范</title>
    <link href="https://double-c.github.io/2018/08/16/php-psr/"/>
    <id>https://double-c.github.io/2018/08/16/php-psr/</id>
    <published>2018-08-16T04:08:01.000Z</published>
    <updated>2018-09-16T05:06:28.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><p>参考：<a href="https://psr.phphub.org/" target="_blank" rel="noopener">https://psr.phphub.org/</a></p><p>说明：PSR 是由PHP FIG组织制定的PHP规范，是PHP开发的实践标准</p><p><strong>PHP代码文件必须是不带BOM的UTF-8</strong></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#命名规范">命名规范</a></li><li><a href="#命名空间和类">命名空间和类</a> </li><li><a href="#基本编码准则">基本编码准则</a> </li><li><a href="#方法">方法</a> </li><li><a href="#函数调用">函数调用</a></li><li><a href="#if、elseif和else">if、elseif和else</a></li><li><a href="#switch和case">switch和case</a></li><li><a href="#while和do　while">while和do　while</a></li><li><a href="#for">for</a></li><li><a href="#foreach">foreach</a></li><li><a href="#try　catch">try　catch</a></li><li><a href="#闭包">闭包</a></li><li><a href="#参数和变量可分成多行">参数和变量可分成多行</a> </li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><table><thead><tr><th>类型</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>类</td><td>StudlyCaps</td><td>类的命名 <strong>必须</strong> 遵循大写开头的驼峰命名</td></tr><tr><td>函数</td><td>camelCase</td><td>方法名称 <strong>必须</strong> 符合的小写开头驼峰命名</td></tr><tr><td>类方法</td><td>camelCase</td><td>方法名称 <strong>必须</strong> 符合的小写开头驼峰命名</td></tr><tr><td>变量</td><td>underScore</td><td>变量名可以遵循小写开头驼峰命名</td></tr><tr><td>类的属性</td><td>underScore</td><td>类的属性可以遵循小写开头驼峰命名</td></tr><tr><td>常量</td><td>DATE_APPROVED</td><td>常量中所有字母都 <strong>必须</strong> 大写，词间以下划线分隔</td></tr><tr><td>所有关键字</td><td>static</td><td>全部 <strong>必须</strong> 小写</td></tr><tr><td>个别常量</td><td>true, null,false</td><td>全部 <strong>必须</strong> 小写</td></tr></tbody></table><blockquote><p>命名尽量有意义，实在不行可以使用翻译软件<br>尽量避免没有意义的命名。</p></blockquote><h3 id="命名空间和类"><a href="#命名空间和类" class="headerlink" title="命名空间和类"></a>命名空间和类</h3><ol><li>完整的类名 <strong>必须</strong> 要有一个顶级命名空间，被称为 “vendor namespace”；</li><li>完整的类名 <strong>可以</strong> 有一个或多个子命名空间；</li><li>完整的类名 <strong>必须</strong> 有一个最终的类名；</li><li>完整的类名 <strong>可以</strong> 由任意大小写字母组成；</li><li>所有类名都 <strong>必须</strong> 是大小写敏感的。</li></ol><ul><li>类和方法开始花括号 <code>{</code> 必须写在函数声明后自成一行，结束花括号 <code>}</code> 也必须写在函数主体后自成一行</li><li>类的属性和方法 <strong>必须</strong> 添加访问修饰符（private、protected 以及 public）</li><li><code>abstract</code> 以及 <code>final</code> 必须声明在访问修饰符之前，而 <code>static</code> 必须声明在访问修饰符后</li><li>关键词 extends 和 implements <strong>必须</strong> 写在类名称的同一行。</li><li>控制结构的关键字后必须要有一个空格符，而调用方法或函数时则一定不可有。</li><li>控制结构的开始左括号后和结束右括号前，都一定不可有空格符。</li><li>namespace 声明后 <strong>必须</strong> 插入一个空白行。</li><li>所有 use <strong>必须</strong> 在 namespace 后声明。</li><li>每条 use 声明语句 <strong>必须</strong> 只有一个 use 关键词。</li><li>use 声明语句块后 <strong>必须</strong> 要有一个空白行。</li></ul><p>例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FooInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span> <span class="keyword">implements</span> <span class="title">FooInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $foo = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleFunction</span><span class="params">($a, $b = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($a === $b) &#123;</span><br><span class="line">            bar();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($a &gt; $b) &#123;</span><br><span class="line">            $foo-&gt;bar($arg1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BazClass::bar($arg2, $arg3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="基本编码准则"><a href="#基本编码准则" class="headerlink" title="基本编码准则"></a>基本编码准则</h3><p>非空行后 <strong>一定不可</strong>有 多余的空格符。</p><p>每行 <strong>一定不可</strong> 存在多于一条语句。</p><p>空行可以使得阅读代码更加方便以及有助于代码的分块，一般使用 <strong>一个</strong> 空行</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法名称后 <strong>一定不可</strong> 有空格符</p><p>参数列表中，每个逗号后面 <strong>必须</strong> 要有一个空格，而逗号前面 一定不可 有空格。</p><p>有默认值的参数，<strong>必须</strong> 放到参数列表的末尾。</p><p>结构体主体 <strong>必须</strong> 要有一次缩进。</p><p>一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($arg1, &amp;$arg2, $arg3 = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>方法及函数调用时，方法名或函数名与参数左括号之间 <strong>一定不可</strong> 有空格</p><p>参数右括号前也 <strong>一定不可</strong> 有空格</p><p>每个参数前 一定不可 有空格，但其后 <strong>必须</strong> 有一个空格。</p><p>一个标准的方法调用可参照以下范例，留意其括号、逗号以及空格的位置。<br>例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">bar();</span><br><span class="line">$foo-&gt;bar($arg1);</span><br><span class="line">Foo::bar($arg2, $arg3);</span><br></pre></td></tr></table></figure><h3 id="if、elseif和else"><a href="#if、elseif和else" class="headerlink" title="if、elseif和else"></a>if、elseif和else</h3><p>应该使用关键词 <code>elseif</code> 代替所有 else if，以使得所有的控制关键字都像是单独的一个词。</p><p>标准的if结构如下代码所示，请留意「括号」、「空格」以及「花括号」的位置， 注意 else 和 elseif 都与前面的结束花括号在同一行。</p><p>例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($expr1) &#123;</span><br><span class="line">    <span class="comment">// if body</span></span><br><span class="line">&#125; <span class="keyword">elseif</span> ($expr2) &#123;</span><br><span class="line">    <span class="comment">// elseif body</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// else body;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="switch和case"><a href="#switch和case" class="headerlink" title="switch和case"></a>switch和case</h3><p><code>case语句</code> <strong>必须</strong> 相对 <code>switch</code> 进行一次缩进</p><p><code>break</code> 语句以及 <code>case</code> 内的其它语句都必须相对 <code>case</code> 进行一次缩进。</p><p>如果存在非空的 <code>case</code> 直穿语句，主体里必须有类似  //no break 的注释。</p><p>标准 的<code>switch</code> 结构如下代码所示，留意括号、空格以及花括号的位置。</p><p>例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">switch</span> ($expr) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'First case, with a break'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Second case, which falls through'</span>;</span><br><span class="line">        <span class="comment">// no break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Third case, return instead of break'</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Default case'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="while和do-while"><a href="#while和do-while" class="headerlink" title="while和do　while"></a>while和do　while</h3><p>一个规范的 <code>while</code> 语句应该如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">while</span> ($expr) &#123;</span><br><span class="line">    <span class="comment">// structure body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>标准的 <code>do while</code> 语句如下所示，同样的，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// structure body;</span></span><br><span class="line">&#125; <span class="keyword">while</span> ($expr);</span><br></pre></td></tr></table></figure></p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>标准的 <code>for</code> 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++) &#123;</span><br><span class="line">    <span class="comment">// for body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>标准的 <code>foreach</code> 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><p>例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> ($iterable <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="comment">// foreach body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try　catch"></a>try　catch</h3><p>标准的 <code>try catch</code> 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// try body</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FirstExceptionType $e) &#123;</span><br><span class="line">    <span class="comment">// catch body</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (OtherExceptionType $e) &#123;</span><br><span class="line">    <span class="comment">// catch body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包声明时，关键词 <code>function</code> 后以及关键词 <code>use</code> 的前后都必须要有一个空格。</p><p>开始花括号 <strong>必须</strong> 写在声明的同一行，结束花括号 <strong>必须</strong> 紧跟主体结束的下一行。</p><p>参数列表和变量列表的左括号后以及右括号前，<strong>一定不可</strong> 有空格。</p><p>参数和变量列表中，逗号前 <strong>一定不可</strong> 有空格，而逗号后 <strong>必须</strong> 要有空格</p><p>闭包中有默认值的参数 <strong>必须</strong> 放到列表的后面。</p><p>标准的闭包声明语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$closureWithArgs = <span class="function"><span class="keyword">function</span> <span class="params">($arg1, $arg2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$closureWithArgsAndVars = <span class="function"><span class="keyword">function</span> <span class="params">($arg1, $arg2)</span> <span class="title">use</span> <span class="params">($var1, $var2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="参数和变量可分成多行"><a href="#参数和变量可分成多行" class="headerlink" title="参数和变量可分成多行"></a>参数和变量可分成多行</h3><p>参数列表以及变量列表可以分成多行</p><p>这样，包括第一个在内的每个参数或变量都 必须 单独成行</p><p>而列表的右括号与闭包的开始花括号 <strong>必须</strong> 放在同一行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$longArgs_noVars = <span class="function"><span class="keyword">function</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerArgument</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$noArgs_longVars = <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longVar1,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerVar2,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerVar3</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编码规范&quot;&gt;&lt;a href=&quot;#编码规范&quot; class=&quot;headerlink&quot; title=&quot;编码规范&quot;&gt;&lt;/a&gt;编码规范&lt;/h1&gt;&lt;p&gt;参考：&lt;a href=&quot;https://psr.phphub.org/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>从零配置阿里云EMS实例</title>
    <link href="https://double-c.github.io/2018/06/14/ali-ems/"/>
    <id>https://double-c.github.io/2018/06/14/ali-ems/</id>
    <published>2018-06-14T05:05:58.000Z</published>
    <updated>2018-09-17T01:15:02.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EMS"><a href="#EMS" class="headerlink" title="EMS"></a>EMS</h2><blockquote><p>阿里云优惠活动 279 买了三年一核两G的主机玩玩。</p><p>记录从零搭建开发环境的过程。</p></blockquote><p>先执行一遍：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>每次执行 <code>sudo</code> 提示 <code>sudo: unable to resolve host</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname      // 获取主机名</span><br><span class="line">// 将上面获得的主机名写入hosts</span><br><span class="line">vim /etc/hosts</span><br><span class="line">127.0.0.1       localhost iZ2zecsdy8fl******</span><br></pre></td></tr></table></figure><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#Nginx">Ngingx</a></li><li><a href="#Redis">Redis</a></li><li>Mysql<ul><li><a href="#编译安装Mysql">编译安装Mysql</a></li><li><a href="#配置Mysql">配置Mysql</a></li><li><a href="#设置远程访问权限">设置远程访问权限</a></li></ul></li><li>php<ul><li><a href="#编译安装php">编译安装php</a></li><li><a href="#php-fpm">php-fpm</a></li></ul></li></ul><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>对版本没要求，直接简单安装即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install nginx</span><br></pre></td></tr></table></figure><p>开放80端口</p><p>进入阿里云控制台安全组添加规则</p><blockquote><p> 授权策略：允许</p></blockquote><blockquote><p>协议类型：自定义TCP   </p></blockquote><blockquote><p> 端口：80/80  </p></blockquote><blockquote><p>授权类型 地址段访问</p></blockquote><blockquote><p>授权对象：0.0.0.0/0</p></blockquote><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>同理对版本无任何要求，直接简单安装即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install reids-server</span><br></pre></td></tr></table></figure><p>当开放redis远程连接时，也要进入阿里云控制台安全组添加规则</p><blockquote><p> 授权策略：允许</p></blockquote><blockquote><p>协议类型：自定义TCP   </p></blockquote><blockquote><p> 端口：6379/6379  </p></blockquote><blockquote><p>授权类型 地址段访问</p></blockquote><blockquote><p>授权对象：0.0.0.0/0</p></blockquote><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><p>机子内存较小，不适宜安装过高版本，选择5.6版本即可。</p><h5 id="编译安装Mysql"><a href="#编译安装Mysql" class="headerlink" title="编译安装Mysql"></a>编译安装Mysql</h5><p>安装编译源码需要的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install make cmake gcc g++ bison libncurses5-dev</span><br></pre></td></tr></table></figure><p>下载并解压缩</p><ul><li>官方地址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a> </li><li>文件名：mysql-5.6.26.tar.gz </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-5.6.26.tar.gz </span><br><span class="line">cd mysql-5.6.26</span><br></pre></td></tr></table></figure><p>编译配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 -DWITHOUT_FEDERATED_STORAGE_ENGINE=1 -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=all -DENABLED_LOCAL_INFILE=1 -DWITH_READLINE=1 -DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock -DMYSQL_TCP_PORT=3306 -DMYSQL_USER=mysql -DCOMPILATION_COMMENT=”lq-edition”-DENABLE_DTRACE=1 -DOPTIMIZER_TRACE=1 -DWITH_DEBUG=1</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h5 id="配置Mysql"><a href="#配置Mysql" class="headerlink" title="配置Mysql"></a>配置Mysql</h5><ol><li>新建运行 <code>Mysql</code> 的用户和组 </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd mysql</span><br><span class="line">sudo useradd -g mysql mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>设置 <code>Mysql</code> 安装目录的权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql </span><br><span class="line">sudo chown -R mysql:mysql ./</span><br></pre></td></tr></table></figure><ol start="3"><li>建立配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp support-files/my-default.cnf /etc/my.cnf</span><br><span class="line">sudo chown mysql:mysql /etc/my.cnf</span><br></pre></td></tr></table></figure><ol start="4"><li>修改配置文件</li></ol><p>sudo vim /etc/my.cnf </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /usr/local/mysql/data/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /usr/local/mysql/data/mysql.sock</span><br><span class="line">basedir = /usr/local/mysql </span><br><span class="line">datadir = /usr/local/mysql/data</span><br></pre></td></tr></table></figure><ol start="5"><li>初始化数据库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line">sudo scripts/mysql_install_db –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data/</span><br></pre></td></tr></table></figure><ol start="6"><li><p>启动Mysql服务</p><ol><li>添加服务</li></ol><p>复制启动脚本到/etc/init.d目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/ </span><br><span class="line">cp support-files/mysql.server /etc/init.d/mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>设置权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 /etc/init.d/mysql</span><br></pre></td></tr></table></figure><blockquote><p>执行 <code>systemctl enable mysql.service</code></p><p>不然无法启动 报错  service.notfound </p></blockquote></li><li><p>配置环境变量</p></li></ol><p>为了直接调用 <code>mysql</code> 命令，需要将 <code>mysql</code> 的 <code>bin</code> 目录加入环境变量</p><p>编辑 <code>/etc/profile</code> 文件：</p><p>在文件最后两行添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:/usr/local/mysql/bin </span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>保存文件，运行下面命令，让配置立即生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ol start="8"><li>修改 <code>root</code> 密码，因为默认密码为空</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -h127.0.0.1 -u root -p </span><br><span class="line">update mysql.user set password=password(“mysqldba”) where user=’root’;</span><br></pre></td></tr></table></figure><h5 id="设置远程访问权限"><a href="#设置远程访问权限" class="headerlink" title="设置远程访问权限"></a>设置远程访问权限</h5><p>使用grant all privileges on来更改用户对应某些库的远程权限</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on 库名.表名 to &apos;用户名&apos;@&apos;IP地址&apos; identified by &apos;密码&apos; with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ul><li>库名:要远程访问的数据库名称,所有的数据库使用“*” </li><li>表名:要远程访问的数据库下的表的名称，所有的表使用“*” </li><li>用户名:要赋给远程访问权限的用户名称 </li><li>IP地址:可以远程访问的电脑的IP地址，所有的地址使用“%” </li><li>密码:要赋给远程访问权限的用户对应使用的密码</li></ul><h4 id="php"><a href="#php" class="headerlink" title="php"></a>php</h4><p>选择最新版本 7.2</p><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><p>到官方下载并解压</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/php --with-config-file-path=/etc/php --enable-fpm --enable-pcntl --enable-mysqlnd --enable-opcache --enable-sockets --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-shmop --enable-zip --enable-soap --enable-xml --enable-mbstring --disable-rpath --disable-debug --disable-fileinfo  --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-pcre-regex --with-iconv --with-zlib --with-mhash --with-xmlrpc --with-curl --with-imap-ssl  --with-openssl</span><br></pre></td></tr></table></figure><p>遇到报错 <code>configure: error: Cannot find OpenSSL&#39;s &lt;evp.h&gt;</code></p><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install build-essential libexpat1-dev libgeoip-dev libpng-dev libpcre3-dev libssl-dev libxml2-dev rcs zlib1g-dev libmcrypt-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libwebp-dev pkg-config</span><br></pre></td></tr></table></figure><h5 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h5><p>配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/php/etc</span><br><span class="line">cp php-fpm.conf.default php-fpm.conf</span><br><span class="line">vim php-fpm.conf</span><br></pre></td></tr></table></figure><p>php-fpm没有对应的service文件（既不能使用 service php-fpm start）</p><p>采用信号进行进程管理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">找到 ;pid = run/php-fpm.pid</span><br><span class="line">修改为 pid = /var/run/php-fpm/php-fpm.pid</span><br></pre></td></tr></table></figure><p>进入 /usr/local/php/etc/php-fpm.d</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp www.conf.default www.conf</span><br></pre></td></tr></table></figure><p>将 user = www-data</p><p>group = www-data</p><p>修改为nginx用户和用户组</p><p>当 <code>nginx</code> 无法解析php文件时：</p><p>假如php-fpm和nginx不在同一台服务器使用这种基于tcp连接</p><p>则对应配置文件修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen = 127.0.0.1:9000</span><br></pre></td></tr></table></figure><p>否则:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen = /var/run/php-fpm/php7.2-fpm.sock</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;EMS&quot;&gt;&lt;a href=&quot;#EMS&quot; class=&quot;headerlink&quot; title=&quot;EMS&quot;&gt;&lt;/a&gt;EMS&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;阿里云优惠活动 279 买了三年一核两G的主机玩玩。&lt;/p&gt;
&lt;p&gt;记录从零搭建开发环境的过程。&lt;/p&gt;

      
    
    </summary>
    
      <category term="运维笔记" scheme="https://double-c.github.io/categories/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://double-c.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>编写优秀的单元测试</title>
    <link href="https://double-c.github.io/2018/05/22/php-unit/"/>
    <id>https://double-c.github.io/2018/05/22/php-unit/</id>
    <published>2018-05-22T02:17:23.000Z</published>
    <updated>2018-09-17T08:08:54.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写优秀的单元测试"><a href="#编写优秀的单元测试" class="headerlink" title="编写优秀的单元测试"></a>编写优秀的单元测试</h2><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>太久没写单元测试了</p><p>等有时间再补代码用例</p><p>对知识点能有更好的补充说明。 mark</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>单元测试主要是作为一种良好的实践来编写的。</p><p>它能帮助开发人员识别并修复bug、<strong>重构代码</strong>。 </p><ul><li>理想的单元测试应当覆盖程序所有可能的路径</li><li>一个单元测试通常覆盖一个函数或方法中的一个特定路径</li><li>测试方法之间经常有隐含的依赖关系暗藏在测试的实现方案中</li></ul><p>单元测试的目标是尽可能地隔离周边环境的情况下测试每个组件。 </p><p>只有隔离了周围环境的影响，才能发现被测试的组件与周边组件间的耦合是否真正被解开。</p><p>所以单元测试也可用于检测代码是否过于耦合。</p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#测试进展">测试进展</a></li><li><a href="#常用命令">常用命令</a></li><li><a href="#常见问题">常见问题</a></li><li><a href="#基础知识">基础知识</a></li><li><a href="#测试的依赖关系">测试的依赖关系</a></li><li><a href="#数据供给器">数据供给器</a></li><li><a href="#测试异常">测试异常</a></li><li><a href="#对输出进行测试">对输出进行测试</a></li><li><a href="#基境">基境</a></li><li><a href="#组织测试">组织测试</a></li><li><a href="#数据库测试">数据库测试</a></li><li><a href="#测试替身">测试替身</a></li><li><a href="#测试实践">测试实践</a></li></ul><h4 id="测试进展"><a href="#测试进展" class="headerlink" title="测试进展"></a>测试进展</h4><p>对于每个测试时的运行，PHPUnit 命令行输出一个字符来指示进展</p><table><thead><tr><th>字符</th><th>进展</th></tr></thead><tbody><tr><td>.</td><td>测试成功时输出<code>.</code></td></tr><tr><td>F</td><td>一个断然失败时输出<code>F</code></td></tr><tr><td>E</td><td>产生一个错误时输出<code>E</code></td></tr><tr><td>R</td><td>当测试被标记为有风险时输出<code>R</code></td></tr><tr><td>S</td><td>当测试被跳过时输出<code>S</code></td></tr><tr><td>I</td><td>测试被标记为不完整或未实现时输出<code>I</code></td></tr></tbody></table><blockquote><p>失败是指违背了 <code>PHPUnit</code> 的断言<br>错误是指意料之外的异常或 <code>PHP</code> 错误<br>这种差异在某些时候是非常有用的，因为错误往往比失败更容易修复<br>如果得到一个非常长的问题列表，那么最有先对付错误</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpunit ArrayTest</span><br></pre></td></tr></table></figure><blockquote><p><code>PHPUnit</code> 命令行测试执行器在<strong>当前工作目录</strong>中寻找 <code>ArrayTest.php</code> 源文件并加载之<br>如果在此源文件中能找到 <code>ArrayTest</code> 测试用例类，此类中的测试将被执行  </p></blockquote><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>Q：当你想把一些东西写到 <code>print</code> 语句或者调试表达式中时</p><blockquote><p>A: 别这么做，将其写成一个测试来代替</p></blockquote><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ul><li>针对类 <code>Class</code> 的测试写在类 <code>ClassTest</code> 中</li><li><code>ClassTest</code>  通常继承自 <code>PHPUnit\Framework\TestCase</code></li><li>测试通常是命名为 <code>test*</code> 的公用( <code>public</code> )方法</li><li>在测试方法内，类似于 <code>assertEquals()</code> 这样的断言方法用来对实际值于预期值做出断言</li></ul><h4 id="测试的依赖关系"><a href="#测试的依赖关系" class="headerlink" title="测试的依赖关系"></a>测试的依赖关系</h4><p><code>PHPUnit</code> 支持对测试方法之间的显式依赖关系进行声明</p><p>这种依赖关系并不是定义在测试方法的执行顺序中</p><p>而是允许生产者返回一个测试基境( <code>fixture</code> ) 的示例</p><p>并将此实例传递给依赖于它的消费者</p><blockquote><p>生产者( producer ) : 是能生成被测单元并将其作为返回值的测试方法</p><p>消费者（consumer） ： 是依赖于一个或多个生产者及其返回值的测试方法</p></blockquote><p><code>@depends</code> 标注来表达依赖情况</p><p>默认情况下，生产者所产生的返回值将“原样”传递给相应的消费者。 </p><p>这意味着如果生产者返回的是一个对象，那么传递给消费者的是一个指向此对象的引用 </p><p>如果需要传递对象的副本而非引用，则应当用 @depends clone 替代 @depends </p><h4 id="数据供给器"><a href="#数据供给器" class="headerlink" title="数据供给器"></a>数据供给器</h4><p>测试方法可以接受任意参数</p><p>这些参数可以由数据供给器来提供</p><p>用 <code>@dataProvider</code> 标注来指定哪个数据供给器方法</p><p>数据供给器方法必须声明为 <code>public</code></p><p>其返回值可以是一个数组，其每个元素是一个数组的话，可以利用键值对元素进行说明</p><p>或者是一个实现了 <code>lterator</code> 接口的对象。</p><h4 id="测试异常"><a href="#测试异常" class="headerlink" title="测试异常"></a>测试异常</h4><p>方法：</p><ul><li>expectException()</li><li>expectExceptionCode() </li><li>expectExceptionMessage() </li><li>expectExceptionMessageRegExp() </li></ul><p>可以用于为被测代码所抛出的异常建立预期，也可以使用expectedException标注 </p><blockquote><p>默认情况下，PHPUnit将测试在执行中触发的PHP错误、警告、通知都转换为异常 </p><p>所以对异常进行测试是越明确越好，对于太笼统的类进行测试有可能导致不良副作用 </p></blockquote><h4 id="对输出进行测试"><a href="#对输出进行测试" class="headerlink" title="对输出进行测试"></a>对输出进行测试</h4><p>有时候想要断言某方法的运行过程是否中生成了预期的输出</p><p>断言输出的方法：<code>expectOutputString()</code></p><p>获取程序输出的方法：<code>getActualOutput()</code></p><h4 id="基境"><a href="#基境" class="headerlink" title="基境"></a>基境</h4><p>在编写试时最费时的部分之一就是<strong>编写代码来将整个场景设置成某个已知的状态</strong></p><p> 并在测试结束后将其复原到初始状态</p><p>这个已知的状态称为测试的基境( <code>fixture</code> )。</p><p>PHPUnit 支持共享建立基境的代码 </p><p>在运行某个测试方法前，会调用一个叫 <code>setUp()</code> 的模板方法 </p><p><code>setUp()</code> 是创建测试所用对象的地方 </p><p>当测试方法运行结束后，不管成功或失败都会调用 <code>tearDown()</code> 方法 </p><p><code>tearDown()</code> 是清理测试所用对象的地方 </p><h5 id="setUp-多-tearDown-少"><a href="#setUp-多-tearDown-少" class="headerlink" title="setUp() 多 tearDown() 少"></a>setUp() 多 tearDown() 少</h5><p>实际上只有在 setUp() 中分配类诸如文件或套接字之类的外部资源才需要实现 tearDown() </p><p>如果 setUp() 中只创建纯 PHP 对象，通常可以略过 tearDown() </p><h5 id="如果两个基境建立工作略有不同"><a href="#如果两个基境建立工作略有不同" class="headerlink" title="如果两个基境建立工作略有不同"></a>如果两个基境建立工作略有不同</h5><ul><li>如果两个 <code>setUp()</code> 代码仅有微小差异，把差异代码从 <code>setUp()</code> 移到测试方法内</li><li>如果两个 <code>setUp()</code> 是确实不一样，那么需要另外一个测试用例类</li></ul><h5 id="基境共享"><a href="#基境共享" class="headerlink" title="基境共享"></a>基境共享</h5><p>一个有实际意义的多测试间共享基境的例子是数据库连接 </p><p>只登陆数据库一次，然后重用此连接，而不是每个测试都建立一个新的数据库连接 </p><p>在同一个测试套件内的不同测试之间共享基境 </p><p>用 <code>setUpBeforeClass()</code> 和 <code>tearDownAfterClass()</code> 模板方法来 </p><p>分别在测试用例类的第一个测试之前和最后一个测试之后连接与断开数据库 </p><h4 id="组织测试"><a href="#组织测试" class="headerlink" title="组织测试"></a>组织测试</h4><p>我们希望能将任意数量的测试以任何组合方式运行</p><ol><li>用文件系统来编排测试套件</li></ol><p>最简单的大概就是把偶有测试用例源文件放在一个测试目录中</p><p>通过对测试目录进行递归遍历，PHPUnit 能自动发现并运行测试 </p><p>这种方法的缺点是无法控制测试的运行顺序 </p><p>这可能导致测试依赖关系方面的问题 </p><ol start="2"><li>用 XML 配置文件也可以用于编排测试套件</li></ol><p>如果phpunit.xml 或 phpunit.xml.dist 存在与当前工作目录且未使用 –configuration </p><p>将自动从此文件中读取配置，可以明确指定测试的执行顺序</p><h4 id="数据库测试"><a href="#数据库测试" class="headerlink" title="数据库测试"></a>数据库测试</h4><p>许多入门与中级的单元测试范例读暗示着这样一种信息 </p><p>很容易用简单的测试来对应用程序的逻辑进行测试 </p><p>但对于以数据库为中心的应用程序而言，这与现实想去甚远  </p><h5 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h5><p> 为什么所有单元测试的范例都不包含数据交互？ </p><p>这类测试的建立和维护都很复杂。 </p><p>对数据库进行测试时，需要考虑以下这些变数 :</p><ol><li>数据库和表</li><li>向表中插入测试所需要的行</li><li>测试运行完毕后验证数据库的状态</li><li>每个新测试都要清理数据库</li></ol><p>另外必须认识到，对于代码而言，本质上来说<strong>数据库是全局输入变量</strong></p><p>一个测试中出现的失败很容易影响到后继的测试结果，从而让整个测试过程变得非常艰难</p><p>随着数据库交互规模的增大，运行测试可能需要耗费可观的时间 </p><p>只要保持每个测试所使用的数据量较小并且尽可能用非数据库测试来对代码进行测试 </p><h5 id="数据库测试的四个阶段"><a href="#数据库测试的四个阶段" class="headerlink" title="数据库测试的四个阶段"></a>数据库测试的四个阶段</h5><ol><li>建立基境</li><li>执行被测系统</li><li>验证结果</li><li>拆除基境</li></ol><h4 id="测试替身"><a href="#测试替身" class="headerlink" title="测试替身"></a>测试替身</h4><p>有时候对被测系统进行测试是很困难的，因为它依赖于其他无法在测试环境中使用的组件 </p><p>这有可能是因为这些组件不可用，它们不会返回测试所需要的结果，或者执行它们会有不良副作用 </p><p>在其他情况下，我们的测试策略要求对被测系统的内部行为有更多控制或更多可见性 </p><p>如果在编写测试时无法使用（或选择不使用）实际的依赖组件（DOC），可以用测试替身来代替 </p><p>测试替身不需要和真正依赖最贱有完全一样的行为方式 </p><p>他只需要提供和真正的组件同样的 API 即可，这样被测系统会以为它是真正的组件 </p><h4 id="测试实践"><a href="#测试实践" class="headerlink" title="测试实践"></a>测试实践</h4><p>你总能编写更多测试。但是很快就会发现，在所有想得出来的测试中只有很小一部分是真正有用的 </p><ul><li><p>需要编写的是那些觉得能运作但却失败或觉得必将失败却成功的测试 </p></li><li><p>另一种思考的方式是从成本/收益的关系上去考量，需要编写的是能够给出反馈信息的测试 </p></li></ul><h5 id="在开发过程中"><a href="#在开发过程中" class="headerlink" title="在开发过程中"></a>在开发过程中</h5><p>当需要对软件的内部结构进行更改时，你实际上是要在不影响其可见行为的情况下让它更加容易理解、更加易于修改</p><p>测试套件对于安全地进行这些所谓的重构而言是非常宝贵的，否则，你可能在重构的过程中将系统搞坏而不自知</p><p>在使用单元测试来确认重构的转换步骤中确实保持原有行为并且没有引入错误时，以下情况有助于改进项目的编码与设计 </p><ol><li>所有单元测试均正确运行</li><li>代码传达其设计原则</li><li>代码没有冗(rong)余</li><li>代码所包含的类和方法的数量降至最低</li></ol><h5 id="在调试过程中"><a href="#在调试过程中" class="headerlink" title="在调试过程中"></a>在调试过程中</h5><p> 当看到缺陷报告时，你可能会有尽快修复错误的冲动 </p><p> 经验表明，这种冲动不是好事，<strong>因为修复一个缺陷很有可能导致另外一个缺陷</strong></p><p>下列操作可以帮你压住冲动 </p><ol><li><strong>确认能够重现此缺陷</strong></li><li>在代码中寻找此缺陷最小规模的表达。例如，如果在输出中有一个数字看起来不对，那么就寻找出算出此数字的那个对象</li><li>编写一个目前会失败而缺陷修复将会成功的自动测试</li><li>修复缺陷</li></ol><p>寻找缺陷的最小可靠重现使你有机会切真正检查缺陷的原因 </p><p>当修复了缺陷之后，所编写的测试有助于提高缺陷真正被修复的几率 </p><p>因为新加入的测试降低了未来修改代码时又破坏此修复的可能性 </p><p>而之前所编写的所有测试则降低了在不经意间导致其他问题的可能性 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编写优秀的单元测试&quot;&gt;&lt;a href=&quot;#编写优秀的单元测试&quot; class=&quot;headerlink&quot; title=&quot;编写优秀的单元测试&quot;&gt;&lt;/a&gt;编写优秀的单元测试&lt;/h2&gt;&lt;h4 id=&quot;备注&quot;&gt;&lt;a href=&quot;#备注&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php常用函数</title>
    <link href="https://double-c.github.io/2018/03/25/php-function/"/>
    <id>https://double-c.github.io/2018/03/25/php-function/</id>
    <published>2018-03-25T03:38:24.000Z</published>
    <updated>2018-09-19T03:15:03.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a>PHP函数</h2><p>整理下一些函数，方便查阅。</p><p>常用业务都是查询出对应的数据，通常都是字符串和数组</p><p>然后对其进行操作，返回业务需求所需的数据格式</p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li>字符串<ul><li><a href="#字符串转数组">字符串转数组</a></li><li><a href="#控制字符串大小写">控制字符串大小写</a></li><li><a href="#去除字符串空白符">去除字符串空白符</a></li><li><a href="#文本在指定长度后换行">文本在指定长度后换行</a></li><li><a href="#数字处理">数字处理</a></li><li><a href="#汉字处理">汉字处理</a></li><li><a href="#字符串搜索">字符串搜索</a></li></ul></li><li>数组<ul><li><a href="#键">键</a></li><li><a href="#值">值</a></li><li><a href="#操作数组">操作数组</a></li><li><a href="#统计数组">统计数组</a></li><li><a href="#使用回调函数处理数组元素">使用回调函数处理数组元素</a></li><li><a href="#排序">排序</a></li></ul></li></ul><h5 id="字符串转数组"><a href="#字符串转数组" class="headerlink" title="字符串转数组"></a>字符串转数组</h5><p><code>explode()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$str = <span class="string">"Hello world. I love Shanghai!"</span>;</span><br><span class="line">print_r(explode(<span class="string">" "</span>, $str));</span><br></pre></td></tr></table></figure><h5 id="控制字符串大小写"><a href="#控制字符串大小写" class="headerlink" title="控制字符串大小写"></a>控制字符串大小写</h5><ul><li><code>ucfirst()</code> ：字符串中的第一个单词首字母大写</li><li><code>ucwords()</code> ：字符串中的多个单词首字母大写  </li><li><code>strtolower()</code> ：修改整个字符串为小写</li><li><code>strtoupper()</code> ：修改整个字符串为大写</li></ul><h5 id="去除字符串空白符"><a href="#去除字符串空白符" class="headerlink" title="去除字符串空白符"></a>去除字符串空白符</h5><ul><li><code>ltrim()</code> ：从字符串开头删除空白符</li><li><code>rtrim()</code>： 从字符串末尾开始删除空白符</li><li><code>trim()</code> ： 会删除字符串开头和末尾的空白符。(第二个参数可以指定需要去除的字符)</li></ul><blockquote><p>空白符 :    换行、回车、空格、水平和垂直制表符、以及null…..</p></blockquote><h5 id="文本在指定长度后换行"><a href="#文本在指定长度后换行" class="headerlink" title="文本在指定长度后换行"></a>文本在指定长度后换行</h5><p><code>wordwrap()</code> ：默认会每75个字符自动换行</p><p>还提供第二个参数指定一个不同的行长度</p><p>第三个参数可以使用其他字符换行符</p><h5 id="数字处理"><a href="#数字处理" class="headerlink" title="数字处理"></a>数字处理</h5><ul><li><code>round($string, $a)</code> ：$a 代表小数点后几位，四舍五入</li><li><code>ceil()</code> ：向上取整，结果为整数</li><li><code>floor()</code> ：向下取整，结果为整数</li><li><code>range($start, $end, $length)</code> ：生成指定范围的字符串数组</li><li><code>mt_rand()</code> ：生成随机数</li><li><code>number_format()</code> ：格式化数字 千位分隔符</li></ul><h5 id="汉字处理"><a href="#汉字处理" class="headerlink" title="汉字处理"></a>汉字处理</h5><ul><li><code>mb_strlen()</code> ：计算字符串长度   一个汉字也会认为是长度为1     可以指定编码</li><li><code>mb_substr()</code> ：字符串截取     0第一个字符    -1 最后一个字符     可以指定编码</li></ul><h5 id="字符串搜索"><a href="#字符串搜索" class="headerlink" title="字符串搜索"></a>字符串搜索</h5><ul><li><code>strpos()</code> ：查找字符串在另一字符串中第一次出现的位置，大小写敏感</li><li><code>strripos()</code> ：查找字符串在另一字符串中<strong>最后一次</strong>出现的位置，大小写敏感</li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>PHP允许将任何数据类型赋至一个数组元素 </p><p>每个数组中每个键只能包含一个唯一的值 </p><p>数组处理完成后，<code>array_unique()</code> 就是<strong>删除重复元素</strong>的最佳方法</p><p>要循环遍历一个数组,并处理其中的所有或部分元素</p><p>最容易的方法是使用foreach </p><p><code>foreach()</code> 返回的变量并不是数组中原值的别名 </p><p>它们是一些副本,如果修改这些值,<strong>不会反映到数组中</strong> </p><p>如果想要在 <code>foreach()</code> 中修改值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> &amp;$v) &#123;<span class="comment">// 使用引用符，对数组的修改会反映到数组中</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量赋值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>($a, $b, $c) = $arr    <span class="comment">// 等同于  $a = $arr[0]     $b = arr[1]     $c = arr[2]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$a = <span class="string">'A'</span>;</span><br><span class="line">$b = <span class="string">'B'</span>;</span><br><span class="line">$c = <span class="string">'C'</span>;</span><br><span class="line">compact(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);   <span class="comment">// 等同于 $arr['a'] = 'A', $arr['b'] = 'B'</span></span><br></pre></td></tr></table></figure><h5 id="键"><a href="#键" class="headerlink" title="键"></a>键</h5><ul><li><code>array_keys()</code> ：返回数组中所有的键名</li><li><code>array_key_exists()</code> ：检查给定的键名或索引是否存在于数组中</li></ul><h5 id="值"><a href="#值" class="headerlink" title="值"></a>值</h5><ul><li><code>array_values()</code> ：返回数组中所有的值，适合用于数组中元素下标混乱的数组或者将关联数组转成索引数组</li><li><code>in_array()</code> ：检查数组中是否存在某个值(返回布尔值)  默认使用 <code>==</code> 判断  可以在第三个参数加上true使用   <code>===</code> </li><li><code>array_search()</code>  ： 检查数组中是否存在某个值，返回键值</li></ul><h5 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h5><ul><li><code>array_flip()</code> ： 交换数组中的键和值。返回一个反转后的数组，如果同一个值出现了多次，则最后一个键名将作为他的值</li><li><code>array_reverse()</code> ：将数组中的元素翻转， 键值不变，顺序翻转</li><li><code>array_unique()</code> ：用于删除数组中重复的值，并返回没有重复值的新数组</li><li><code>array_intersect()</code> ：计算两个数组的交集</li><li><code>array_diff()</code> ： 计算两个数组的差值</li><li><code>unset()</code> ： 删除一个或者多个不连续的元素</li><li><code>array_splice()</code> ：删除多个连续的元素 ，会自动对数组重新进行索引</li><li><code>array_slice()</code> ：数组截取，不会改变原数组</li></ul><h5 id="统计数组"><a href="#统计数组" class="headerlink" title="统计数组"></a>统计数组</h5><ul><li><code>count()</code> ：计算数组中元素的个数或对象中属性个数，对于其他值返回1，如果参数是变量没有定义返回0</li><li><code>array_count_values()</code> ： 用于统计数组中所有的值出现的次数，返回的数组键名是原来的值,返回的值是键名在原数组出现的次数</li><li><code>array_sum()</code> ： 计算数组中所有的值的和</li></ul><h5 id="使用回调函数处理数组元素"><a href="#使用回调函数处理数组元素" class="headerlink" title="使用回调函数处理数组元素"></a>使用回调函数处理数组元素</h5><ul><li><code>array_filter()</code> ：使用回调函数过滤数组中的元素</li><li><code>array_walk()</code> ：对数组中的每个元素都应用回调函数处理</li><li><code>array_map()</code> ： 对多个数组中的每个元素都应用回调函数处理，多个数组时长度应该相同,函数是平行作用的，如果长度不同，最短的数组会用空值填充</li></ul><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><ul><li><code>sort()</code> [ <code>rsort()</code> ] ：按升序(降序)对给定的数组的值排序，把数组转为索引数组</li><li><code>ksrot</code> [ <code>krsort()</code> ] ：按升序(降序)对给定的数组的键值排序</li><li><code>asort</code> [ <code>arsort()</code> ] ：按升序(降序)对给定数组的值进行排序，排序后保留索引关系</li><li><code>array_multisort($empty_arr, SORT_DESC)</code> ：二维数组排序，会改变原数组</li></ul><h5 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h5><p><code>implode()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'Hello'</span>,<span class="string">'World!'</span>,<span class="string">'I'</span>,<span class="string">'love'</span>,<span class="string">'Shanghai!'</span>);</span><br><span class="line"><span class="keyword">echo</span> implode(<span class="string">" "</span>, $arr);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP函数&quot;&gt;&lt;a href=&quot;#PHP函数&quot; class=&quot;headerlink&quot; title=&quot;PHP函数&quot;&gt;&lt;/a&gt;PHP函数&lt;/h2&gt;&lt;p&gt;整理下一些函数，方便查阅。&lt;/p&gt;
&lt;p&gt;常用业务都是查询出对应的数据，通常都是字符串和数组&lt;/p&gt;
&lt;p&gt;然后对其
      
    
    </summary>
    
      <category term="后端开发" scheme="https://double-c.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="https://double-c.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>字符编码</title>
    <link href="https://double-c.github.io/2017/12/17/code-string/"/>
    <id>https://double-c.github.io/2017/12/17/code-string/</id>
    <published>2017-12-17T03:59:50.000Z</published>
    <updated>2018-09-17T04:01:33.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>万恶的中文乱码问题归根结底都是编码问题！</p><p>记录爬坑历程。</p><h3 id="ANSI编码"><a href="#ANSI编码" class="headerlink" title="ANSI编码"></a>ANSI编码</h3><p><strong>不同的国家和地区制定了不同的标准</strong> ，由此产生了 GB2312, BIG5, JIS 等各自的编码标准。</p><p>这些使用 2 个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码。</p><p><strong>在简体中文系统下，ANSI 编码代表 GB2312 编码</strong>  【敲黑板！ T.T 】</p><p>在日文操作系统下，ANSI 编码代表 JIS 编码。</p><p>不同 ANSI 编码之间互不兼容，</p><p>当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。</p><p>当然对于ANSI编码而言，0x00~0x7F之间的字符，依旧是1个字节代表1个字符。</p><p>这一点是ASNI编码与Unicode编码之间最大也最明显的区别。</p><h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。</p><p>它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p><p>1990年开始研发，1994年正式公布。随着计算机工作能力的增强，Unicode也在面世以来的十多年里得到普及。</p><p>Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。</p><p>Unicode用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符，或者说有1114112个码位。</p><p>码位就是可以分配给字符的数字。UTF-8、UTF-16、UTF-32都是将数字转换到程序数据的编码方案。</p><h3 id="UTF-8编码"><a href="#UTF-8编码" class="headerlink" title="UTF-8编码"></a>UTF-8编码</h3><p>UTF-8是UNICODE的一种变长字符编码又称万国码，由Ken Thompson于1992年创建。</p><p>现在已经标准化为RFC 3629。UTF-8用1到6个字节编码UNICODE字符。</p><p>用在网页上可以同一页面显示中文简体繁体及其它语言(如日文，韩文)。</p><h3 id="PHP转换编码"><a href="#PHP转换编码" class="headerlink" title="PHP转换编码"></a>PHP转换编码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1：当前编码   </span></span><br><span class="line"><span class="comment">// 参数2：目标编码       //IGNORE：忽略识别不了的字符串 继续往下翻译 例如：“-”</span></span><br><span class="line"><span class="comment">// 参数三 ： 转码字符串</span></span><br><span class="line">$string = iconv( <span class="string">"UTF-8"</span>,  <span class="string">"GBK//IGNORE"</span>, $string );</span><br></pre></td></tr></table></figure><h3 id="查看字符编码"><a href="#查看字符编码" class="headerlink" title="查看字符编码"></a>查看字符编码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$encode = mb_detect_encoding( $string,  <span class="keyword">array</span>(<span class="string">'ASCII'</span>, <span class="string">'UTF-8'</span>, <span class="string">'GB2312'</span>, <span class="string">'GBK'</span>, <span class="string">'BIG5'</span>) );</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $encode;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h2&gt;&lt;p&gt;万恶的中文乱码问题归根结底都是编码问题！&lt;/p&gt;
&lt;p&gt;记录爬坑历程。&lt;/p&gt;
&lt;h3 id=&quot;ANSI编码&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="那些年踩过的坑" scheme="https://double-c.github.io/categories/%E9%82%A3%E4%BA%9B%E5%B9%B4%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    
    
      <category term="人艰不拆" scheme="https://double-c.github.io/tags/%E4%BA%BA%E8%89%B0%E4%B8%8D%E6%8B%86/"/>
    
  </entry>
  
</feed>
